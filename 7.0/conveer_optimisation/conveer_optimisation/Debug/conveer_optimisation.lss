
conveer_optimisation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000092c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000092c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800062  00800062  000009c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000675  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000990  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  0000245c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000453  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b1  00000000  00000000  000029d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002c88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	ac c1       	rjmp	.+856    	; 0x362 <__vector_4>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e2       	ldi	r30, 0x2C	; 44
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a2 36       	cpi	r26, 0x62	; 98
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a2 e6       	ldi	r26, 0x62	; 98
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	ae 37       	cpi	r26, 0x7E	; 126
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	1f d4       	rcall	.+2110   	; 0x898 <main>
  5a:	66 c4       	rjmp	.+2252   	; 0x928 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <segchar>:
		case 8: res = 0b01111111; break;
		case 9: res = 0b01101111; break;
		case 0: res = 0b00111111; break;
		return res;
	}
}
  5e:	08 95       	ret

00000060 <SPI>:





void SPI (void) {
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
	
	cli ();
  64:	f8 94       	cli
	char byte = 0;
	for (int digit = 0; digit<DIGITS_MAX; digit++) {
  66:	c0 e0       	ldi	r28, 0x00	; 0
  68:	d0 e0       	ldi	r29, 0x00	; 0


void SPI (void) {
	
	cli ();
	char byte = 0;
  6a:	80 e0       	ldi	r24, 0x00	; 0
	for (int digit = 0; digit<DIGITS_MAX; digit++) {
  6c:	6c c0       	rjmp	.+216    	; 0x146 <SPI+0xe6>
		if (voltage_f) {
  6e:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  72:	99 23       	and	r25, r25
  74:	09 f4       	brne	.+2      	; 0x78 <SPI+0x18>
  76:	3f c0       	rjmp	.+126    	; 0xf6 <SPI+0x96>
			byte = segchar(digits_numbers[digit]);
  78:	fe 01       	movw	r30, r28
  7a:	ee 58       	subi	r30, 0x8E	; 142
  7c:	ff 4f       	sbci	r31, 0xFF	; 255
  7e:	80 81       	ld	r24, Z
  80:	08 2e       	mov	r0, r24
  82:	00 0c       	add	r0, r0
  84:	99 0b       	sbc	r25, r25
  86:	eb df       	rcall	.-42     	; 0x5e <segchar>
			if (timing == 1 &&((digit == 0 && min>0) || (digit == 1 && hour>0))){   // point blink
  88:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <timing>
  8c:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <timing+0x1>
  90:	21 30       	cpi	r18, 0x01	; 1
  92:	31 05       	cpc	r19, r1
  94:	a9 f4       	brne	.+42     	; 0xc0 <SPI+0x60>
  96:	20 97       	sbiw	r28, 0x00	; 0
  98:	39 f4       	brne	.+14     	; 0xa8 <SPI+0x48>
  9a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <min>
  9e:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <min+0x1>
  a2:	12 16       	cp	r1, r18
  a4:	13 06       	cpc	r1, r19
  a6:	54 f0       	brlt	.+20     	; 0xbc <SPI+0x5c>
  a8:	c1 30       	cpi	r28, 0x01	; 1
  aa:	d1 05       	cpc	r29, r1
  ac:	49 f4       	brne	.+18     	; 0xc0 <SPI+0x60>
  ae:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <hour>
  b2:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <hour+0x1>
  b6:	12 16       	cp	r1, r18
  b8:	13 06       	cpc	r1, r19
  ba:	14 f4       	brge	.+4      	; 0xc0 <SPI+0x60>
						byte|=(1<<7);
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	2a c0       	rjmp	.+84     	; 0x114 <SPI+0xb4>
			}
			else if (conveer == ON && digit == conveer_spi){
  c0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <conveer>
  c4:	99 23       	and	r25, r25
  c6:	29 f0       	breq	.+10     	; 0xd2 <SPI+0x72>
  c8:	c4 30       	cpi	r28, 0x04	; 4
  ca:	d1 05       	cpc	r29, r1
  cc:	11 f4       	brne	.+4      	; 0xd2 <SPI+0x72>
					byte|=(1<<7);	
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	21 c0       	rjmp	.+66     	; 0x114 <SPI+0xb4>
			}
			else if (signale == ON && digit == signal_spi){
  d2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <signale>
  d6:	99 23       	and	r25, r25
  d8:	29 f0       	breq	.+10     	; 0xe4 <SPI+0x84>
  da:	c5 30       	cpi	r28, 0x05	; 5
  dc:	d1 05       	cpc	r29, r1
  de:	11 f4       	brne	.+4      	; 0xe4 <SPI+0x84>
					byte|=(1<<7);
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	18 c0       	rjmp	.+48     	; 0x114 <SPI+0xb4>
			}
			else if (blink == ON && digit == blink_spi){
  e4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
  e8:	99 23       	and	r25, r25
  ea:	a1 f0       	breq	.+40     	; 0x114 <SPI+0xb4>
  ec:	c3 30       	cpi	r28, 0x03	; 3
  ee:	d1 05       	cpc	r29, r1
  f0:	89 f4       	brne	.+34     	; 0x114 <SPI+0xb4>
						byte|=(1<<7);
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	0f c0       	rjmp	.+30     	; 0x114 <SPI+0xb4>
			} 
		}
		else {
			 if (digit == 3) byte = 0X3F;          // write "OFF"
  f6:	c3 30       	cpi	r28, 0x03	; 3
  f8:	d1 05       	cpc	r29, r1
  fa:	39 f0       	breq	.+14     	; 0x10a <SPI+0xaa>
			 else if (digit == 2) byte =  0X71;
  fc:	c2 30       	cpi	r28, 0x02	; 2
  fe:	d1 05       	cpc	r29, r1
 100:	31 f0       	breq	.+12     	; 0x10e <SPI+0xae>
			 else if (digit == 1) byte = 0X71;	 
 102:	c1 30       	cpi	r28, 0x01	; 1
 104:	d1 05       	cpc	r29, r1
 106:	31 f4       	brne	.+12     	; 0x114 <SPI+0xb4>
 108:	04 c0       	rjmp	.+8      	; 0x112 <SPI+0xb2>
			else if (blink == ON && digit == blink_spi){
						byte|=(1<<7);
			} 
		}
		else {
			 if (digit == 3) byte = 0X3F;          // write "OFF"
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	03 c0       	rjmp	.+6      	; 0x114 <SPI+0xb4>
			 else if (digit == 2) byte =  0X71;
 10e:	81 e7       	ldi	r24, 0x71	; 113
 110:	01 c0       	rjmp	.+2      	; 0x114 <SPI+0xb4>
			 else if (digit == 1) byte = 0X71;	 
 112:	81 e7       	ldi	r24, 0x71	; 113
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	12 c0       	rjmp	.+36     	; 0x13e <SPI+0xde>
		}
			for (int c=0; c<8; c++)					  //SPI function
			{
				if (byte&0x80)
 11a:	88 23       	and	r24, r24
 11c:	24 f4       	brge	.+8      	; 0x126 <SPI+0xc6>
				{
					PORTD|=(1<<6);
 11e:	92 b3       	in	r25, 0x12	; 18
 120:	90 64       	ori	r25, 0x40	; 64
 122:	92 bb       	out	0x12, r25	; 18
 124:	03 c0       	rjmp	.+6      	; 0x12c <SPI+0xcc>
				}
				else
				{
					PORTD&=~(1<<6);
 126:	92 b3       	in	r25, 0x12	; 18
 128:	9f 7b       	andi	r25, 0xBF	; 191
 12a:	92 bb       	out	0x12, r25	; 18
				}
				byte = (byte<<1);
 12c:	88 0f       	add	r24, r24
				PORTB|=(1<<0);
 12e:	98 b3       	in	r25, 0x18	; 24
 130:	91 60       	ori	r25, 0x01	; 1
 132:	98 bb       	out	0x18, r25	; 24
				PORTB&=~(1<<0);
 134:	98 b3       	in	r25, 0x18	; 24
 136:	9e 7f       	andi	r25, 0xFE	; 254
 138:	98 bb       	out	0x18, r25	; 24
		else {
			 if (digit == 3) byte = 0X3F;          // write "OFF"
			 else if (digit == 2) byte =  0X71;
			 else if (digit == 1) byte = 0X71;	 
		}
			for (int c=0; c<8; c++)					  //SPI function
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	28 30       	cpi	r18, 0x08	; 8
 140:	31 05       	cpc	r19, r1
 142:	5c f3       	brlt	.-42     	; 0x11a <SPI+0xba>

void SPI (void) {
	
	cli ();
	char byte = 0;
	for (int digit = 0; digit<DIGITS_MAX; digit++) {
 144:	21 96       	adiw	r28, 0x01	; 1
 146:	c6 30       	cpi	r28, 0x06	; 6
 148:	d1 05       	cpc	r29, r1
 14a:	0c f4       	brge	.+2      	; 0x14e <SPI+0xee>
 14c:	90 cf       	rjmp	.-224    	; 0x6e <SPI+0xe>
				PORTB|=(1<<0);
				PORTB&=~(1<<0);
			}
	}
	
	PORTD|=(1<<7); 
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	80 68       	ori	r24, 0x80	; 128
 152:	82 bb       	out	0x12, r24	; 18
	PORTD&=~(1<<7);
 154:	82 b3       	in	r24, 0x12	; 18
 156:	8f 77       	andi	r24, 0x7F	; 127
 158:	82 bb       	out	0x12, r24	; 18
	sei();
 15a:	78 94       	sei
}
 15c:	df 91       	pop	r29
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <get_digits_numbers>:
	


void get_digits_numbers(void){

		if (setup == editing_sec && whole_sek){
 162:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 166:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <setup+0x1>
 16a:	02 97       	sbiw	r24, 0x02	; 2
 16c:	51 f4       	brne	.+20     	; 0x182 <get_digits_numbers+0x20>
 16e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <whole_sek>
 172:	88 23       	and	r24, r24
 174:	31 f0       	breq	.+12     	; 0x182 <get_digits_numbers+0x20>
			digits_numbers[0]=11;               // == ''
 176:	e2 e7       	ldi	r30, 0x72	; 114
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	80 83       	st	Z, r24
			digits_numbers[1]=11;
 17e:	81 83       	std	Z+1, r24	; 0x01
 180:	0b c0       	rjmp	.+22     	; 0x198 <get_digits_numbers+0x36>
		} 
		else {
			digits_numbers[0]= sek%10 ;
 182:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sek>
 186:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sek+0x1>
 18a:	6a e0       	ldi	r22, 0x0A	; 10
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	a5 d3       	rcall	.+1866   	; 0x8da <__divmodhi4>
 190:	e2 e7       	ldi	r30, 0x72	; 114
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 83       	st	Z, r24
			digits_numbers[1]= sek/10 ;
 196:	61 83       	std	Z+1, r22	; 0x01
		}
		if (setup == editing_min && whole_sek){
 198:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 19c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <setup+0x1>
 1a0:	03 97       	sbiw	r24, 0x03	; 3
 1a2:	51 f4       	brne	.+20     	; 0x1b8 <get_digits_numbers+0x56>
 1a4:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <whole_sek>
 1a8:	88 23       	and	r24, r24
 1aa:	31 f0       	breq	.+12     	; 0x1b8 <get_digits_numbers+0x56>
			digits_numbers[2]=11; 
 1ac:	e2 e7       	ldi	r30, 0x72	; 114
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	8b e0       	ldi	r24, 0x0B	; 11
 1b2:	82 83       	std	Z+2, r24	; 0x02
			digits_numbers[3]=11;
 1b4:	83 83       	std	Z+3, r24	; 0x03
 1b6:	0b c0       	rjmp	.+22     	; 0x1ce <get_digits_numbers+0x6c>
		}
		else {
			digits_numbers[2]= min%10 ;
 1b8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 1bc:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <min+0x1>
 1c0:	6a e0       	ldi	r22, 0x0A	; 10
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	8a d3       	rcall	.+1812   	; 0x8da <__divmodhi4>
 1c6:	e2 e7       	ldi	r30, 0x72	; 114
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	82 83       	std	Z+2, r24	; 0x02
			digits_numbers[3]= min/10 ;	
 1cc:	63 83       	std	Z+3, r22	; 0x03
		}
		if (setup == editing_hour && whole_sek){
 1ce:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 1d2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <setup+0x1>
 1d6:	04 97       	sbiw	r24, 0x04	; 4
 1d8:	51 f4       	brne	.+20     	; 0x1ee <get_digits_numbers+0x8c>
 1da:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <whole_sek>
 1de:	88 23       	and	r24, r24
 1e0:	31 f0       	breq	.+12     	; 0x1ee <get_digits_numbers+0x8c>
			digits_numbers[4]=11; 
 1e2:	e2 e7       	ldi	r30, 0x72	; 114
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	8b e0       	ldi	r24, 0x0B	; 11
 1e8:	84 83       	std	Z+4, r24	; 0x04
			digits_numbers[5]=11;
 1ea:	85 83       	std	Z+5, r24	; 0x05
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
		}	
		else{
			digits_numbers[4]= hour%10 ;
 1ee:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
 1f2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour+0x1>
 1f6:	6a e0       	ldi	r22, 0x0A	; 10
 1f8:	70 e0       	ldi	r23, 0x00	; 0
 1fa:	6f d3       	rcall	.+1758   	; 0x8da <__divmodhi4>
 1fc:	e2 e7       	ldi	r30, 0x72	; 114
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	84 83       	std	Z+4, r24	; 0x04
			digits_numbers[5]= hour/10 ;
 202:	65 83       	std	Z+5, r22	; 0x05
		}
	
	if (timer_run){
 204:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <timer_run>
 208:	81 11       	cpse	r24, r1
 20a:	0e c0       	rjmp	.+28     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 20c:	08 95       	ret
		for (int digit = 5; digit; digit--){   // delete zero
			if (digits_numbers[digit] == 0){
 20e:	fc 01       	movw	r30, r24
 210:	ee 58       	subi	r30, 0x8E	; 142
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	20 81       	ld	r18, Z
 216:	21 11       	cpse	r18, r1
 218:	0b c0       	rjmp	.+22     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
				digits_numbers[digit] = 11;     
 21a:	fc 01       	movw	r30, r24
 21c:	ee 58       	subi	r30, 0x8E	; 142
 21e:	ff 4f       	sbci	r31, 0xFF	; 255
 220:	2b e0       	ldi	r18, 0x0B	; 11
 222:	20 83       	st	Z, r18
			digits_numbers[4]= hour%10 ;
			digits_numbers[5]= hour/10 ;
		}
	
	if (timer_run){
		for (int digit = 5; digit; digit--){   // delete zero
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	02 c0       	rjmp	.+4      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
 228:	85 e0       	ldi	r24, 0x05	; 5
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	00 97       	sbiw	r24, 0x00	; 0
 22e:	79 f7       	brne	.-34     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 230:	08 95       	ret

00000232 <EEPROM_write>:



void EEPROM_write (unsigned int uiAddress, signed char ucData)
{
	while (EECR&(1<<EEWE));
 232:	e1 99       	sbic	0x1c, 1	; 28
 234:	fe cf       	rjmp	.-4      	; 0x232 <EEPROM_write>
	EEAR = uiAddress;
 236:	9f bb       	out	0x1f, r25	; 31
 238:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 23a:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE);
 23c:	8c b3       	in	r24, 0x1c	; 28
 23e:	84 60       	ori	r24, 0x04	; 4
 240:	8c bb       	out	0x1c, r24	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
 242:	8c b3       	in	r24, 0x1c	; 28
 244:	82 60       	ori	r24, 0x02	; 2
 246:	8c bb       	out	0x1c, r24	; 28
 248:	08 95       	ret

0000024a <EEPROM_read>:
}


signed char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE));
 24a:	e1 99       	sbic	0x1c, 1	; 28
 24c:	fe cf       	rjmp	.-4      	; 0x24a <EEPROM_read>
	EEAR = uiAddress;
 24e:	9f bb       	out	0x1f, r25	; 31
 250:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 252:	8c b3       	in	r24, 0x1c	; 28
 254:	81 60       	ori	r24, 0x01	; 1
 256:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 258:	8d b3       	in	r24, 0x1d	; 29
}
 25a:	08 95       	ret

0000025c <read_m>:

void read_m (void){
	sek = EEPROM_read(0x01);
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	f4 df       	rcall	.-24     	; 0x24a <EEPROM_read>
 262:	08 2e       	mov	r0, r24
 264:	00 0c       	add	r0, r0
 266:	99 0b       	sbc	r25, r25
 268:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <sek+0x1>
 26c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <sek>
	min = EEPROM_read(0x02);
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ea df       	rcall	.-44     	; 0x24a <EEPROM_read>
 276:	08 2e       	mov	r0, r24
 278:	00 0c       	add	r0, r0
 27a:	99 0b       	sbc	r25, r25
 27c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <min+0x1>
 280:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <min>
	hour = EEPROM_read(0x03);
 284:	83 e0       	ldi	r24, 0x03	; 3
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	e0 df       	rcall	.-64     	; 0x24a <EEPROM_read>
 28a:	08 2e       	mov	r0, r24
 28c:	00 0c       	add	r0, r0
 28e:	99 0b       	sbc	r25, r25
 290:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <hour+0x1>
 294:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <hour>
	if (min  || hour) signal_allowed = 1;
 298:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <min>
 29c:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <min+0x1>
 2a0:	23 2b       	or	r18, r19
 2a2:	11 f4       	brne	.+4      	; 0x2a8 <read_m+0x4c>
 2a4:	89 2b       	or	r24, r25
 2a6:	21 f0       	breq	.+8      	; 0x2b0 <read_m+0x54>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <signal_allowed>
 2ae:	08 95       	ret
	else signal_allowed = 0;
 2b0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <signal_allowed>
 2b4:	08 95       	ret

000002b6 <timer_init>:




void timer_init (void){
	TCCR2 = 0x00; //??????? ????? ?????? ???????
 2b6:	15 bc       	out	0x25, r1	; 37
	//?? 64 - 1/2 sek
	TCCR2 |=(1<<CS22);
 2b8:	85 b5       	in	r24, 0x25	; 37
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	85 bd       	out	0x25, r24	; 37
	ASSR|=(1<<AS2);  // ????????? 32???
 2be:	82 b5       	in	r24, 0x22	; 34
 2c0:	88 60       	ori	r24, 0x08	; 8
 2c2:	82 bd       	out	0x22, r24	; 34
	TIMSK |=(1<<TOIE2);
 2c4:	89 b7       	in	r24, 0x39	; 57
 2c6:	80 64       	ori	r24, 0x40	; 64
 2c8:	89 bf       	out	0x39, r24	; 57
 2ca:	08 95       	ret

000002cc <port_ini>:



void port_ini (void){
	//////////////////// MOSI
	DDRD|=(1<<6); //DS
 2cc:	81 b3       	in	r24, 0x11	; 17
 2ce:	80 64       	ori	r24, 0x40	; 64
 2d0:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<6); //
 2d2:	82 b3       	in	r24, 0x12	; 18
 2d4:	8f 7b       	andi	r24, 0xBF	; 191
 2d6:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<0); //clk
 2d8:	87 b3       	in	r24, 0x17	; 23
 2da:	81 60       	ori	r24, 0x01	; 1
 2dc:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<0); //
 2de:	88 b3       	in	r24, 0x18	; 24
 2e0:	8e 7f       	andi	r24, 0xFE	; 254
 2e2:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<7); // ST vuvid na ekran
 2e4:	81 b3       	in	r24, 0x11	; 17
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<7); //
 2ea:	82 b3       	in	r24, 0x12	; 18
 2ec:	8f 77       	andi	r24, 0x7F	; 127
 2ee:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<1); //MR registriv skudanie z -
 2f0:	87 b3       	in	r24, 0x17	; 23
 2f2:	82 60       	ori	r24, 0x02	; 2
 2f4:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<1); // +
 2f6:	88 b3       	in	r24, 0x18	; 24
 2f8:	82 60       	ori	r24, 0x02	; 2
 2fa:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<5); //OE dlia dozvolu robotu z -
 2fc:	81 b3       	in	r24, 0x11	; 17
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<5); // -
 302:	82 b3       	in	r24, 0x12	; 18
 304:	8f 7d       	andi	r24, 0xDF	; 223
 306:	82 bb       	out	0x12, r24	; 18

	//////////////// buttons
	DDRC&=~(1<<2); //button SET
 308:	84 b3       	in	r24, 0x14	; 20
 30a:	8b 7f       	andi	r24, 0xFB	; 251
 30c:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<3); //button  start
 30e:	84 b3       	in	r24, 0x14	; 20
 310:	87 7f       	andi	r24, 0xF7	; 247
 312:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<4); //button pause
 314:	84 b3       	in	r24, 0x14	; 20
 316:	8f 7e       	andi	r24, 0xEF	; 239
 318:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<5); //voltage
 31a:	84 b3       	in	r24, 0x14	; 20
 31c:	8f 7d       	andi	r24, 0xDF	; 223
 31e:	84 bb       	out	0x14, r24	; 20
	
	PORTC|=(1<<2); //button SET -
 320:	85 b3       	in	r24, 0x15	; 21
 322:	84 60       	ori	r24, 0x04	; 4
 324:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<3); //button  start
 326:	85 b3       	in	r24, 0x15	; 21
 328:	88 60       	ori	r24, 0x08	; 8
 32a:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<4); //button  start
 32c:	85 b3       	in	r24, 0x15	; 21
 32e:	80 61       	ori	r24, 0x10	; 16
 330:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<5); //voltage
 332:	85 b3       	in	r24, 0x15	; 21
 334:	80 62       	ori	r24, 0x20	; 32
 336:	85 bb       	out	0x15, r24	; 21
		//conveer_off; //
		//signal_off;//
		//buton_blinkOff;
	///////////////////////////

	for (int x=0; x<50; x++)  //SPI function
 338:	20 e0       	ldi	r18, 0x00	; 0
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	08 c0       	rjmp	.+16     	; 0x34e <port_ini+0x82>
	{
		PORTB|=(1<<0);
 33e:	88 b3       	in	r24, 0x18	; 24
 340:	81 60       	ori	r24, 0x01	; 1
 342:	88 bb       	out	0x18, r24	; 24
		PORTB&=~(1<<0);
 344:	88 b3       	in	r24, 0x18	; 24
 346:	8e 7f       	andi	r24, 0xFE	; 254
 348:	88 bb       	out	0x18, r24	; 24
		//conveer_off; //
		//signal_off;//
		//buton_blinkOff;
	///////////////////////////

	for (int x=0; x<50; x++)  //SPI function
 34a:	2f 5f       	subi	r18, 0xFF	; 255
 34c:	3f 4f       	sbci	r19, 0xFF	; 255
 34e:	22 33       	cpi	r18, 0x32	; 50
 350:	31 05       	cpc	r19, r1
 352:	ac f3       	brlt	.-22     	; 0x33e <port_ini+0x72>
	{
		PORTB|=(1<<0);
		PORTB&=~(1<<0);
	}
	PORTD |= (1<<7); 
 354:	82 b3       	in	r24, 0x12	; 18
 356:	80 68       	ori	r24, 0x80	; 128
 358:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<7);
 35a:	82 b3       	in	r24, 0x12	; 18
 35c:	8f 77       	andi	r24, 0x7F	; 127
 35e:	82 bb       	out	0x12, r24	; 18
 360:	08 95       	ret

00000362 <__vector_4>:

}



ISR (TIMER2_OVF_vect){
 362:	1f 92       	push	r1
 364:	0f 92       	push	r0
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	0f 92       	push	r0
 36a:	11 24       	eor	r1, r1
 36c:	2f 93       	push	r18
 36e:	3f 93       	push	r19
 370:	4f 93       	push	r20
 372:	5f 93       	push	r21
 374:	6f 93       	push	r22
 376:	7f 93       	push	r23
 378:	8f 93       	push	r24
 37a:	9f 93       	push	r25
 37c:	af 93       	push	r26
 37e:	bf 93       	push	r27
 380:	ef 93       	push	r30
 382:	ff 93       	push	r31
	if (timer_run && voltage_f){
 384:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <timer_run>
 388:	88 23       	and	r24, r24
 38a:	09 f4       	brne	.+2      	; 0x38e <__vector_4+0x2c>
 38c:	7e c0       	rjmp	.+252    	; 0x48a <__stack+0x2b>
 38e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 392:	88 23       	and	r24, r24
 394:	09 f4       	brne	.+2      	; 0x398 <__vector_4+0x36>
 396:	79 c0       	rjmp	.+242    	; 0x48a <__stack+0x2b>
		timing++;
 398:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timing>
 39c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timing+0x1>
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <timing+0x1>
 3a6:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timing>
		if (min==0 && hour==0 && sek==10 && signal_allowed) signale = ON;
 3aa:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <min>
 3ae:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <min+0x1>
 3b2:	21 15       	cp	r18, r1
 3b4:	31 05       	cpc	r19, r1
 3b6:	a1 f4       	brne	.+40     	; 0x3e0 <__vector_4+0x7e>
 3b8:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <hour>
 3bc:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <hour+0x1>
 3c0:	45 2b       	or	r20, r21
 3c2:	71 f4       	brne	.+28     	; 0x3e0 <__vector_4+0x7e>
 3c4:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <sek>
 3c8:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <sek+0x1>
 3cc:	4a 30       	cpi	r20, 0x0A	; 10
 3ce:	51 05       	cpc	r21, r1
 3d0:	39 f4       	brne	.+14     	; 0x3e0 <__vector_4+0x7e>
 3d2:	40 91 69 00 	lds	r20, 0x0069	; 0x800069 <signal_allowed>
 3d6:	44 23       	and	r20, r20
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <__vector_4+0x7e>
 3da:	41 e0       	ldi	r20, 0x01	; 1
 3dc:	40 93 63 00 	sts	0x0063, r20	; 0x800063 <signale>
		if (min == 0 && hour == 0 && sek == 0){
 3e0:	21 15       	cp	r18, r1
 3e2:	31 05       	cpc	r19, r1
 3e4:	09 f5       	brne	.+66     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3e6:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <hour>
 3ea:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <hour+0x1>
 3ee:	45 2b       	or	r20, r21
 3f0:	d9 f4       	brne	.+54     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3f2:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <sek>
 3f6:	50 91 71 00 	lds	r21, 0x0071	; 0x800071 <sek+0x1>
 3fa:	45 2b       	or	r20, r21
 3fc:	a9 f4       	brne	.+42     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
			 if (timing>0 && timing<4){
 3fe:	9c 01       	movw	r18, r24
 400:	21 50       	subi	r18, 0x01	; 1
 402:	31 09       	sbc	r19, r1
 404:	23 30       	cpi	r18, 0x03	; 3
 406:	31 05       	cpc	r19, r1
 408:	20 f4       	brcc	.+8      	; 0x412 <__DATA_REGION_LENGTH__+0x12>
				conveer = ON;
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <conveer>
 410:	5f c0       	rjmp	.+190    	; 0x4d0 <__stack+0x71>
			}
			 else if (timing < 45){
 412:	8d 97       	sbiw	r24, 0x2d	; 45
 414:	1c f4       	brge	.+6      	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
				conveer = OFF;
 416:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <conveer>
 41a:	5a c0       	rjmp	.+180    	; 0x4d0 <__stack+0x71>
			}
			 else {
				read_m();
 41c:	1f df       	rcall	.-450    	; 0x25c <read_m>
				timing = 0;
 41e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timing+0x1>
 422:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timing>
 426:	54 c0       	rjmp	.+168    	; 0x4d0 <__stack+0x71>
			}
		}
		else {
			if (timing>1) {
 428:	02 97       	sbiw	r24, 0x02	; 2
 42a:	0c f4       	brge	.+2      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 42c:	51 c0       	rjmp	.+162    	; 0x4d0 <__stack+0x71>
				timing = 0;
 42e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timing+0x1>
 432:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timing>
				sek--;
 436:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sek>
 43a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sek+0x1>
 43e:	01 97       	sbiw	r24, 0x01	; 1
 440:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <sek+0x1>
 444:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <sek>
				if (sek<0) {
 448:	99 23       	and	r25, r25
 44a:	0c f0       	brlt	.+2      	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
 44c:	41 c0       	rjmp	.+130    	; 0x4d0 <__stack+0x71>
					min--; sek=59;
 44e:	21 50       	subi	r18, 0x01	; 1
 450:	31 09       	sbc	r19, r1
 452:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <min+0x1>
 456:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <min>
 45a:	8b e3       	ldi	r24, 0x3B	; 59
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <sek+0x1>
 462:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <sek>
						if (min<0) {
 466:	33 23       	and	r19, r19
 468:	9c f5       	brge	.+102    	; 0x4d0 <__stack+0x71>
							hour--; min=59;
 46a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
 46e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour+0x1>
 472:	01 97       	sbiw	r24, 0x01	; 1
 474:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <hour+0x1>
 478:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <hour>
 47c:	8b e3       	ldi	r24, 0x3B	; 59
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <min+0x1>
 484:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <min>
 488:	23 c0       	rjmp	.+70     	; 0x4d0 <__stack+0x71>
				}
			}
		}
	}
	else {
		if (timing) timing = 0;
 48a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timing>
 48e:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timing+0x1>
 492:	89 2b       	or	r24, r25
 494:	21 f0       	breq	.+8      	; 0x49e <__stack+0x3f>
 496:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timing+0x1>
 49a:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timing>
		if (signale) signale = OFF;
 49e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <signale>
 4a2:	81 11       	cpse	r24, r1
 4a4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <signale>
		if (blink) blink = OFF;
 4a8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 4ac:	81 11       	cpse	r24, r1
 4ae:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		if (conveer) conveer = OFF;
 4b2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <conveer>
 4b6:	81 11       	cpse	r24, r1
 4b8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <conveer>
		if (whole_sek) whole_sek = 0;
 4bc:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <whole_sek>
 4c0:	88 23       	and	r24, r24
 4c2:	19 f0       	breq	.+6      	; 0x4ca <__stack+0x6b>
 4c4:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <whole_sek>
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <__stack+0x71>
		else whole_sek = 1;
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <whole_sek>
	}
}
 4d0:	ff 91       	pop	r31
 4d2:	ef 91       	pop	r30
 4d4:	bf 91       	pop	r27
 4d6:	af 91       	pop	r26
 4d8:	9f 91       	pop	r25
 4da:	8f 91       	pop	r24
 4dc:	7f 91       	pop	r23
 4de:	6f 91       	pop	r22
 4e0:	5f 91       	pop	r21
 4e2:	4f 91       	pop	r20
 4e4:	3f 91       	pop	r19
 4e6:	2f 91       	pop	r18
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <get_button>:
	
			
			
int get_button () {
	int result = 0;
	if ( voltage_f != voltage_state ){
 4f2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 4f6:	83 b3       	in	r24, 0x13	; 19
 4f8:	82 95       	swap	r24
 4fa:	86 95       	lsr	r24
 4fc:	87 70       	andi	r24, 0x07	; 7
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	89 27       	eor	r24, r25
 502:	81 70       	andi	r24, 0x01	; 1
 504:	28 17       	cp	r18, r24
 506:	f9 f0       	breq	.+62     	; 0x546 <get_button+0x54>
		if (vcount<RESPONSE*2) vcount++;
 508:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <vcount>
 50c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <vcount+0x1>
 510:	80 3b       	cpi	r24, 0xB0	; 176
 512:	94 40       	sbci	r25, 0x04	; 4
 514:	50 f4       	brcc	.+20     	; 0x52a <get_button+0x38>
 516:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <vcount>
 51a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <vcount+0x1>
 51e:	01 96       	adiw	r24, 0x01	; 1
 520:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <vcount+0x1>
 524:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <vcount>
 528:	1d c0       	rjmp	.+58     	; 0x564 <get_button+0x72>
		else {
			voltage_f = voltage_state; 
 52a:	83 b3       	in	r24, 0x13	; 19
 52c:	82 95       	swap	r24
 52e:	86 95       	lsr	r24
 530:	87 70       	andi	r24, 0x07	; 7
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	89 27       	eor	r24, r25
 536:	81 70       	andi	r24, 0x01	; 1
 538:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			vcount = 0;
 53c:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <vcount+0x1>
 540:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <vcount>
 544:	0f c0       	rjmp	.+30     	; 0x564 <get_button+0x72>
		}
	}
	else if (vcount > 0) vcount--;
 546:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <vcount>
 54a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <vcount+0x1>
 54e:	89 2b       	or	r24, r25
 550:	49 f0       	breq	.+18     	; 0x564 <get_button+0x72>
 552:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <vcount>
 556:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <vcount+0x1>
 55a:	01 97       	sbiw	r24, 0x01	; 1
 55c:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <vcount+0x1>
 560:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <vcount>

	if (active_button == press_set || active_button == unpress){
 564:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <active_button>
 568:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <active_button+0x1>
 56c:	83 30       	cpi	r24, 0x03	; 3
 56e:	91 05       	cpc	r25, r1
 570:	11 f0       	breq	.+4      	; 0x576 <get_button+0x84>
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	69 f5       	brne	.+90     	; 0x5d0 <get_button+0xde>
		if (buton_set) {
 576:	9c 99       	sbic	0x13, 4	; 19
 578:	1a c0       	rjmp	.+52     	; 0x5ae <get_button+0xbc>
			if (active_button == unpress) active_button = press_set;
 57a:	89 2b       	or	r24, r25
 57c:	31 f4       	brne	.+12     	; 0x58a <get_button+0x98>
 57e:	83 e0       	ldi	r24, 0x03	; 3
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <active_button+0x1>
 586:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <active_button>
			if (count<RESPONSE) count++;
 58a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 58e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 592:	88 35       	cpi	r24, 0x58	; 88
 594:	92 40       	sbci	r25, 0x02	; 2
 596:	08 f0       	brcs	.+2      	; 0x59a <get_button+0xa8>
 598:	79 c0       	rjmp	.+242    	; 0x68c <get_button+0x19a>
 59a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 59e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <count+0x1>
 5a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count>
 5ac:	6f c0       	rjmp	.+222    	; 0x68c <get_button+0x19a>
		}
		else  if (count > 0) count--;
 5ae:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 5b2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 5b6:	89 2b       	or	r24, r25
 5b8:	09 f4       	brne	.+2      	; 0x5bc <get_button+0xca>
 5ba:	68 c0       	rjmp	.+208    	; 0x68c <get_button+0x19a>
 5bc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 5c0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <count+0x1>
 5ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count>
 5ce:	5e c0       	rjmp	.+188    	; 0x68c <get_button+0x19a>
	}
	
	else if (active_button == press_start || active_button == unpress){
 5d0:	82 30       	cpi	r24, 0x02	; 2
 5d2:	91 05       	cpc	r25, r1
 5d4:	11 f0       	breq	.+4      	; 0x5da <get_button+0xe8>
 5d6:	00 97       	sbiw	r24, 0x00	; 0
 5d8:	61 f5       	brne	.+88     	; 0x632 <get_button+0x140>
		if (buton_start) {
 5da:	9b 99       	sbic	0x13, 3	; 19
 5dc:	1a c0       	rjmp	.+52     	; 0x612 <get_button+0x120>
			if (active_button == unpress) active_button = press_start;
 5de:	89 2b       	or	r24, r25
 5e0:	31 f4       	brne	.+12     	; 0x5ee <get_button+0xfc>
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <active_button+0x1>
 5ea:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <active_button>
			if (count<RESPONSE) count++;
 5ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 5f2:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 5f6:	88 35       	cpi	r24, 0x58	; 88
 5f8:	92 40       	sbci	r25, 0x02	; 2
 5fa:	08 f0       	brcs	.+2      	; 0x5fe <get_button+0x10c>
 5fc:	47 c0       	rjmp	.+142    	; 0x68c <get_button+0x19a>
 5fe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 602:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 606:	01 96       	adiw	r24, 0x01	; 1
 608:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <count+0x1>
 60c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count>
 610:	3d c0       	rjmp	.+122    	; 0x68c <get_button+0x19a>
		}
		else if (count>0) count--;
 612:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 616:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 61a:	89 2b       	or	r24, r25
 61c:	b9 f1       	breq	.+110    	; 0x68c <get_button+0x19a>
 61e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 622:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 626:	01 97       	sbiw	r24, 0x01	; 1
 628:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <count+0x1>
 62c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count>
 630:	2d c0       	rjmp	.+90     	; 0x68c <get_button+0x19a>
	}
	
	else if (active_button == press_stop || active_button == unpress){					
 632:	82 30       	cpi	r24, 0x02	; 2
 634:	91 05       	cpc	r25, r1
 636:	50 f5       	brcc	.+84     	; 0x68c <get_button+0x19a>
		if (buton_stop) {
 638:	9a 99       	sbic	0x13, 2	; 19
 63a:	19 c0       	rjmp	.+50     	; 0x66e <get_button+0x17c>
			if (active_button == unpress) active_button = press_stop;
 63c:	89 2b       	or	r24, r25
 63e:	31 f4       	brne	.+12     	; 0x64c <get_button+0x15a>
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <active_button+0x1>
 648:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <active_button>
			if (count<RESPONSE) count++;
 64c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 650:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 654:	88 35       	cpi	r24, 0x58	; 88
 656:	92 40       	sbci	r25, 0x02	; 2
 658:	c8 f4       	brcc	.+50     	; 0x68c <get_button+0x19a>
 65a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 65e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <count+0x1>
 668:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count>
 66c:	0f c0       	rjmp	.+30     	; 0x68c <get_button+0x19a>
		}
		else if (count > 0) count--;
 66e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 672:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 676:	89 2b       	or	r24, r25
 678:	49 f0       	breq	.+18     	; 0x68c <get_button+0x19a>
 67a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 67e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 682:	01 97       	sbiw	r24, 0x01	; 1
 684:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <count+0x1>
 688:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <count>
	}

	if (count >= RESPONSE){
 68c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <count>
 690:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <count+0x1>
 694:	88 35       	cpi	r24, 0x58	; 88
 696:	92 40       	sbci	r25, 0x02	; 2
 698:	48 f0       	brcs	.+18     	; 0x6ac <get_button+0x1ba>
		count = 0;
 69a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <count+0x1>
 69e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <count>
		result = active_button;
 6a2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <active_button>
 6a6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <active_button+0x1>
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <get_button+0x1be>
	
	
			
			
int get_button () {
	int result = 0;
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0

	if (count >= RESPONSE){
		count = 0;
		result = active_button;
	}
	if(count <= 0) active_button = unpress;
 6b0:	20 91 7a 00 	lds	r18, 0x007A	; 0x80007a <count>
 6b4:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <count+0x1>
 6b8:	23 2b       	or	r18, r19
 6ba:	21 f4       	brne	.+8      	; 0x6c4 <get_button+0x1d2>
 6bc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <active_button+0x1>
 6c0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <active_button>
	return result;
			
}
 6c4:	08 95       	ret

000006c6 <direction>:
									
void 	direction(int but) {
	if (timer_run) {						
 6c6:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <timer_run>
 6ca:	22 23       	and	r18, r18
 6cc:	31 f0       	breq	.+12     	; 0x6da <direction+0x14>
		if (but == press_stop)timer_run = OFF;
 6ce:	01 97       	sbiw	r24, 0x01	; 1
 6d0:	09 f0       	breq	.+2      	; 0x6d4 <direction+0xe>
 6d2:	e1 c0       	rjmp	.+450    	; 0x896 <direction+0x1d0>
 6d4:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <timer_run>
 6d8:	08 95       	ret
	}
	else {
		if  (but == press_stop) {
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	91 05       	cpc	r25, r1
 6de:	09 f0       	breq	.+2      	; 0x6e2 <direction+0x1c>
 6e0:	4a c0       	rjmp	.+148    	; 0x776 <direction+0xb0>
			if(setup == editing_sec) {
 6e2:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <setup>
 6e6:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <setup+0x1>
 6ea:	22 30       	cpi	r18, 0x02	; 2
 6ec:	31 05       	cpc	r19, r1
 6ee:	a1 f4       	brne	.+40     	; 0x718 <direction+0x52>
				sek--;
 6f0:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <sek>
 6f4:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <sek+0x1>
 6f8:	21 50       	subi	r18, 0x01	; 1
 6fa:	31 09       	sbc	r19, r1
 6fc:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <sek+0x1>
 700:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <sek>
				if (sek<0) sek=59;
 704:	33 23       	and	r19, r19
 706:	0c f0       	brlt	.+2      	; 0x70a <direction+0x44>
 708:	85 c0       	rjmp	.+266    	; 0x814 <direction+0x14e>
 70a:	2b e3       	ldi	r18, 0x3B	; 59
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <sek+0x1>
 712:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <sek>
 716:	7e c0       	rjmp	.+252    	; 0x814 <direction+0x14e>
			}											
			else if(setup == editing_min){
 718:	23 30       	cpi	r18, 0x03	; 3
 71a:	31 05       	cpc	r19, r1
 71c:	a1 f4       	brne	.+40     	; 0x746 <direction+0x80>
				min--;
 71e:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <min>
 722:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <min+0x1>
 726:	21 50       	subi	r18, 0x01	; 1
 728:	31 09       	sbc	r19, r1
 72a:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <min+0x1>
 72e:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <min>
				if (min<0) min=59;
 732:	33 23       	and	r19, r19
 734:	0c f0       	brlt	.+2      	; 0x738 <direction+0x72>
 736:	6e c0       	rjmp	.+220    	; 0x814 <direction+0x14e>
 738:	2b e3       	ldi	r18, 0x3B	; 59
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <min+0x1>
 740:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <min>
 744:	67 c0       	rjmp	.+206    	; 0x814 <direction+0x14e>
			}										
			else if(setup == editing_hour){
 746:	24 30       	cpi	r18, 0x04	; 4
 748:	31 05       	cpc	r19, r1
 74a:	09 f0       	breq	.+2      	; 0x74e <direction+0x88>
 74c:	63 c0       	rjmp	.+198    	; 0x814 <direction+0x14e>
				hour--;
 74e:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <hour>
 752:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <hour+0x1>
 756:	21 50       	subi	r18, 0x01	; 1
 758:	31 09       	sbc	r19, r1
 75a:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <hour+0x1>
 75e:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <hour>
				if (hour<0)hour=24;
 762:	33 23       	and	r19, r19
 764:	0c f0       	brlt	.+2      	; 0x768 <direction+0xa2>
 766:	56 c0       	rjmp	.+172    	; 0x814 <direction+0x14e>
 768:	28 e1       	ldi	r18, 0x18	; 24
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <hour+0x1>
 770:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <hour>
 774:	4f c0       	rjmp	.+158    	; 0x814 <direction+0x14e>
			}
		}													
		else if (but == press_start){
 776:	82 30       	cpi	r24, 0x02	; 2
 778:	91 05       	cpc	r25, r1
 77a:	09 f0       	breq	.+2      	; 0x77e <direction+0xb8>
 77c:	4b c0       	rjmp	.+150    	; 0x814 <direction+0x14e>
			if (setup == ready){
 77e:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <setup>
 782:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <setup+0x1>
 786:	21 15       	cp	r18, r1
 788:	31 05       	cpc	r19, r1
 78a:	31 f4       	brne	.+12     	; 0x798 <direction+0xd2>
				timer_run = ON;
 78c:	21 e0       	ldi	r18, 0x01	; 1
 78e:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <timer_run>
				blink = ON;
 792:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
 796:	3e c0       	rjmp	.+124    	; 0x814 <direction+0x14e>
			}														
			else if (setup == editing_sec){
 798:	22 30       	cpi	r18, 0x02	; 2
 79a:	31 05       	cpc	r19, r1
 79c:	91 f4       	brne	.+36     	; 0x7c2 <direction+0xfc>
			sek++;
 79e:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <sek>
 7a2:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <sek+0x1>
 7a6:	2f 5f       	subi	r18, 0xFF	; 255
 7a8:	3f 4f       	sbci	r19, 0xFF	; 255
 7aa:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <sek+0x1>
 7ae:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <sek>
				if (sek>59)sek = 0;
 7b2:	2c 33       	cpi	r18, 0x3C	; 60
 7b4:	31 05       	cpc	r19, r1
 7b6:	74 f1       	brlt	.+92     	; 0x814 <direction+0x14e>
 7b8:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <sek+0x1>
 7bc:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <sek>
 7c0:	29 c0       	rjmp	.+82     	; 0x814 <direction+0x14e>
			}													
			else if (setup==editing_min) {
 7c2:	23 30       	cpi	r18, 0x03	; 3
 7c4:	31 05       	cpc	r19, r1
 7c6:	91 f4       	brne	.+36     	; 0x7ec <direction+0x126>
			min++;
 7c8:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <min>
 7cc:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <min+0x1>
 7d0:	2f 5f       	subi	r18, 0xFF	; 255
 7d2:	3f 4f       	sbci	r19, 0xFF	; 255
 7d4:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <min+0x1>
 7d8:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <min>
				if (min>59)min = 0;
 7dc:	2c 33       	cpi	r18, 0x3C	; 60
 7de:	31 05       	cpc	r19, r1
 7e0:	cc f0       	brlt	.+50     	; 0x814 <direction+0x14e>
 7e2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <min+0x1>
 7e6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <min>
 7ea:	14 c0       	rjmp	.+40     	; 0x814 <direction+0x14e>
			}														
			else if(setup==editing_hour) {
 7ec:	24 30       	cpi	r18, 0x04	; 4
 7ee:	31 05       	cpc	r19, r1
 7f0:	89 f4       	brne	.+34     	; 0x814 <direction+0x14e>
				hour++;
 7f2:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <hour>
 7f6:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <hour+0x1>
 7fa:	2f 5f       	subi	r18, 0xFF	; 255
 7fc:	3f 4f       	sbci	r19, 0xFF	; 255
 7fe:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <hour+0x1>
 802:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <hour>
				if (hour>24)hour = 0;
 806:	29 31       	cpi	r18, 0x19	; 25
 808:	31 05       	cpc	r19, r1
 80a:	24 f0       	brlt	.+8      	; 0x814 <direction+0x14e>
 80c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <hour+0x1>
 810:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <hour>
			}
	}															
		if (but == press_set){
 814:	03 97       	sbiw	r24, 0x03	; 3
 816:	09 f0       	breq	.+2      	; 0x81a <direction+0x154>
 818:	3e c0       	rjmp	.+124    	; 0x896 <direction+0x1d0>
			setup++;
 81a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 81e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <setup+0x1>
 822:	01 96       	adiw	r24, 0x01	; 1
 824:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <setup+0x1>
 828:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <setup>
			if (setup == read_setup){
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	91 05       	cpc	r25, r1
 830:	41 f4       	brne	.+16     	; 0x842 <direction+0x17c>
				read_m();
 832:	14 dd       	rcall	.-1496   	; 0x25c <read_m>
				setup = editing_sec;
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <setup+0x1>
 83c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <setup>
 840:	08 95       	ret
			}
			else if(setup == write_setup){
 842:	05 97       	sbiw	r24, 0x05	; 5
 844:	41 f5       	brne	.+80     	; 0x896 <direction+0x1d0>
				cli();
 846:	f8 94       	cli
				if (min > 1 || hour > 0) signal_allowed = 1;
 848:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 84c:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <min+0x1>
 850:	02 97       	sbiw	r24, 0x02	; 2
 852:	3c f4       	brge	.+14     	; 0x862 <direction+0x19c>
 854:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
 858:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour+0x1>
 85c:	18 16       	cp	r1, r24
 85e:	19 06       	cpc	r1, r25
 860:	24 f4       	brge	.+8      	; 0x86a <direction+0x1a4>
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <signal_allowed>
 868:	02 c0       	rjmp	.+4      	; 0x86e <direction+0x1a8>
				else signal_allowed = 0;
 86a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <signal_allowed>
				EEPROM_write(0x01, sek);
 86e:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <sek>
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	90 e0       	ldi	r25, 0x00	; 0
 876:	dd dc       	rcall	.-1606   	; 0x232 <EEPROM_write>
				EEPROM_write(0x02, min);
 878:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <min>
 87c:	82 e0       	ldi	r24, 0x02	; 2
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	d8 dc       	rcall	.-1616   	; 0x232 <EEPROM_write>
				EEPROM_write(0x03, hour);
 882:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <hour>
 886:	83 e0       	ldi	r24, 0x03	; 3
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	d3 dc       	rcall	.-1626   	; 0x232 <EEPROM_write>
				setup = ready;
 88c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <setup+0x1>
 890:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <setup>
				sei();
 894:	78 94       	sei
 896:	08 95       	ret

00000898 <main>:




	int main (void){
		port_ini ();
 898:	19 dd       	rcall	.-1486   	; 0x2cc <port_ini>
		timer_init ();
 89a:	0d dd       	rcall	.-1510   	; 0x2b6 <timer_init>
		read_m ();
 89c:	df dc       	rcall	.-1602   	; 0x25c <read_m>
		sei();
 89e:	78 94       	sei
																		
	while (1)
	{												
		get_digits_numbers();
 8a0:	60 dc       	rcall	.-1856   	; 0x162 <get_digits_numbers>
		SPI();
 8a2:	de db       	rcall	.-2116   	; 0x60 <SPI>
		direction(get_button());
 8a4:	26 de       	rcall	.-948    	; 0x4f2 <get_button>
 8a6:	0f df       	rcall	.-482    	; 0x6c6 <direction>
		if (signale == ON) {
 8a8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <signale>
 8ac:	88 23       	and	r24, r24
 8ae:	c1 f3       	breq	.-16     	; 0x8a0 <main+0x8>
			if (min==0 && hour==0 && sek<6){
 8b0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 8b4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <min+0x1>
 8b8:	89 2b       	or	r24, r25
 8ba:	91 f7       	brne	.-28     	; 0x8a0 <main+0x8>
 8bc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <hour>
 8c0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour+0x1>
 8c4:	89 2b       	or	r24, r25
 8c6:	61 f7       	brne	.-40     	; 0x8a0 <main+0x8>
 8c8:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <sek>
 8cc:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sek+0x1>
 8d0:	06 97       	sbiw	r24, 0x06	; 6
 8d2:	34 f7       	brge	.-52     	; 0x8a0 <main+0x8>
				signale = OFF;
 8d4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <signale>
 8d8:	e3 cf       	rjmp	.-58     	; 0x8a0 <main+0x8>

000008da <__divmodhi4>:
 8da:	97 fb       	bst	r25, 7
 8dc:	07 2e       	mov	r0, r23
 8de:	16 f4       	brtc	.+4      	; 0x8e4 <__divmodhi4+0xa>
 8e0:	00 94       	com	r0
 8e2:	06 d0       	rcall	.+12     	; 0x8f0 <__divmodhi4_neg1>
 8e4:	77 fd       	sbrc	r23, 7
 8e6:	08 d0       	rcall	.+16     	; 0x8f8 <__divmodhi4_neg2>
 8e8:	0b d0       	rcall	.+22     	; 0x900 <__udivmodhi4>
 8ea:	07 fc       	sbrc	r0, 7
 8ec:	05 d0       	rcall	.+10     	; 0x8f8 <__divmodhi4_neg2>
 8ee:	3e f4       	brtc	.+14     	; 0x8fe <__divmodhi4_exit>

000008f0 <__divmodhi4_neg1>:
 8f0:	90 95       	com	r25
 8f2:	81 95       	neg	r24
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	08 95       	ret

000008f8 <__divmodhi4_neg2>:
 8f8:	70 95       	com	r23
 8fa:	61 95       	neg	r22
 8fc:	7f 4f       	sbci	r23, 0xFF	; 255

000008fe <__divmodhi4_exit>:
 8fe:	08 95       	ret

00000900 <__udivmodhi4>:
 900:	aa 1b       	sub	r26, r26
 902:	bb 1b       	sub	r27, r27
 904:	51 e1       	ldi	r21, 0x11	; 17
 906:	07 c0       	rjmp	.+14     	; 0x916 <__udivmodhi4_ep>

00000908 <__udivmodhi4_loop>:
 908:	aa 1f       	adc	r26, r26
 90a:	bb 1f       	adc	r27, r27
 90c:	a6 17       	cp	r26, r22
 90e:	b7 07       	cpc	r27, r23
 910:	10 f0       	brcs	.+4      	; 0x916 <__udivmodhi4_ep>
 912:	a6 1b       	sub	r26, r22
 914:	b7 0b       	sbc	r27, r23

00000916 <__udivmodhi4_ep>:
 916:	88 1f       	adc	r24, r24
 918:	99 1f       	adc	r25, r25
 91a:	5a 95       	dec	r21
 91c:	a9 f7       	brne	.-22     	; 0x908 <__udivmodhi4_loop>
 91e:	80 95       	com	r24
 920:	90 95       	com	r25
 922:	bc 01       	movw	r22, r24
 924:	cd 01       	movw	r24, r26
 926:	08 95       	ret

00000928 <_exit>:
 928:	f8 94       	cli

0000092a <__stop_program>:
 92a:	ff cf       	rjmp	.-2      	; 0x92a <__stop_program>
