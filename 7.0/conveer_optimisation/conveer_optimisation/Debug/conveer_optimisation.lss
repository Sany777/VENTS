
conveer_optimisation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800068  00800068  0000083c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a90  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000662  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a8c  00000000  00000000  00001a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  000024a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b4  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004be  00000000  00000000  00002ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002f6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	f4 c1       	rjmp	.+1000   	; 0x3f6 <__vector_6>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	3d c0       	rjmp	.+122    	; 0xa2 <getCharSegment+0x30>
  28:	2c c0       	rjmp	.+88     	; 0x82 <getCharSegment+0x10>
  2a:	3f c0       	rjmp	.+126    	; 0xaa <getCharSegment+0x38>
  2c:	2c c0       	rjmp	.+88     	; 0x86 <getCharSegment+0x14>
  2e:	2d c0       	rjmp	.+90     	; 0x8a <getCharSegment+0x18>
  30:	2e c0       	rjmp	.+92     	; 0x8e <getCharSegment+0x1c>
  32:	2f c0       	rjmp	.+94     	; 0x92 <getCharSegment+0x20>
  34:	30 c0       	rjmp	.+96     	; 0x96 <getCharSegment+0x24>
  36:	31 c0       	rjmp	.+98     	; 0x9a <getCharSegment+0x28>
  38:	32 c0       	rjmp	.+100    	; 0x9e <getCharSegment+0x2c>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	e0 ea       	ldi	r30, 0xA0	; 160
  4e:	f7 e0       	ldi	r31, 0x07	; 7
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	a8 36       	cpi	r26, 0x68	; 104
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	a8 e6       	ldi	r26, 0x68	; 104
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a5 37       	cpi	r26, 0x75	; 117
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	78 d3       	rcall	.+1776   	; 0x75e <main>
  6e:	96 c3       	rjmp	.+1836   	; 0x79c <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <getCharSegment>:



uint8_t getCharSegment(uint8_t n)
{
	switch(n)
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	8a 30       	cpi	r24, 0x0A	; 10
  76:	91 05       	cpc	r25, r1
  78:	b0 f4       	brcc	.+44     	; 0xa6 <getCharSegment+0x34>
  7a:	fc 01       	movw	r30, r24
  7c:	ed 5e       	subi	r30, 0xED	; 237
  7e:	ff 4f       	sbci	r31, 0xFF	; 255
  80:	09 94       	ijmp
	{
		case 1:  return  0b00000110; break;
  82:	86 e0       	ldi	r24, 0x06	; 6
  84:	08 95       	ret
		case 2:  return  0b01011011;  break;
		case 3:  return  0b01001111;  break;
  86:	8f e4       	ldi	r24, 0x4F	; 79
  88:	08 95       	ret
		case 4:  return  0b01100110;  break;
  8a:	86 e6       	ldi	r24, 0x66	; 102
  8c:	08 95       	ret
		case 5:  return  0b01101101;  break;
  8e:	8d e6       	ldi	r24, 0x6D	; 109
  90:	08 95       	ret
		case 6:  return  0b01111101;  break;
  92:	8d e7       	ldi	r24, 0x7D	; 125
  94:	08 95       	ret
		case 7:  return  0b00000111;  break;
  96:	87 e0       	ldi	r24, 0x07	; 7
  98:	08 95       	ret
		case 8:  return  0b01111111;  break;
  9a:	8f e7       	ldi	r24, 0x7F	; 127
  9c:	08 95       	ret
		case 9:  return  0b01101111;  break;
  9e:	8f e6       	ldi	r24, 0x6F	; 111
  a0:	08 95       	ret
		case 0:  return  0b00111111;  break;
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	08 95       	ret
		default: return  0;           break;
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	08 95       	ret
uint8_t getCharSegment(uint8_t n)
{
	switch(n)
	{
		case 1:  return  0b00000110; break;
		case 2:  return  0b01011011;  break;
  aa:	8b e5       	ldi	r24, 0x5B	; 91
		case 8:  return  0b01111111;  break;
		case 9:  return  0b01101111;  break;
		case 0:  return  0b00111111;  break;
		default: return  0;           break;
	}
}
  ac:	08 95       	ret

000000ae <send_to_SPI>:

void send_to_SPI (uint8_t *numbers) 
{
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	ec 01       	movw	r28, r24
	cli ();
  b6:	f8 94       	cli
	for (uint8_t digit = 0,byte = 0; digit<DIGITS_MAX; digit++) 
  b8:	10 e0       	ldi	r17, 0x00	; 0
  ba:	60 c0       	rjmp	.+192    	; 0x17c <send_to_SPI+0xce>
	{
		if (voltage_f) 
  bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c0:	88 23       	and	r24, r24
  c2:	c9 f1       	breq	.+114    	; 0x136 <send_to_SPI+0x88>
		{
			byte = getCharSegment(numbers[digit]);
  c4:	fe 01       	movw	r30, r28
  c6:	e1 0f       	add	r30, r17
  c8:	f1 1d       	adc	r31, r1
  ca:	80 81       	ld	r24, Z
  cc:	d2 df       	rcall	.-92     	; 0x72 <getCharSegment>
			// ---------------------------------- control load
			switch(digit)
  ce:	11 30       	cpi	r17, 0x01	; 1
  d0:	c1 f0       	breq	.+48     	; 0x102 <send_to_SPI+0x54>
  d2:	28 f0       	brcs	.+10     	; 0xde <send_to_SPI+0x30>
  d4:	14 30       	cpi	r17, 0x04	; 4
  d6:	49 f1       	breq	.+82     	; 0x12a <send_to_SPI+0x7c>
  d8:	15 30       	cpi	r17, 0x05	; 5
  da:	09 f1       	breq	.+66     	; 0x11e <send_to_SPI+0x70>
  dc:	39 c0       	rjmp	.+114    	; 0x150 <send_to_SPI+0xa2>
			{
				case BLINK_FIRST_POINTS  : if(timer_run == OFF || blink && (min || hour)) active_Load; break;	
  de:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <timer_run>
  e2:	99 23       	and	r25, r25
  e4:	61 f0       	breq	.+24     	; 0xfe <send_to_SPI+0x50>
  e6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <blink>
  ea:	99 23       	and	r25, r25
  ec:	89 f1       	breq	.+98     	; 0x150 <send_to_SPI+0xa2>
  ee:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <min>
  f2:	91 11       	cpse	r25, r1
  f4:	04 c0       	rjmp	.+8      	; 0xfe <send_to_SPI+0x50>
  f6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour>
  fa:	99 23       	and	r25, r25
  fc:	49 f1       	breq	.+82     	; 0x150 <send_to_SPI+0xa2>
  fe:	80 68       	ori	r24, 0x80	; 128
 100:	27 c0       	rjmp	.+78     	; 0x150 <send_to_SPI+0xa2>
				case BLINK_SECOND_POINTS : if(timer_run == OFF || blink && hour) active_Load; break;
 102:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <timer_run>
 106:	99 23       	and	r25, r25
 108:	41 f0       	breq	.+16     	; 0x11a <send_to_SPI+0x6c>
 10a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <blink>
 10e:	99 23       	and	r25, r25
 110:	f9 f0       	breq	.+62     	; 0x150 <send_to_SPI+0xa2>
 112:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour>
 116:	99 23       	and	r25, r25
 118:	d9 f0       	breq	.+54     	; 0x150 <send_to_SPI+0xa2>
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	19 c0       	rjmp	.+50     	; 0x150 <send_to_SPI+0xa2>
				case CONVEER			 : if(conveer == ON) active_Load; break;
 11e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <conveer>
 122:	99 23       	and	r25, r25
 124:	a9 f0       	breq	.+42     	; 0x150 <send_to_SPI+0xa2>
 126:	80 68       	ori	r24, 0x80	; 128
 128:	13 c0       	rjmp	.+38     	; 0x150 <send_to_SPI+0xa2>
				case SIGNAL				 : if(signale == ON) active_Load; break;
 12a:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <signale>
 12e:	99 23       	and	r25, r25
 130:	79 f0       	breq	.+30     	; 0x150 <send_to_SPI+0xa2>
 132:	80 68       	ori	r24, 0x80	; 128
 134:	0d c0       	rjmp	.+26     	; 0x150 <send_to_SPI+0xa2>
			}
		}
		else 
		{
		// ---------------------------------- show "OFF"
			 if (digit == 3)      
 136:	13 30       	cpi	r17, 0x03	; 3
 138:	31 f0       	breq	.+12     	; 0x146 <send_to_SPI+0x98>
					byte = 0X3F;          
			 else if (digit == 2) 
 13a:	12 30       	cpi	r17, 0x02	; 2
 13c:	31 f0       	breq	.+12     	; 0x14a <send_to_SPI+0x9c>
					byte = 0X71;
			 else if (digit == 1) 
 13e:	11 30       	cpi	r17, 0x01	; 1
 140:	31 f4       	brne	.+12     	; 0x14e <send_to_SPI+0xa0>
					byte = 0X71;
 142:	81 e7       	ldi	r24, 0x71	; 113
 144:	05 c0       	rjmp	.+10     	; 0x150 <send_to_SPI+0xa2>
		}
		else 
		{
		// ---------------------------------- show "OFF"
			 if (digit == 3)      
					byte = 0X3F;          
 146:	8f e3       	ldi	r24, 0x3F	; 63
 148:	03 c0       	rjmp	.+6      	; 0x150 <send_to_SPI+0xa2>
			 else if (digit == 2) 
					byte = 0X71;
 14a:	81 e7       	ldi	r24, 0x71	; 113
 14c:	01 c0       	rjmp	.+2      	; 0x150 <send_to_SPI+0xa2>
			 else if (digit == 1) 
					byte = 0X71;
			 else  
					byte = 0;
 14e:	80 e0       	ldi	r24, 0x00	; 0
			 if (digit == 3)      
					byte = 0X3F;          
			 else if (digit == 2) 
					byte = 0X71;
			 else if (digit == 1) 
					byte = 0X71;
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	11 c0       	rjmp	.+34     	; 0x176 <send_to_SPI+0xc8>
					byte = 0;
		}
		//---------------------------------- send to SPI
		for (uint8_t i=0; i<SIZE_BYTE; i++)
		{
			if (byte&0x80) 
 154:	88 23       	and	r24, r24
 156:	24 f4       	brge	.+8      	; 0x160 <send_to_SPI+0xb2>
				send_1;
 158:	92 b3       	in	r25, 0x12	; 18
 15a:	90 64       	ori	r25, 0x40	; 64
 15c:	92 bb       	out	0x12, r25	; 18
 15e:	03 c0       	rjmp	.+6      	; 0x166 <send_to_SPI+0xb8>
			else 
				send_0;
 160:	92 b3       	in	r25, 0x12	; 18
 162:	9f 7b       	andi	r25, 0xBF	; 191
 164:	92 bb       	out	0x12, r25	; 18
			byte = (byte<<1);
 166:	88 0f       	add	r24, r24
			send_CLK;
 168:	98 b3       	in	r25, 0x18	; 24
 16a:	91 60       	ori	r25, 0x01	; 1
 16c:	98 bb       	out	0x18, r25	; 24
 16e:	98 b3       	in	r25, 0x18	; 24
 170:	9e 7f       	andi	r25, 0xFE	; 254
 172:	98 bb       	out	0x18, r25	; 24
					byte = 0X71;
			 else  
					byte = 0;
		}
		//---------------------------------- send to SPI
		for (uint8_t i=0; i<SIZE_BYTE; i++)
 174:	2f 5f       	subi	r18, 0xFF	; 255
 176:	28 30       	cpi	r18, 0x08	; 8
 178:	68 f3       	brcs	.-38     	; 0x154 <send_to_SPI+0xa6>
}

void send_to_SPI (uint8_t *numbers) 
{
	cli ();
	for (uint8_t digit = 0,byte = 0; digit<DIGITS_MAX; digit++) 
 17a:	1f 5f       	subi	r17, 0xFF	; 255
 17c:	16 30       	cpi	r17, 0x06	; 6
 17e:	08 f4       	brcc	.+2      	; 0x182 <send_to_SPI+0xd4>
 180:	9d cf       	rjmp	.-198    	; 0xbc <send_to_SPI+0xe>
				send_0;
			byte = (byte<<1);
			send_CLK;
		}
	}
	end_Transmision_Spi;
 182:	82 b3       	in	r24, 0x12	; 18
 184:	80 68       	ori	r24, 0x80	; 128
 186:	82 bb       	out	0x12, r24	; 18
 188:	82 b3       	in	r24, 0x12	; 18
 18a:	8f 77       	andi	r24, 0x7F	; 127
 18c:	82 bb       	out	0x12, r24	; 18
	sei();
 18e:	78 94       	sei
}
 190:	df 91       	pop	r29
 192:	cf 91       	pop	r28
 194:	1f 91       	pop	r17
 196:	08 95       	ret

00000198 <set_digits_numbers>:
	


void set_digits_numbers(uint8_t *numbers)
{
 198:	fc 01       	movw	r30, r24
	numbers[0]= setup == EDITING_SEC  && blink ? None : sec%10;
 19a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <setup>
 19e:	82 30       	cpi	r24, 0x02	; 2
 1a0:	21 f4       	brne	.+8      	; 0x1aa <set_digits_numbers+0x12>
 1a2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <blink>
 1a6:	81 11       	cpse	r24, r1
 1a8:	11 c0       	rjmp	.+34     	; 0x1cc <set_digits_numbers+0x34>
 1aa:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <sec>
 1ae:	9d ec       	ldi	r25, 0xCD	; 205
 1b0:	29 9f       	mul	r18, r25
 1b2:	91 2d       	mov	r25, r1
 1b4:	11 24       	eor	r1, r1
 1b6:	96 95       	lsr	r25
 1b8:	96 95       	lsr	r25
 1ba:	96 95       	lsr	r25
 1bc:	99 0f       	add	r25, r25
 1be:	89 2f       	mov	r24, r25
 1c0:	88 0f       	add	r24, r24
 1c2:	88 0f       	add	r24, r24
 1c4:	98 0f       	add	r25, r24
 1c6:	29 1b       	sub	r18, r25
 1c8:	92 2f       	mov	r25, r18
 1ca:	01 c0       	rjmp	.+2      	; 0x1ce <set_digits_numbers+0x36>
 1cc:	9b e0       	ldi	r25, 0x0B	; 11
 1ce:	90 83       	st	Z, r25
	numbers[1]= setup == EDITING_SEC  && blink ? None : sec/10;
 1d0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <setup>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	21 f4       	brne	.+8      	; 0x1e0 <set_digits_numbers+0x48>
 1d8:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <blink>
 1dc:	91 11       	cpse	r25, r1
 1de:	0a c0       	rjmp	.+20     	; 0x1f4 <set_digits_numbers+0x5c>
 1e0:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <sec>
 1e4:	2d ec       	ldi	r18, 0xCD	; 205
 1e6:	92 9f       	mul	r25, r18
 1e8:	91 2d       	mov	r25, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	96 95       	lsr	r25
 1ee:	96 95       	lsr	r25
 1f0:	96 95       	lsr	r25
 1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <set_digits_numbers+0x5e>
 1f4:	9b e0       	ldi	r25, 0x0B	; 11
 1f6:	91 83       	std	Z+1, r25	; 0x01
	numbers[2]= setup == EDITING_MIN  && blink ? None : min%10;
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	21 f4       	brne	.+8      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 1fc:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <blink>
 200:	91 11       	cpse	r25, r1
 202:	11 c0       	rjmp	.+34     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 204:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <min>
 208:	9d ec       	ldi	r25, 0xCD	; 205
 20a:	39 9f       	mul	r19, r25
 20c:	91 2d       	mov	r25, r1
 20e:	11 24       	eor	r1, r1
 210:	96 95       	lsr	r25
 212:	96 95       	lsr	r25
 214:	96 95       	lsr	r25
 216:	99 0f       	add	r25, r25
 218:	29 2f       	mov	r18, r25
 21a:	22 0f       	add	r18, r18
 21c:	22 0f       	add	r18, r18
 21e:	92 0f       	add	r25, r18
 220:	39 1b       	sub	r19, r25
 222:	93 2f       	mov	r25, r19
 224:	01 c0       	rjmp	.+2      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 226:	9b e0       	ldi	r25, 0x0B	; 11
 228:	92 83       	std	Z+2, r25	; 0x02
	numbers[3]= setup == EDITING_MIN  && blink ? None : min/10;
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	21 f4       	brne	.+8      	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 22e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <blink>
 232:	91 11       	cpse	r25, r1
 234:	0a c0       	rjmp	.+20     	; 0x24a <__EEPROM_REGION_LENGTH__+0x4a>
 236:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <min>
 23a:	2d ec       	ldi	r18, 0xCD	; 205
 23c:	92 9f       	mul	r25, r18
 23e:	91 2d       	mov	r25, r1
 240:	11 24       	eor	r1, r1
 242:	96 95       	lsr	r25
 244:	96 95       	lsr	r25
 246:	96 95       	lsr	r25
 248:	01 c0       	rjmp	.+2      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 24a:	9b e0       	ldi	r25, 0x0B	; 11
 24c:	93 83       	std	Z+3, r25	; 0x03
	numbers[4]= setup == EDITING_HOUR && blink ? None : hour%10;
 24e:	84 30       	cpi	r24, 0x04	; 4
 250:	21 f4       	brne	.+8      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 252:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <blink>
 256:	91 11       	cpse	r25, r1
 258:	11 c0       	rjmp	.+34     	; 0x27c <__EEPROM_REGION_LENGTH__+0x7c>
 25a:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <hour>
 25e:	9d ec       	ldi	r25, 0xCD	; 205
 260:	39 9f       	mul	r19, r25
 262:	91 2d       	mov	r25, r1
 264:	11 24       	eor	r1, r1
 266:	96 95       	lsr	r25
 268:	96 95       	lsr	r25
 26a:	96 95       	lsr	r25
 26c:	99 0f       	add	r25, r25
 26e:	29 2f       	mov	r18, r25
 270:	22 0f       	add	r18, r18
 272:	22 0f       	add	r18, r18
 274:	92 0f       	add	r25, r18
 276:	39 1b       	sub	r19, r25
 278:	93 2f       	mov	r25, r19
 27a:	01 c0       	rjmp	.+2      	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
 27c:	9b e0       	ldi	r25, 0x0B	; 11
 27e:	94 83       	std	Z+4, r25	; 0x04
	numbers[5]= setup == EDITING_HOUR && blink ? None : hour/10;
 280:	84 30       	cpi	r24, 0x04	; 4
 282:	21 f4       	brne	.+8      	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
 284:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <blink>
 288:	81 11       	cpse	r24, r1
 28a:	0a c0       	rjmp	.+20     	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
 28c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <hour>
 290:	9d ec       	ldi	r25, 0xCD	; 205
 292:	89 9f       	mul	r24, r25
 294:	81 2d       	mov	r24, r1
 296:	11 24       	eor	r1, r1
 298:	86 95       	lsr	r24
 29a:	86 95       	lsr	r24
 29c:	86 95       	lsr	r24
 29e:	01 c0       	rjmp	.+2      	; 0x2a2 <__EEPROM_REGION_LENGTH__+0xa2>
 2a0:	8b e0       	ldi	r24, 0x0B	; 11
 2a2:	85 83       	std	Z+5, r24	; 0x05
	
	if (timer_run)
 2a4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_run>
 2a8:	81 11       	cpse	r24, r1
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__EEPROM_REGION_LENGTH__+0xb6>
 2ac:	08 95       	ret
	{
		for (int8_t digit=5; digit && numbers[digit]; digit--)
		{
			numbers[digit] = None;     
 2ae:	8b e0       	ldi	r24, 0x0B	; 11
 2b0:	8c 93       	st	X, r24
	numbers[4]= setup == EDITING_HOUR && blink ? None : hour%10;
	numbers[5]= setup == EDITING_HOUR && blink ? None : hour/10;
	
	if (timer_run)
	{
		for (int8_t digit=5; digit && numbers[digit]; digit--)
 2b2:	91 50       	subi	r25, 0x01	; 1
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
 2b6:	95 e0       	ldi	r25, 0x05	; 5
 2b8:	99 23       	and	r25, r25
 2ba:	41 f0       	breq	.+16     	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
 2bc:	df 01       	movw	r26, r30
 2be:	a9 0f       	add	r26, r25
 2c0:	b1 1d       	adc	r27, r1
 2c2:	97 fd       	sbrc	r25, 7
 2c4:	ba 95       	dec	r27
 2c6:	8c 91       	ld	r24, X
 2c8:	81 11       	cpse	r24, r1
 2ca:	f1 cf       	rjmp	.-30     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
 2cc:	08 95       	ret

000002ce <EEPROM_WRITE>:
}


void EEPROM_WRITE (uint16_t uiAddress, uint8_t ucData)
{
	while (EECR&(1<<EEWE));
 2ce:	e1 99       	sbic	0x1c, 1	; 28
 2d0:	fe cf       	rjmp	.-4      	; 0x2ce <EEPROM_WRITE>
	EEAR = uiAddress;
 2d2:	9f bb       	out	0x1f, r25	; 31
 2d4:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 2d6:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE);
 2d8:	8c b3       	in	r24, 0x1c	; 28
 2da:	84 60       	ori	r24, 0x04	; 4
 2dc:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE);
 2de:	8c b3       	in	r24, 0x1c	; 28
 2e0:	82 60       	ori	r24, 0x02	; 2
 2e2:	8c bb       	out	0x1c, r24	; 28
 2e4:	08 95       	ret

000002e6 <EEPROM_read>:
}


uint8_t EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEWE));
 2e6:	e1 99       	sbic	0x1c, 1	; 28
 2e8:	fe cf       	rjmp	.-4      	; 0x2e6 <EEPROM_read>
	EEAR = uiAddress;
 2ea:	9f bb       	out	0x1f, r25	; 31
 2ec:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 2ee:	8c b3       	in	r24, 0x1c	; 28
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 2f4:	8d b3       	in	r24, 0x1d	; 29
}
 2f6:	08 95       	ret

000002f8 <read_m>:

void read_m (void)
{
	sec  = EEPROM_read(ADDR_SEC);
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	f4 df       	rcall	.-24     	; 0x2e6 <EEPROM_read>
 2fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec>
	min  = EEPROM_read(ADDR_MIN);
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	ef df       	rcall	.-34     	; 0x2e6 <EEPROM_read>
 308:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <min>
	hour = EEPROM_read(ADDR_HOUR);
 30c:	83 e0       	ldi	r24, 0x03	; 3
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	ea df       	rcall	.-44     	; 0x2e6 <EEPROM_read>
 312:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <hour>
	if(sec > MAX_MIN_SEC)sec = 0;
 316:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <sec>
 31a:	9c 33       	cpi	r25, 0x3C	; 60
 31c:	10 f0       	brcs	.+4      	; 0x322 <read_m+0x2a>
 31e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <sec>
	if(min > MAX_MIN_SEC)min = 25;
 322:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <min>
 326:	9c 33       	cpi	r25, 0x3C	; 60
 328:	18 f0       	brcs	.+6      	; 0x330 <read_m+0x38>
 32a:	99 e1       	ldi	r25, 0x19	; 25
 32c:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <min>
	if(hour > MAX_MIN_SEC)hour = 0;
 330:	8c 33       	cpi	r24, 0x3C	; 60
 332:	10 f0       	brcs	.+4      	; 0x338 <read_m+0x40>
 334:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <hour>
	if (min || hour) signal_allowed = TRUE;
 338:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 33c:	81 11       	cpse	r24, r1
 33e:	04 c0       	rjmp	.+8      	; 0x348 <read_m+0x50>
 340:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <hour>
 344:	88 23       	and	r24, r24
 346:	21 f0       	breq	.+8      	; 0x350 <read_m+0x58>
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <signal_allowed>
 34e:	08 95       	ret
	else signal_allowed = FALSE;
 350:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <signal_allowed>
 354:	08 95       	ret

00000356 <timer_init>:
}


void timer_init (uint16_t delay)
{
	TCCR1B |= (1<<WGM12)      // CTC mode
 356:	8e b5       	in	r24, 0x2e	; 46
 358:	8d 60       	ori	r24, 0x0D	; 13
 35a:	8e bd       	out	0x2e, r24	; 46
	| (1<<CS12) | (1<<CS10); // /1024
	OCR1AH = delay>>SIZE_BYTE;
 35c:	9b bd       	out	0x2b, r25	; 43
	OCR1AL = delay<<SIZE_BYTE;
 35e:	1a bc       	out	0x2a, r1	; 42
	TIMSK = (1<<TOIE1)       // Timer 1 enable
 360:	84 e1       	ldi	r24, 0x14	; 20
 362:	89 bf       	out	0x39, r24	; 57
 364:	08 95       	ret

00000366 <port_ini>:

void port_ini (void)
{
		
	//---------------------- program SPI : 0-6 bit - show number, 7bit - control load
	DDRD|=(1<<6);     //DS
 366:	81 b3       	in	r24, 0x11	; 17
 368:	80 64       	ori	r24, 0x40	; 64
 36a:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<6);   // set 0
 36c:	82 b3       	in	r24, 0x12	; 18
 36e:	8f 7b       	andi	r24, 0xBF	; 191
 370:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<0);     //clk
 372:	87 b3       	in	r24, 0x17	; 23
 374:	81 60       	ori	r24, 0x01	; 1
 376:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<0);   // 
 378:	88 b3       	in	r24, 0x18	; 24
 37a:	8e 7f       	andi	r24, 0xFE	; 254
 37c:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<7);     // ST 
 37e:	81 b3       	in	r24, 0x11	; 17
 380:	80 68       	ori	r24, 0x80	; 128
 382:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<7);   // 
 384:	82 b3       	in	r24, 0x12	; 18
 386:	8f 77       	andi	r24, 0x7F	; 127
 388:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<1);     //MR 
 38a:	87 b3       	in	r24, 0x17	; 23
 38c:	82 60       	ori	r24, 0x02	; 2
 38e:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<1);    // +
 390:	88 b3       	in	r24, 0x18	; 24
 392:	82 60       	ori	r24, 0x02	; 2
 394:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<5);     //OE
 396:	81 b3       	in	r24, 0x11	; 17
 398:	80 62       	ori	r24, 0x20	; 32
 39a:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<5);   // OE enable
 39c:	82 b3       	in	r24, 0x12	; 18
 39e:	8f 7d       	andi	r24, 0xDF	; 223
 3a0:	82 bb       	out	0x12, r24	; 18
	
	//----------------------------- port input

	DDRC&=~(1<<2); //button SET
 3a2:	84 b3       	in	r24, 0x14	; 20
 3a4:	8b 7f       	andi	r24, 0xFB	; 251
 3a6:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<3); //button  start
 3a8:	84 b3       	in	r24, 0x14	; 20
 3aa:	87 7f       	andi	r24, 0xF7	; 247
 3ac:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<4); //button pause
 3ae:	84 b3       	in	r24, 0x14	; 20
 3b0:	8f 7e       	andi	r24, 0xEF	; 239
 3b2:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<5); //voltage
 3b4:	84 b3       	in	r24, 0x14	; 20
 3b6:	8f 7d       	andi	r24, 0xDF	; 223
 3b8:	84 bb       	out	0x14, r24	; 20
		
	//--------------------------- pin pull up
	PORTC|=(1<<2);
 3ba:	85 b3       	in	r24, 0x15	; 21
 3bc:	84 60       	ori	r24, 0x04	; 4
 3be:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<3);
 3c0:	85 b3       	in	r24, 0x15	; 21
 3c2:	88 60       	ori	r24, 0x08	; 8
 3c4:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<4);
 3c6:	85 b3       	in	r24, 0x15	; 21
 3c8:	80 61       	ori	r24, 0x10	; 16
 3ca:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<5);
 3cc:	85 b3       	in	r24, 0x15	; 21
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	85 bb       	out	0x15, r24	; 21
		
	//-------------------------- clear registers
	for (uint8_t i=0; i<SIZE_BYTE*DIGITS_MAX; i++) 
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	07 c0       	rjmp	.+14     	; 0x3e4 <port_ini+0x7e>
	{
		send_CLK;
 3d6:	88 b3       	in	r24, 0x18	; 24
 3d8:	81 60       	ori	r24, 0x01	; 1
 3da:	88 bb       	out	0x18, r24	; 24
 3dc:	88 b3       	in	r24, 0x18	; 24
 3de:	8e 7f       	andi	r24, 0xFE	; 254
 3e0:	88 bb       	out	0x18, r24	; 24
	PORTC|=(1<<3);
	PORTC|=(1<<4);
	PORTC|=(1<<5);
		
	//-------------------------- clear registers
	for (uint8_t i=0; i<SIZE_BYTE*DIGITS_MAX; i++) 
 3e2:	9f 5f       	subi	r25, 0xFF	; 255
 3e4:	90 33       	cpi	r25, 0x30	; 48
 3e6:	b8 f3       	brcs	.-18     	; 0x3d6 <port_ini+0x70>
	{
		send_CLK;
	}
	end_Transmision_Spi;
 3e8:	82 b3       	in	r24, 0x12	; 18
 3ea:	80 68       	ori	r24, 0x80	; 128
 3ec:	82 bb       	out	0x12, r24	; 18
 3ee:	82 b3       	in	r24, 0x12	; 18
 3f0:	8f 77       	andi	r24, 0x7F	; 127
 3f2:	82 bb       	out	0x12, r24	; 18
 3f4:	08 95       	ret

000003f6 <__vector_6>:
}



ISR (TIMER1_COMPA_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	2f 93       	push	r18
 402:	3f 93       	push	r19
 404:	4f 93       	push	r20
 406:	5f 93       	push	r21
 408:	6f 93       	push	r22
 40a:	7f 93       	push	r23
 40c:	8f 93       	push	r24
 40e:	9f 93       	push	r25
 410:	af 93       	push	r26
 412:	bf 93       	push	r27
 414:	ef 93       	push	r30
 416:	ff 93       	push	r31
	static uint8_t timing=0;
	if (voltage_f)
 418:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 41c:	88 23       	and	r24, r24
 41e:	09 f4       	brne	.+2      	; 0x422 <__DATA_REGION_LENGTH__+0x22>
 420:	5e c0       	rjmp	.+188    	; 0x4de <__stack+0x7f>
	{
		blink = !blink;
 422:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <blink>
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	89 27       	eor	r24, r25
 42a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <blink>
		if (timer_run)
 42e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <timer_run>
 432:	88 23       	and	r24, r24
 434:	09 f4       	brne	.+2      	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 436:	58 c0       	rjmp	.+176    	; 0x4e8 <__stack+0x89>
		{
			if (min==0 && hour==0 && sec == SIGNAL_TO_LOAD_ON && signal_allowed && signale == OFF) signale = ON;
 438:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 43c:	81 11       	cpse	r24, r1
 43e:	14 c0       	rjmp	.+40     	; 0x468 <__stack+0x9>
 440:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour>
 444:	91 11       	cpse	r25, r1
 446:	10 c0       	rjmp	.+32     	; 0x468 <__stack+0x9>
 448:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <sec>
 44c:	9a 30       	cpi	r25, 0x0A	; 10
 44e:	61 f4       	brne	.+24     	; 0x468 <__stack+0x9>
 450:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <signal_allowed>
 454:	99 23       	and	r25, r25
 456:	41 f0       	breq	.+16     	; 0x468 <__stack+0x9>
 458:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <signale>
 45c:	91 11       	cpse	r25, r1
 45e:	04 c0       	rjmp	.+8      	; 0x468 <__stack+0x9>
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <signale>
 466:	0c c0       	rjmp	.+24     	; 0x480 <__stack+0x21>
			else if (min==0 && hour==0 && sec<6) signale = OFF;
 468:	81 11       	cpse	r24, r1
 46a:	0a c0       	rjmp	.+20     	; 0x480 <__stack+0x21>
 46c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour>
 470:	91 11       	cpse	r25, r1
 472:	06 c0       	rjmp	.+12     	; 0x480 <__stack+0x21>
 474:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <sec>
 478:	96 30       	cpi	r25, 0x06	; 6
 47a:	10 f4       	brcc	.+4      	; 0x480 <__stack+0x21>
 47c:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <signale>
			if (min == 0 && hour == 0 && sec == 0)
 480:	81 11       	cpse	r24, r1
 482:	23 c0       	rjmp	.+70     	; 0x4ca <__stack+0x6b>
 484:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <hour>
 488:	81 11       	cpse	r24, r1
 48a:	1f c0       	rjmp	.+62     	; 0x4ca <__stack+0x6b>
 48c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec>
 490:	81 11       	cpse	r24, r1
 492:	1b c0       	rjmp	.+54     	; 0x4ca <__stack+0x6b>
			{
				if (timing == 0)
 494:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <timing.1894>
 498:	81 11       	cpse	r24, r1
 49a:	04 c0       	rjmp	.+8      	; 0x4a4 <__stack+0x45>
				{
					conveer = ON;
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <conveer>
 4a2:	0d c0       	rjmp	.+26     	; 0x4be <__stack+0x5f>
				}
				else if(timing == 2)
 4a4:	82 30       	cpi	r24, 0x02	; 2
 4a6:	19 f4       	brne	.+6      	; 0x4ae <__stack+0x4f>
				{
					conveer = OFF;
 4a8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <conveer>
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <__stack+0x5f>
				}
				else if (timing > 44)
 4ae:	8d 32       	cpi	r24, 0x2D	; 45
 4b0:	30 f0       	brcs	.+12     	; 0x4be <__stack+0x5f>
				{
					read_m();
 4b2:	22 df       	rcall	.-444    	; 0x2f8 <read_m>
					timing = 0;
 4b4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <timing.1894>
					blink = TRUE;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <blink>
				}
				timing++;
 4be:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <timing.1894>
 4c2:	8f 5f       	subi	r24, 0xFF	; 255
 4c4:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <timing.1894>
 4c8:	0f c0       	rjmp	.+30     	; 0x4e8 <__stack+0x89>
			}
			else if(blink) 
 4ca:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <blink>
 4ce:	88 23       	and	r24, r24
 4d0:	59 f0       	breq	.+22     	; 0x4e8 <__stack+0x89>
			{
				sec--;
 4d2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec>
 4d6:	81 50       	subi	r24, 0x01	; 1
 4d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec>
 4dc:	05 c0       	rjmp	.+10     	; 0x4e8 <__stack+0x89>
					}
				}
			}
		}
	}
	else if(conveer == ON)
 4de:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <conveer>
 4e2:	81 11       	cpse	r24, r1
	{
		conveer = OFF;
 4e4:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <conveer>
	}
}
 4e8:	ff 91       	pop	r31
 4ea:	ef 91       	pop	r30
 4ec:	bf 91       	pop	r27
 4ee:	af 91       	pop	r26
 4f0:	9f 91       	pop	r25
 4f2:	8f 91       	pop	r24
 4f4:	7f 91       	pop	r23
 4f6:	6f 91       	pop	r22
 4f8:	5f 91       	pop	r21
 4fa:	4f 91       	pop	r20
 4fc:	3f 91       	pop	r19
 4fe:	2f 91       	pop	r18
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <get_button>:
			
uint8_t get_button (void) 
{
	static uint8_t active_button = UNPRESS;
	static uint8_t count_volt=0, count=0;
	if (voltage_f != voltage_state)
 50a:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 50e:	83 b3       	in	r24, 0x13	; 19
 510:	82 95       	swap	r24
 512:	86 95       	lsr	r24
 514:	87 70       	andi	r24, 0x07	; 7
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	89 27       	eor	r24, r25
 51a:	81 70       	andi	r24, 0x01	; 1
 51c:	28 17       	cp	r18, r24
 51e:	91 f0       	breq	.+36     	; 0x544 <get_button+0x3a>
	{
		count_volt++;
 520:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <count_volt.1899>
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <count_volt.1899>
		if (count_volt>RESPONSE)
 52a:	8b 30       	cpi	r24, 0x0B	; 11
 52c:	90 f0       	brcs	.+36     	; 0x552 <get_button+0x48>
		{
			voltage_f = voltage_state; 
 52e:	83 b3       	in	r24, 0x13	; 19
 530:	82 95       	swap	r24
 532:	86 95       	lsr	r24
 534:	87 70       	andi	r24, 0x07	; 7
 536:	89 27       	eor	r24, r25
 538:	81 70       	andi	r24, 0x01	; 1
 53a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			count_volt = 0;
 53e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count_volt.1899>
 542:	07 c0       	rjmp	.+14     	; 0x552 <get_button+0x48>
		}
	}
	else if (count_volt > 0)
 544:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <count_volt.1899>
 548:	88 23       	and	r24, r24
 54a:	19 f0       	breq	.+6      	; 0x552 <get_button+0x48>
	{
		count_volt--;
 54c:	81 50       	subi	r24, 0x01	; 1
 54e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <count_volt.1899>
	} 
	
	if(count == 0)active_button = UNPRESS;
 552:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count.1900>
 556:	81 11       	cpse	r24, r1
 558:	02 c0       	rjmp	.+4      	; 0x55e <get_button+0x54>
 55a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
	if(active_button == UNPRESS)
 55e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
 562:	91 11       	cpse	r25, r1
 564:	11 c0       	rjmp	.+34     	; 0x588 <get_button+0x7e>
	{
		if(buton_set)active_button=PRESS_SETTING;
 566:	9c 99       	sbic	0x13, 4	; 19
 568:	04 c0       	rjmp	.+8      	; 0x572 <get_button+0x68>
 56a:	93 e0       	ldi	r25, 0x03	; 3
 56c:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
 570:	0b c0       	rjmp	.+22     	; 0x588 <get_button+0x7e>
		else if(buton_start)active_button=PRESS_START;
 572:	9b 99       	sbic	0x13, 3	; 19
 574:	04 c0       	rjmp	.+8      	; 0x57e <get_button+0x74>
 576:	92 e0       	ldi	r25, 0x02	; 2
 578:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
 57c:	05 c0       	rjmp	.+10     	; 0x588 <get_button+0x7e>
		else if(buton_stop)active_button=PRESS_STOP;
 57e:	9a 99       	sbic	0x13, 2	; 19
 580:	03 c0       	rjmp	.+6      	; 0x588 <get_button+0x7e>
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
	}

	if((buton_set && active_button==PRESS_SETTING) || (buton_start && active_button==PRESS_START) || (buton_stop && active_button==PRESS_STOP))
 588:	9c 99       	sbic	0x13, 4	; 19
 58a:	04 c0       	rjmp	.+8      	; 0x594 <get_button+0x8a>
 58c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
 590:	93 30       	cpi	r25, 0x03	; 3
 592:	61 f0       	breq	.+24     	; 0x5ac <get_button+0xa2>
 594:	9b 99       	sbic	0x13, 3	; 19
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <get_button+0x96>
 598:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
 59c:	92 30       	cpi	r25, 0x02	; 2
 59e:	31 f0       	breq	.+12     	; 0x5ac <get_button+0xa2>
 5a0:	9a 99       	sbic	0x13, 2	; 19
 5a2:	10 c0       	rjmp	.+32     	; 0x5c4 <get_button+0xba>
 5a4:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
 5a8:	91 30       	cpi	r25, 0x01	; 1
 5aa:	61 f4       	brne	.+24     	; 0x5c4 <get_button+0xba>
	{
		if(count > RESPONSE)
 5ac:	8b 30       	cpi	r24, 0x0B	; 11
 5ae:	28 f0       	brcs	.+10     	; 0x5ba <get_button+0xb0>
		{
			count = 0;
 5b0:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count.1900>
			return active_button;
 5b4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 5b8:	08 95       	ret
		}
		count++;
 5ba:	8f 5f       	subi	r24, 0xFF	; 255
 5bc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count.1900>
	}
	else if(count)
	{
		count--;
	}
	return UNPRESS;	
 5c0:	80 e0       	ldi	r24, 0x00	; 0
		if(count > RESPONSE)
		{
			count = 0;
			return active_button;
		}
		count++;
 5c2:	08 95       	ret
	}
	else if(count)
 5c4:	88 23       	and	r24, r24
 5c6:	21 f0       	breq	.+8      	; 0x5d0 <get_button+0xc6>
	{
		count--;
 5c8:	81 50       	subi	r24, 0x01	; 1
 5ca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count.1900>
	}
	return UNPRESS;	
 5ce:	80 e0       	ldi	r24, 0x00	; 0
}
 5d0:	08 95       	ret

000005d2 <execute>:
			
		
void execute(const uint8_t but) 
{
	if (timer_run) 
 5d2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <timer_run>
 5d6:	99 23       	and	r25, r25
 5d8:	91 f0       	breq	.+36     	; 0x5fe <execute+0x2c>
	{
		if (but == PRESS_STOP)
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	09 f0       	breq	.+2      	; 0x5e0 <execute+0xe>
 5de:	ae c0       	rjmp	.+348    	; 0x73c <execute+0x16a>
		{
			timer_run = OFF;
 5e0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <timer_run>
			if (signale) signale = OFF;
 5e4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <signale>
 5e8:	81 11       	cpse	r24, r1
 5ea:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <signale>
			if (conveer) conveer = OFF;
 5ee:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <conveer>
 5f2:	88 23       	and	r24, r24
 5f4:	09 f4       	brne	.+2      	; 0x5f8 <execute+0x26>
 5f6:	a2 c0       	rjmp	.+324    	; 0x73c <execute+0x16a>
 5f8:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <conveer>
 5fc:	08 95       	ret
		}
	}
	else 
	{
		if (but == PRESS_STOP) 
 5fe:	81 30       	cpi	r24, 0x01	; 1
 600:	69 f5       	brne	.+90     	; 0x65c <execute+0x8a>
		{
			if(setup == EDITING_SEC) 
 602:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <setup>
 606:	82 30       	cpi	r24, 0x02	; 2
 608:	61 f4       	brne	.+24     	; 0x622 <execute+0x50>
			{
				sec--;
 60a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec>
 60e:	81 50       	subi	r24, 0x01	; 1
 610:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec>
				if (sec>MAX_MIN_SEC) sec=MAX_MIN_SEC;
 614:	8c 33       	cpi	r24, 0x3C	; 60
 616:	08 f4       	brcc	.+2      	; 0x61a <execute+0x48>
 618:	91 c0       	rjmp	.+290    	; 0x73c <execute+0x16a>
 61a:	8b e3       	ldi	r24, 0x3B	; 59
 61c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec>
 620:	08 95       	ret
			}											
			else if(setup == EDITING_MIN)
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	61 f4       	brne	.+24     	; 0x63e <execute+0x6c>
			{
				min--;
 626:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 62a:	81 50       	subi	r24, 0x01	; 1
 62c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <min>
				if (min>MAX_MIN_SEC) min=MAX_MIN_SEC;
 630:	8c 33       	cpi	r24, 0x3C	; 60
 632:	08 f4       	brcc	.+2      	; 0x636 <execute+0x64>
 634:	83 c0       	rjmp	.+262    	; 0x73c <execute+0x16a>
 636:	8b e3       	ldi	r24, 0x3B	; 59
 638:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <min>
 63c:	08 95       	ret
			}										
			else if(setup == EDITING_HOUR)
 63e:	84 30       	cpi	r24, 0x04	; 4
 640:	09 f0       	breq	.+2      	; 0x644 <execute+0x72>
 642:	7c c0       	rjmp	.+248    	; 0x73c <execute+0x16a>
			{
				hour--;
 644:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <hour>
 648:	81 50       	subi	r24, 0x01	; 1
 64a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <hour>
				if (hour>MAX_HOUR)hour=MAX_HOUR;
 64e:	88 31       	cpi	r24, 0x18	; 24
 650:	08 f4       	brcc	.+2      	; 0x654 <execute+0x82>
 652:	74 c0       	rjmp	.+232    	; 0x73c <execute+0x16a>
 654:	87 e1       	ldi	r24, 0x17	; 23
 656:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <hour>
 65a:	08 95       	ret
			}
		}													
		else if (but == PRESS_START)
 65c:	82 30       	cpi	r24, 0x02	; 2
 65e:	81 f5       	brne	.+96     	; 0x6c0 <execute+0xee>
		{
			if (setup == READY)
 660:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <setup>
 664:	81 11       	cpse	r24, r1
 666:	04 c0       	rjmp	.+8      	; 0x670 <execute+0x9e>
			{
				timer_run = ON;
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <timer_run>
 66e:	08 95       	ret
			}														
			else if (setup == EDITING_SEC)
 670:	82 30       	cpi	r24, 0x02	; 2
 672:	59 f4       	brne	.+22     	; 0x68a <execute+0xb8>
			{
				sec++;
 674:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec>
 678:	8f 5f       	subi	r24, 0xFF	; 255
 67a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec>
				if (sec>MAX_MIN_SEC)sec = 0;
 67e:	8c 33       	cpi	r24, 0x3C	; 60
 680:	08 f4       	brcc	.+2      	; 0x684 <execute+0xb2>
 682:	5c c0       	rjmp	.+184    	; 0x73c <execute+0x16a>
 684:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <sec>
 688:	08 95       	ret
			}													
			else if (setup==EDITING_MIN)
 68a:	83 30       	cpi	r24, 0x03	; 3
 68c:	59 f4       	brne	.+22     	; 0x6a4 <execute+0xd2>
			{
				min++;
 68e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 692:	8f 5f       	subi	r24, 0xFF	; 255
 694:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <min>
				if (min>MAX_MIN_SEC)min = 0;
 698:	8c 33       	cpi	r24, 0x3C	; 60
 69a:	08 f4       	brcc	.+2      	; 0x69e <execute+0xcc>
 69c:	4f c0       	rjmp	.+158    	; 0x73c <execute+0x16a>
 69e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <min>
 6a2:	08 95       	ret
			}														
			else if(setup==EDITING_HOUR) 
 6a4:	84 30       	cpi	r24, 0x04	; 4
 6a6:	09 f0       	breq	.+2      	; 0x6aa <execute+0xd8>
 6a8:	49 c0       	rjmp	.+146    	; 0x73c <execute+0x16a>
			{
				hour++;
 6aa:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <hour>
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <hour>
				if (hour>MAX_HOUR)hour = 0;
 6b4:	88 31       	cpi	r24, 0x18	; 24
 6b6:	08 f4       	brcc	.+2      	; 0x6ba <execute+0xe8>
 6b8:	41 c0       	rjmp	.+130    	; 0x73c <execute+0x16a>
 6ba:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <hour>
 6be:	08 95       	ret
			}
		}															
		else if (but == PRESS_SETTING)
 6c0:	83 30       	cpi	r24, 0x03	; 3
 6c2:	e1 f5       	brne	.+120    	; 0x73c <execute+0x16a>
		{
			setup++;
 6c4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <setup>
 6c8:	8f 5f       	subi	r24, 0xFF	; 255
 6ca:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <setup>
			if (setup == READ_SETUP)
 6ce:	81 30       	cpi	r24, 0x01	; 1
 6d0:	29 f4       	brne	.+10     	; 0x6dc <execute+0x10a>
			{
				read_m();
 6d2:	12 de       	rcall	.-988    	; 0x2f8 <read_m>
				setup = EDITING_SEC;
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <setup>
 6da:	08 95       	ret
			}
			else if(setup >= WRITE_SETUP)
 6dc:	85 30       	cpi	r24, 0x05	; 5
 6de:	70 f1       	brcs	.+92     	; 0x73c <execute+0x16a>
			{
				cli();
 6e0:	f8 94       	cli
				if (min || hour) signal_allowed = TRUE;
 6e2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <min>
 6e6:	81 11       	cpse	r24, r1
 6e8:	04 c0       	rjmp	.+8      	; 0x6f2 <execute+0x120>
 6ea:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour>
 6ee:	99 23       	and	r25, r25
 6f0:	21 f0       	breq	.+8      	; 0x6fa <execute+0x128>
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <signal_allowed>
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <execute+0x12c>
				else signal_allowed = FALSE;
 6fa:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <signal_allowed>
				if(hour == 0 && min == 0 && sec < ALLOW_MINIMUM_DELAY_TIMER)sec = ALLOW_MINIMUM_DELAY_TIMER;
 6fe:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <hour>
 702:	91 11       	cpse	r25, r1
 704:	09 c0       	rjmp	.+18     	; 0x718 <execute+0x146>
 706:	81 11       	cpse	r24, r1
 708:	07 c0       	rjmp	.+14     	; 0x718 <execute+0x146>
 70a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <sec>
 70e:	8a 30       	cpi	r24, 0x0A	; 10
 710:	18 f4       	brcc	.+6      	; 0x718 <execute+0x146>
 712:	8a e0       	ldi	r24, 0x0A	; 10
 714:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <sec>
				EEPROM_WRITE(ADDR_SEC, sec);
 718:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <sec>
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	d6 dd       	rcall	.-1108   	; 0x2ce <EEPROM_WRITE>
				EEPROM_WRITE(ADDR_MIN, min);
 722:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <min>
 726:	82 e0       	ldi	r24, 0x02	; 2
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	d1 dd       	rcall	.-1118   	; 0x2ce <EEPROM_WRITE>
				EEPROM_WRITE(ADDR_HOUR, hour);
 72c:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <hour>
 730:	83 e0       	ldi	r24, 0x03	; 3
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	cc dd       	rcall	.-1128   	; 0x2ce <EEPROM_WRITE>
				setup = READY;
 736:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <setup>
				sei();
 73a:	78 94       	sei
 73c:	08 95       	ret

0000073e <getKey>:
	}																		
}


uint8_t getKey(void)
{
 73e:	cf 93       	push	r28
	
	for(uint8_t i = 0, key=UNPRESS; i<DELAY_BUTTON; i++)
 740:	c0 e0       	ldi	r28, 0x00	; 0
 742:	08 c0       	rjmp	.+16     	; 0x754 <getKey+0x16>
	{
		key = get_button();
 744:	e2 de       	rcall	.-572    	; 0x50a <get_button>
		if(key != UNPRESS)return key;
 746:	81 11       	cpse	r24, r1
 748:	08 c0       	rjmp	.+16     	; 0x75a <getKey+0x1c>
 74a:	01 c0       	rjmp	.+2      	; 0x74e <getKey+0x10>
		for(uint8_t ii=0; ii<RESPONSE; ii++);
 74c:	8f 5f       	subi	r24, 0xFF	; 255
 74e:	8a 30       	cpi	r24, 0x0A	; 10
 750:	e8 f3       	brcs	.-6      	; 0x74c <getKey+0xe>


uint8_t getKey(void)
{
	
	for(uint8_t i = 0, key=UNPRESS; i<DELAY_BUTTON; i++)
 752:	cf 5f       	subi	r28, 0xFF	; 255
 754:	c0 35       	cpi	r28, 0x50	; 80
 756:	b0 f3       	brcs	.-20     	; 0x744 <getKey+0x6>
	{
		key = get_button();
		if(key != UNPRESS)return key;
		for(uint8_t ii=0; ii<RESPONSE; ii++);
	}
	return UNPRESS;
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	cf 91       	pop	r28
 75c:	08 95       	ret

0000075e <main>:
		min   = 0,
		hour  = 0,
		setup = READY;

int main (void)
{
 75e:	cf 93       	push	r28
 760:	df 93       	push	r29
 762:	00 d0       	rcall	.+0      	; 0x764 <main+0x6>
 764:	00 d0       	rcall	.+0      	; 0x766 <main+0x8>
 766:	00 d0       	rcall	.+0      	; 0x768 <main+0xa>
 768:	cd b7       	in	r28, 0x3d	; 61
 76a:	de b7       	in	r29, 0x3e	; 62
		port_ini ();
 76c:	fc dd       	rcall	.-1032   	; 0x366 <port_ini>
		timer_init (HALF_SEC_4M);
 76e:	82 e4       	ldi	r24, 0x42	; 66
 770:	9f e0       	ldi	r25, 0x0F	; 15
 772:	f1 dd       	rcall	.-1054   	; 0x356 <timer_init>
		read_m ();
 774:	c1 dd       	rcall	.-1150   	; 0x2f8 <read_m>
		uint8_t numbers[DIGITS_MAX]={None,None,None,None,None,None};
 776:	86 e0       	ldi	r24, 0x06	; 6
 778:	e1 e6       	ldi	r30, 0x61	; 97
 77a:	f0 e0       	ldi	r31, 0x00	; 0
 77c:	de 01       	movw	r26, r28
 77e:	11 96       	adiw	r26, 0x01	; 1
 780:	01 90       	ld	r0, Z+
 782:	0d 92       	st	X+, r0
 784:	8a 95       	dec	r24
 786:	e1 f7       	brne	.-8      	; 0x780 <main+0x22>
		sei();
 788:	78 94       	sei

																		
	while (1)
	{
		send_to_SPI(numbers);
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	8f dc       	rcall	.-1762   	; 0xae <send_to_SPI>
		execute(getKey());											
 790:	d6 df       	rcall	.-84     	; 0x73e <getKey>
 792:	1f df       	rcall	.-450    	; 0x5d2 <execute>
		set_digits_numbers(numbers);
 794:	ce 01       	movw	r24, r28
 796:	01 96       	adiw	r24, 0x01	; 1
 798:	ff dc       	rcall	.-1538   	; 0x198 <set_digits_numbers>
 79a:	f7 cf       	rjmp	.-18     	; 0x78a <main+0x2c>

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
