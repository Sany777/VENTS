
conveer_optimisation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000089a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000089a  0000092e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800062  00800062  00000930  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e6  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000675  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a06  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00002478  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c1  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000252  00000000  00000000  00002a61  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	07 c2       	rjmp	.+1038   	; 0x418 <__vector_4>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	55 c0       	rjmp	.+170    	; 0xd2 <segchar+0x60>
  28:	30 c0       	rjmp	.+96     	; 0x8a <segchar+0x18>
  2a:	33 c0       	rjmp	.+102    	; 0x92 <segchar+0x20>
  2c:	36 c0       	rjmp	.+108    	; 0x9a <segchar+0x28>
  2e:	39 c0       	rjmp	.+114    	; 0xa2 <segchar+0x30>
  30:	3c c0       	rjmp	.+120    	; 0xaa <segchar+0x38>
  32:	3f c0       	rjmp	.+126    	; 0xb2 <segchar+0x40>
  34:	42 c0       	rjmp	.+132    	; 0xba <segchar+0x48>
  36:	45 c0       	rjmp	.+138    	; 0xc2 <segchar+0x50>
  38:	48 c0       	rjmp	.+144    	; 0xca <segchar+0x58>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	ea e9       	ldi	r30, 0x9A	; 154
  4e:	f8 e0       	ldi	r31, 0x08	; 8
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	a2 36       	cpi	r26, 0x62	; 98
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	a2 e6       	ldi	r26, 0x62	; 98
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	aa 37       	cpi	r26, 0x7A	; 122
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	0b d4       	rcall	.+2070   	; 0x884 <main>
  6e:	13 c4       	rjmp	.+2086   	; 0x896 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <segchar>:

	
	

void segchar (sc seg) {
	switch(seg)
  72:	08 2e       	mov	r0, r24
  74:	00 0c       	add	r0, r0
  76:	99 0b       	sbc	r25, r25
  78:	aa 0b       	sbc	r26, r26
  7a:	bb 0b       	sbc	r27, r27
  7c:	8a 30       	cpi	r24, 0x0A	; 10
  7e:	91 05       	cpc	r25, r1
  80:	60 f5       	brcc	.+88     	; 0xda <segchar+0x68>
  82:	fc 01       	movw	r30, r24
  84:	ed 5e       	subi	r30, 0xED	; 237
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	09 94       	ijmp
	{
		case 1: byte = 0b000000110; break;
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  90:	08 95       	ret
		case 2: byte = 0b01011011; break;
  92:	8b e5       	ldi	r24, 0x5B	; 91
  94:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  98:	08 95       	ret
		case 3: byte = 0b01001111; break;
  9a:	8f e4       	ldi	r24, 0x4F	; 79
  9c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  a0:	08 95       	ret
		case 4: byte = 0b01100110; break;
  a2:	86 e6       	ldi	r24, 0x66	; 102
  a4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  a8:	08 95       	ret
		case 5: byte = 0b01101101; break;
  aa:	8d e6       	ldi	r24, 0x6D	; 109
  ac:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  b0:	08 95       	ret
		case 6: byte = 0b01111101; break;
  b2:	8d e7       	ldi	r24, 0x7D	; 125
  b4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  b8:	08 95       	ret
		case 7: byte = 0b00000111; break;
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  c0:	08 95       	ret
		case 8: byte = 0b01111111; break;
  c2:	8f e7       	ldi	r24, 0x7F	; 127
  c4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  c8:	08 95       	ret
		case 9: byte = 0b01101111; break;
  ca:	8f e6       	ldi	r24, 0x6F	; 111
  cc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  d0:	08 95       	ret
		case 0: byte = 0b00111111; break;
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
  d8:	08 95       	ret
		default: byte = 0; break;
  da:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <byte>
  de:	08 95       	ret

000000e0 <SPI>:





void SPI (void) {
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
	
	cli ();
  e4:	f8 94       	cli
	for (int digit = 0; digit<DIGITS_MAX; digit++) {
  e6:	c0 e0       	ldi	r28, 0x00	; 0
  e8:	d0 e0       	ldi	r29, 0x00	; 0
  ea:	81 c0       	rjmp	.+258    	; 0x1ee <SPI+0x10e>
		if (voltage_f) {
  ec:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  f0:	88 23       	and	r24, r24
  f2:	09 f4       	brne	.+2      	; 0xf6 <SPI+0x16>
  f4:	49 c0       	rjmp	.+146    	; 0x188 <SPI+0xa8>
			segchar(digits_numbers[digit]);
  f6:	fe 01       	movw	r30, r28
  f8:	e2 59       	subi	r30, 0x92	; 146
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	80 81       	ld	r24, Z
  fe:	b9 df       	rcall	.-142    	; 0x72 <segchar>
			if (timing == 0 &&((digit == 0 && (min || hour)) || (digit == 1 && hour))){   // point blink
 100:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timing>
 104:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timing+0x1>
 108:	89 2b       	or	r24, r25
 10a:	b9 f4       	brne	.+46     	; 0x13a <SPI+0x5a>
 10c:	20 97       	sbiw	r28, 0x00	; 0
 10e:	41 f4       	brne	.+16     	; 0x120 <SPI+0x40>
 110:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
 114:	81 11       	cpse	r24, r1
 116:	0b c0       	rjmp	.+22     	; 0x12e <SPI+0x4e>
 118:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 11c:	81 11       	cpse	r24, r1
 11e:	07 c0       	rjmp	.+14     	; 0x12e <SPI+0x4e>
 120:	c1 30       	cpi	r28, 0x01	; 1
 122:	d1 05       	cpc	r29, r1
 124:	51 f4       	brne	.+20     	; 0x13a <SPI+0x5a>
 126:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 12a:	88 23       	and	r24, r24
 12c:	31 f0       	breq	.+12     	; 0x13a <SPI+0x5a>
						byte|=(1<<7);
 12e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <byte>
 132:	80 68       	ori	r24, 0x80	; 128
 134:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
 138:	34 c0       	rjmp	.+104    	; 0x1a2 <SPI+0xc2>
			}
			else if (conveer == ON && digit == CONVEER_SPI){
 13a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <conveer>
 13e:	88 23       	and	r24, r24
 140:	49 f0       	breq	.+18     	; 0x154 <SPI+0x74>
 142:	c4 30       	cpi	r28, 0x04	; 4
 144:	d1 05       	cpc	r29, r1
 146:	31 f4       	brne	.+12     	; 0x154 <SPI+0x74>
					byte|=(1<<7);	
 148:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <byte>
 14c:	80 68       	ori	r24, 0x80	; 128
 14e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
 152:	27 c0       	rjmp	.+78     	; 0x1a2 <SPI+0xc2>
			}
			else if (signale == ON && digit == SIGNAL_SPI){
 154:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <signale>
 158:	88 23       	and	r24, r24
 15a:	49 f0       	breq	.+18     	; 0x16e <SPI+0x8e>
 15c:	c3 30       	cpi	r28, 0x03	; 3
 15e:	d1 05       	cpc	r29, r1
 160:	31 f4       	brne	.+12     	; 0x16e <SPI+0x8e>
					byte|=(1<<7);
 162:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <byte>
 166:	80 68       	ori	r24, 0x80	; 128
 168:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
 16c:	1a c0       	rjmp	.+52     	; 0x1a2 <SPI+0xc2>
			}
			else if (blink == ON && digit == BLINK_BUTTON_SPI){
 16e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 172:	88 23       	and	r24, r24
 174:	b1 f0       	breq	.+44     	; 0x1a2 <SPI+0xc2>
 176:	c5 30       	cpi	r28, 0x05	; 5
 178:	d1 05       	cpc	r29, r1
 17a:	99 f4       	brne	.+38     	; 0x1a2 <SPI+0xc2>
						byte|=(1<<7);
 17c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <byte>
 180:	80 68       	ori	r24, 0x80	; 128
 182:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
 186:	0d c0       	rjmp	.+26     	; 0x1a2 <SPI+0xc2>
			} 
		}
		else {
			 if (digit == 3) byte = 0X3F;          // WRITE "OFF"
 188:	c3 30       	cpi	r28, 0x03	; 3
 18a:	d1 05       	cpc	r29, r1
 18c:	21 f4       	brne	.+8      	; 0x196 <SPI+0xb6>
 18e:	8f e3       	ldi	r24, 0x3F	; 63
 190:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <SPI+0xc2>
			 else if (digit == 2) byte =  0X71;
 196:	c2 30       	cpi	r28, 0x02	; 2
 198:	d1 05       	cpc	r29, r1
 19a:	31 f4       	brne	.+12     	; 0x1a8 <SPI+0xc8>
 19c:	81 e7       	ldi	r24, 0x71	; 113
 19e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>





void SPI (void) {
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	1f c0       	rjmp	.+62     	; 0x1e6 <SPI+0x106>
			} 
		}
		else {
			 if (digit == 3) byte = 0X3F;          // WRITE "OFF"
			 else if (digit == 2) byte =  0X71;
			 else if (digit == 1) byte = 0X71;	 
 1a8:	c1 30       	cpi	r28, 0x01	; 1
 1aa:	d1 05       	cpc	r29, r1
 1ac:	d1 f7       	brne	.-12     	; 0x1a2 <SPI+0xc2>
 1ae:	81 e7       	ldi	r24, 0x71	; 113
 1b0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
 1b4:	f6 cf       	rjmp	.-20     	; 0x1a2 <SPI+0xc2>
		}
			for (int c=0; c<8; c++)					  //SPI function
			{
				if (byte&0x80)
 1b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <byte>
 1ba:	88 23       	and	r24, r24
 1bc:	24 f4       	brge	.+8      	; 0x1c6 <SPI+0xe6>
				{
					PORTD|=(1<<6);
 1be:	82 b3       	in	r24, 0x12	; 18
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <SPI+0xec>
				}
				else
				{
					PORTD&=~(1<<6);
 1c6:	82 b3       	in	r24, 0x12	; 18
 1c8:	8f 7b       	andi	r24, 0xBF	; 191
 1ca:	82 bb       	out	0x12, r24	; 18
				}
				byte = (byte<<1);
 1cc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <byte>
 1d0:	88 0f       	add	r24, r24
 1d2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <byte>
				PORTB|=(1<<0);
 1d6:	88 b3       	in	r24, 0x18	; 24
 1d8:	81 60       	ori	r24, 0x01	; 1
 1da:	88 bb       	out	0x18, r24	; 24
				PORTB&=~(1<<0);
 1dc:	88 b3       	in	r24, 0x18	; 24
 1de:	8e 7f       	andi	r24, 0xFE	; 254
 1e0:	88 bb       	out	0x18, r24	; 24
		else {
			 if (digit == 3) byte = 0X3F;          // WRITE "OFF"
			 else if (digit == 2) byte =  0X71;
			 else if (digit == 1) byte = 0X71;	 
		}
			for (int c=0; c<8; c++)					  //SPI function
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	28 30       	cpi	r18, 0x08	; 8
 1e8:	31 05       	cpc	r19, r1
 1ea:	2c f3       	brlt	.-54     	; 0x1b6 <SPI+0xd6>


void SPI (void) {
	
	cli ();
	for (int digit = 0; digit<DIGITS_MAX; digit++) {
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	c6 30       	cpi	r28, 0x06	; 6
 1f0:	d1 05       	cpc	r29, r1
 1f2:	0c f4       	brge	.+2      	; 0x1f6 <SPI+0x116>
 1f4:	7b cf       	rjmp	.-266    	; 0xec <SPI+0xc>
				PORTB|=(1<<0);
				PORTB&=~(1<<0);
			}
	}
	
	PORTD|=(1<<7); 
 1f6:	82 b3       	in	r24, 0x12	; 18
 1f8:	80 68       	ori	r24, 0x80	; 128
 1fa:	82 bb       	out	0x12, r24	; 18
	PORTD&=~(1<<7);
 1fc:	82 b3       	in	r24, 0x12	; 18
 1fe:	8f 77       	andi	r24, 0x7F	; 127
 200:	82 bb       	out	0x12, r24	; 18
	sei();
 202:	78 94       	sei
}
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	08 95       	ret

0000020a <get_digits_numbers>:
	


void get_digits_numbers(void){

		if (setup == EDITING_SEC && whole_sek){
 20a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	51 f4       	brne	.+20     	; 0x226 <get_digits_numbers+0x1c>
 212:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <whole_sek>
 216:	88 23       	and	r24, r24
 218:	31 f0       	breq	.+12     	; 0x226 <get_digits_numbers+0x1c>
			digits_numbers[0]=None;               // == ''
 21a:	ee e6       	ldi	r30, 0x6E	; 110
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8b e0       	ldi	r24, 0x0B	; 11
 220:	80 83       	st	Z, r24
			digits_numbers[1]=None;
 222:	81 83       	std	Z+1, r24	; 0x01
 224:	15 c0       	rjmp	.+42     	; 0x250 <get_digits_numbers+0x46>
		} 
		else {
			digits_numbers[0]= sek%10 ;
 226:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sek>
 22a:	ee e6       	ldi	r30, 0x6E	; 110
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	87 e6       	ldi	r24, 0x67	; 103
 230:	98 02       	muls	r25, r24
 232:	81 2d       	mov	r24, r1
 234:	11 24       	eor	r1, r1
 236:	85 95       	asr	r24
 238:	85 95       	asr	r24
 23a:	97 fd       	sbrc	r25, 7
 23c:	83 95       	inc	r24
 23e:	38 2f       	mov	r19, r24
 240:	33 0f       	add	r19, r19
 242:	23 2f       	mov	r18, r19
 244:	22 0f       	add	r18, r18
 246:	22 0f       	add	r18, r18
 248:	23 0f       	add	r18, r19
 24a:	92 1b       	sub	r25, r18
 24c:	90 83       	st	Z, r25
			digits_numbers[1]= sek/10 ;
 24e:	81 83       	std	Z+1, r24	; 0x01
		}
		if (setup == EDITING_MIN && whole_sek){
 250:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	51 f4       	brne	.+20     	; 0x26c <get_digits_numbers+0x62>
 258:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <whole_sek>
 25c:	88 23       	and	r24, r24
 25e:	31 f0       	breq	.+12     	; 0x26c <get_digits_numbers+0x62>
			digits_numbers[2]=None; 
 260:	ee e6       	ldi	r30, 0x6E	; 110
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	8b e0       	ldi	r24, 0x0B	; 11
 266:	82 83       	std	Z+2, r24	; 0x02
			digits_numbers[3]=None;
 268:	83 83       	std	Z+3, r24	; 0x03
 26a:	15 c0       	rjmp	.+42     	; 0x296 <get_digits_numbers+0x8c>
		}
		else {
			digits_numbers[2]= min%10 ;
 26c:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <min>
 270:	ee e6       	ldi	r30, 0x6E	; 110
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	87 e6       	ldi	r24, 0x67	; 103
 276:	98 02       	muls	r25, r24
 278:	81 2d       	mov	r24, r1
 27a:	11 24       	eor	r1, r1
 27c:	85 95       	asr	r24
 27e:	85 95       	asr	r24
 280:	97 fd       	sbrc	r25, 7
 282:	83 95       	inc	r24
 284:	38 2f       	mov	r19, r24
 286:	33 0f       	add	r19, r19
 288:	23 2f       	mov	r18, r19
 28a:	22 0f       	add	r18, r18
 28c:	22 0f       	add	r18, r18
 28e:	23 0f       	add	r18, r19
 290:	92 1b       	sub	r25, r18
 292:	92 83       	std	Z+2, r25	; 0x02
			digits_numbers[3]= min/10 ;	
 294:	83 83       	std	Z+3, r24	; 0x03
		}
		if (setup == EDITING_HOUR && whole_sek){
 296:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 29a:	84 30       	cpi	r24, 0x04	; 4
 29c:	51 f4       	brne	.+20     	; 0x2b2 <get_digits_numbers+0xa8>
 29e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <whole_sek>
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <get_digits_numbers+0xa8>
			digits_numbers[4]=None; 
 2a6:	ee e6       	ldi	r30, 0x6E	; 110
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	8b e0       	ldi	r24, 0x0B	; 11
 2ac:	84 83       	std	Z+4, r24	; 0x04
			digits_numbers[5]=None;
 2ae:	85 83       	std	Z+5, r24	; 0x05
 2b0:	15 c0       	rjmp	.+42     	; 0x2dc <get_digits_numbers+0xd2>
		}	
		else{
			digits_numbers[4]= hour%10 ;
 2b2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <hour>
 2b6:	ee e6       	ldi	r30, 0x6E	; 110
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	87 e6       	ldi	r24, 0x67	; 103
 2bc:	98 02       	muls	r25, r24
 2be:	81 2d       	mov	r24, r1
 2c0:	11 24       	eor	r1, r1
 2c2:	85 95       	asr	r24
 2c4:	85 95       	asr	r24
 2c6:	97 fd       	sbrc	r25, 7
 2c8:	83 95       	inc	r24
 2ca:	38 2f       	mov	r19, r24
 2cc:	33 0f       	add	r19, r19
 2ce:	23 2f       	mov	r18, r19
 2d0:	22 0f       	add	r18, r18
 2d2:	22 0f       	add	r18, r18
 2d4:	23 0f       	add	r18, r19
 2d6:	92 1b       	sub	r25, r18
 2d8:	94 83       	std	Z+4, r25	; 0x04
			digits_numbers[5]= hour/10 ;
 2da:	85 83       	std	Z+5, r24	; 0x05
		}
	
	if (timer_run){
 2dc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <timer_run>
 2e0:	81 11       	cpse	r24, r1
 2e2:	0e c0       	rjmp	.+28     	; 0x300 <get_digits_numbers+0xf6>
 2e4:	08 95       	ret
		for (int digit = 5; digit; digit--){   // delete zero
			if (digits_numbers[digit] == 0){
 2e6:	fc 01       	movw	r30, r24
 2e8:	e2 59       	subi	r30, 0x92	; 146
 2ea:	ff 4f       	sbci	r31, 0xFF	; 255
 2ec:	20 81       	ld	r18, Z
 2ee:	21 11       	cpse	r18, r1
 2f0:	0b c0       	rjmp	.+22     	; 0x308 <get_digits_numbers+0xfe>
				digits_numbers[digit] = None;     
 2f2:	fc 01       	movw	r30, r24
 2f4:	e2 59       	subi	r30, 0x92	; 146
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	2b e0       	ldi	r18, 0x0B	; 11
 2fa:	20 83       	st	Z, r18
			digits_numbers[4]= hour%10 ;
			digits_numbers[5]= hour/10 ;
		}
	
	if (timer_run){
		for (int digit = 5; digit; digit--){   // delete zero
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <get_digits_numbers+0xfa>
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	79 f7       	brne	.-34     	; 0x2e6 <get_digits_numbers+0xdc>
 308:	08 95       	ret

0000030a <EEPROM_WRITE>:



void EEPROM_WRITE (unsigned int uiAddress, sc ucData)
{
	while (EECR&(1<<EEWE));
 30a:	e1 99       	sbic	0x1c, 1	; 28
 30c:	fe cf       	rjmp	.-4      	; 0x30a <EEPROM_WRITE>
	EEAR = uiAddress;
 30e:	9f bb       	out	0x1f, r25	; 31
 310:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 312:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE);
 314:	8c b3       	in	r24, 0x1c	; 28
 316:	84 60       	ori	r24, 0x04	; 4
 318:	8c bb       	out	0x1c, r24	; 28
	/* Start eeprom WRITE by setting EEWE */
	EECR |= (1<<EEWE);
 31a:	8c b3       	in	r24, 0x1c	; 28
 31c:	82 60       	ori	r24, 0x02	; 2
 31e:	8c bb       	out	0x1c, r24	; 28
 320:	08 95       	ret

00000322 <EEPROM_read>:
}


signed char EEPROM_read(unsigned int uiAddress)
{
	while(EECR & (1<<EEWE));
 322:	e1 99       	sbic	0x1c, 1	; 28
 324:	fe cf       	rjmp	.-4      	; 0x322 <EEPROM_read>
	EEAR = uiAddress;
 326:	9f bb       	out	0x1f, r25	; 31
 328:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 32a:	8c b3       	in	r24, 0x1c	; 28
 32c:	81 60       	ori	r24, 0x01	; 1
 32e:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 330:	8d b3       	in	r24, 0x1d	; 29
}
 332:	08 95       	ret

00000334 <read_m>:

void read_m (void){
	sek = EEPROM_read(0x01);
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	f4 df       	rcall	.-24     	; 0x322 <EEPROM_read>
 33a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <sek>
	min = EEPROM_read(0x02);
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	ef df       	rcall	.-34     	; 0x322 <EEPROM_read>
 344:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <min>
	hour = EEPROM_read(0x03);
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	ea df       	rcall	.-44     	; 0x322 <EEPROM_read>
 34e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <hour>
	if (min || hour) signal_allowed = 1;
 352:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <min>
 356:	91 11       	cpse	r25, r1
 358:	02 c0       	rjmp	.+4      	; 0x35e <read_m+0x2a>
 35a:	88 23       	and	r24, r24
 35c:	21 f0       	breq	.+8      	; 0x366 <read_m+0x32>
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <signal_allowed>
 364:	08 95       	ret
	else signal_allowed = 0;
 366:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <signal_allowed>
 36a:	08 95       	ret

0000036c <timer_init>:




void timer_init (void){
	TCCR2 = 0x00; //??????? ????? ?????? ???????
 36c:	15 bc       	out	0x25, r1	; 37
	//?? 64 - 1/2 sek
	TCCR2 |=(1<<CS22);
 36e:	85 b5       	in	r24, 0x25	; 37
 370:	84 60       	ori	r24, 0x04	; 4
 372:	85 bd       	out	0x25, r24	; 37
	ASSR|=(1<<AS2);  // ????????? 32???
 374:	82 b5       	in	r24, 0x22	; 34
 376:	88 60       	ori	r24, 0x08	; 8
 378:	82 bd       	out	0x22, r24	; 34
	TIMSK |=(1<<TOIE2);
 37a:	89 b7       	in	r24, 0x39	; 57
 37c:	80 64       	ori	r24, 0x40	; 64
 37e:	89 bf       	out	0x39, r24	; 57
 380:	08 95       	ret

00000382 <port_ini>:



void port_ini (void){
	//////////////////// MOSI
	DDRD|=(1<<6); //DS
 382:	81 b3       	in	r24, 0x11	; 17
 384:	80 64       	ori	r24, 0x40	; 64
 386:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<6); //
 388:	82 b3       	in	r24, 0x12	; 18
 38a:	8f 7b       	andi	r24, 0xBF	; 191
 38c:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<0); //clk
 38e:	87 b3       	in	r24, 0x17	; 23
 390:	81 60       	ori	r24, 0x01	; 1
 392:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<0); //
 394:	88 b3       	in	r24, 0x18	; 24
 396:	8e 7f       	andi	r24, 0xFE	; 254
 398:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<7); // ST vuvid na ekran
 39a:	81 b3       	in	r24, 0x11	; 17
 39c:	80 68       	ori	r24, 0x80	; 128
 39e:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<7); //
 3a0:	82 b3       	in	r24, 0x12	; 18
 3a2:	8f 77       	andi	r24, 0x7F	; 127
 3a4:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<1); //MR registriv skudanie z -
 3a6:	87 b3       	in	r24, 0x17	; 23
 3a8:	82 60       	ori	r24, 0x02	; 2
 3aa:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<1); // +
 3ac:	88 b3       	in	r24, 0x18	; 24
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<5); //OE dlia dozvolu robotu z -
 3b2:	81 b3       	in	r24, 0x11	; 17
 3b4:	80 62       	ori	r24, 0x20	; 32
 3b6:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<5); // -
 3b8:	82 b3       	in	r24, 0x12	; 18
 3ba:	8f 7d       	andi	r24, 0xDF	; 223
 3bc:	82 bb       	out	0x12, r24	; 18

	//////////////// buttons
	DDRC&=~(1<<2); //button SET
 3be:	84 b3       	in	r24, 0x14	; 20
 3c0:	8b 7f       	andi	r24, 0xFB	; 251
 3c2:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<3); //button  start
 3c4:	84 b3       	in	r24, 0x14	; 20
 3c6:	87 7f       	andi	r24, 0xF7	; 247
 3c8:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<4); //button pause
 3ca:	84 b3       	in	r24, 0x14	; 20
 3cc:	8f 7e       	andi	r24, 0xEF	; 239
 3ce:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<5); //voltage
 3d0:	84 b3       	in	r24, 0x14	; 20
 3d2:	8f 7d       	andi	r24, 0xDF	; 223
 3d4:	84 bb       	out	0x14, r24	; 20
	
	PORTC|=(1<<2); //button SET -
 3d6:	85 b3       	in	r24, 0x15	; 21
 3d8:	84 60       	ori	r24, 0x04	; 4
 3da:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<3); //button  start
 3dc:	85 b3       	in	r24, 0x15	; 21
 3de:	88 60       	ori	r24, 0x08	; 8
 3e0:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<4); //button  start
 3e2:	85 b3       	in	r24, 0x15	; 21
 3e4:	80 61       	ori	r24, 0x10	; 16
 3e6:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<5); //voltage
 3e8:	85 b3       	in	r24, 0x15	; 21
 3ea:	80 62       	ori	r24, 0x20	; 32
 3ec:	85 bb       	out	0x15, r24	; 21
		//conveer_off; //
		//signal_off;//
		//buton_blinkOff;
	///////////////////////////

	for (int x=0; x<50; x++)  //SPI function
 3ee:	20 e0       	ldi	r18, 0x00	; 0
 3f0:	30 e0       	ldi	r19, 0x00	; 0
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
	{
		PORTB|=(1<<0);
 3f4:	88 b3       	in	r24, 0x18	; 24
 3f6:	81 60       	ori	r24, 0x01	; 1
 3f8:	88 bb       	out	0x18, r24	; 24
		PORTB&=~(1<<0);
 3fa:	88 b3       	in	r24, 0x18	; 24
 3fc:	8e 7f       	andi	r24, 0xFE	; 254
 3fe:	88 bb       	out	0x18, r24	; 24
		//conveer_off; //
		//signal_off;//
		//buton_blinkOff;
	///////////////////////////

	for (int x=0; x<50; x++)  //SPI function
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	3f 4f       	sbci	r19, 0xFF	; 255
 404:	22 33       	cpi	r18, 0x32	; 50
 406:	31 05       	cpc	r19, r1
 408:	ac f3       	brlt	.-22     	; 0x3f4 <port_ini+0x72>
	{
		PORTB|=(1<<0);
		PORTB&=~(1<<0);
	}
	PORTD |= (1<<7); 
 40a:	82 b3       	in	r24, 0x12	; 18
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<7);
 410:	82 b3       	in	r24, 0x12	; 18
 412:	8f 77       	andi	r24, 0x7F	; 127
 414:	82 bb       	out	0x12, r24	; 18
 416:	08 95       	ret

00000418 <__vector_4>:

}



ISR (TIMER2_OVF_vect){
 418:	1f 92       	push	r1
 41a:	0f 92       	push	r0
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	0f 92       	push	r0
 420:	11 24       	eor	r1, r1
 422:	2f 93       	push	r18
 424:	3f 93       	push	r19
 426:	4f 93       	push	r20
 428:	5f 93       	push	r21
 42a:	6f 93       	push	r22
 42c:	7f 93       	push	r23
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
 432:	af 93       	push	r26
 434:	bf 93       	push	r27
 436:	ef 93       	push	r30
 438:	ff 93       	push	r31
	if (timer_run){
 43a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <timer_run>
 43e:	88 23       	and	r24, r24
 440:	09 f4       	brne	.+2      	; 0x444 <__vector_4+0x2c>
 442:	79 c0       	rjmp	.+242    	; 0x536 <__stack+0xd7>
		if (voltage_f) timing++;
 444:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 448:	88 23       	and	r24, r24
 44a:	49 f0       	breq	.+18     	; 0x45e <__vector_4+0x46>
 44c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timing>
 450:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timing+0x1>
 454:	01 96       	adiw	r24, 0x01	; 1
 456:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <timing+0x1>
 45a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <timing>
		if (min==0 && hour==0 && sek==10 && signal_allowed) signale = ON;
 45e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
 462:	81 11       	cpse	r24, r1
 464:	0f c0       	rjmp	.+30     	; 0x484 <__stack+0x25>
 466:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <hour>
 46a:	91 11       	cpse	r25, r1
 46c:	0b c0       	rjmp	.+22     	; 0x484 <__stack+0x25>
 46e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sek>
 472:	9a 30       	cpi	r25, 0x0A	; 10
 474:	39 f4       	brne	.+14     	; 0x484 <__stack+0x25>
 476:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <signal_allowed>
 47a:	99 23       	and	r25, r25
 47c:	19 f0       	breq	.+6      	; 0x484 <__stack+0x25>
 47e:	91 e0       	ldi	r25, 0x01	; 1
 480:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <signale>
		if (signale == ON && min==0 && hour==0 && sek<6) signale = OFF;
 484:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <signale>
 488:	99 23       	and	r25, r25
 48a:	61 f0       	breq	.+24     	; 0x4a4 <__stack+0x45>
 48c:	81 11       	cpse	r24, r1
 48e:	0a c0       	rjmp	.+20     	; 0x4a4 <__stack+0x45>
 490:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <hour>
 494:	91 11       	cpse	r25, r1
 496:	06 c0       	rjmp	.+12     	; 0x4a4 <__stack+0x45>
 498:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sek>
 49c:	96 30       	cpi	r25, 0x06	; 6
 49e:	14 f4       	brge	.+4      	; 0x4a4 <__stack+0x45>
 4a0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <signale>
		if (min == 0 && hour == 0 && sek == 0){
 4a4:	81 11       	cpse	r24, r1
 4a6:	23 c0       	rjmp	.+70     	; 0x4ee <__stack+0x8f>
 4a8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <hour>
 4ac:	91 11       	cpse	r25, r1
 4ae:	1f c0       	rjmp	.+62     	; 0x4ee <__stack+0x8f>
 4b0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sek>
 4b4:	91 11       	cpse	r25, r1
 4b6:	1b c0       	rjmp	.+54     	; 0x4ee <__stack+0x8f>
			 if (timing<3)conveer = ON;
 4b8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timing>
 4bc:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timing+0x1>
 4c0:	83 30       	cpi	r24, 0x03	; 3
 4c2:	91 05       	cpc	r25, r1
 4c4:	24 f4       	brge	.+8      	; 0x4ce <__stack+0x6f>
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <conveer>
 4cc:	57 c0       	rjmp	.+174    	; 0x57c <__stack+0x11d>
			 else if (timing < 44){
 4ce:	8c 97       	sbiw	r24, 0x2c	; 44
 4d0:	44 f4       	brge	.+16     	; 0x4e2 <__stack+0x83>
				if (conveer == ON) conveer = OFF;
 4d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <conveer>
 4d6:	88 23       	and	r24, r24
 4d8:	09 f4       	brne	.+2      	; 0x4dc <__stack+0x7d>
 4da:	50 c0       	rjmp	.+160    	; 0x57c <__stack+0x11d>
 4dc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <conveer>
 4e0:	4d c0       	rjmp	.+154    	; 0x57c <__stack+0x11d>
			}
			 else {
				read_m();
 4e2:	28 df       	rcall	.-432    	; 0x334 <read_m>
				timing = 0;
 4e4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timing+0x1>
 4e8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timing>
 4ec:	47 c0       	rjmp	.+142    	; 0x57c <__stack+0x11d>
			}
		}
		else {
			if (timing>1) {
 4ee:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <timing>
 4f2:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <timing+0x1>
 4f6:	22 30       	cpi	r18, 0x02	; 2
 4f8:	31 05       	cpc	r19, r1
 4fa:	0c f4       	brge	.+2      	; 0x4fe <__stack+0x9f>
 4fc:	3f c0       	rjmp	.+126    	; 0x57c <__stack+0x11d>
				timing = 0;
 4fe:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timing+0x1>
 502:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timing>
				sek--;
 506:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sek>
 50a:	91 50       	subi	r25, 0x01	; 1
 50c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <sek>
				if (sek<0) {
 510:	99 23       	and	r25, r25
 512:	a4 f5       	brge	.+104    	; 0x57c <__stack+0x11d>
					min--; sek=59;
 514:	81 50       	subi	r24, 0x01	; 1
 516:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <min>
 51a:	9b e3       	ldi	r25, 0x3B	; 59
 51c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <sek>
						if (min<0) {
 520:	88 23       	and	r24, r24
 522:	64 f5       	brge	.+88     	; 0x57c <__stack+0x11d>
							hour--; min=59;
 524:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 528:	81 50       	subi	r24, 0x01	; 1
 52a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <hour>
 52e:	8b e3       	ldi	r24, 0x3B	; 59
 530:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <min>
 534:	23 c0       	rjmp	.+70     	; 0x57c <__stack+0x11d>
				}
			}
		}
	}
	else {
		if (timing) timing = 0;
 536:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timing>
 53a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <timing+0x1>
 53e:	89 2b       	or	r24, r25
 540:	21 f0       	breq	.+8      	; 0x54a <__stack+0xeb>
 542:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <timing+0x1>
 546:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timing>
		if (signale) signale = OFF;
 54a:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <signale>
 54e:	81 11       	cpse	r24, r1
 550:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <signale>
		if (blink) blink = OFF;
 554:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 558:	81 11       	cpse	r24, r1
 55a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		if (conveer) conveer = OFF;
 55e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <conveer>
 562:	81 11       	cpse	r24, r1
 564:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <conveer>
		if (whole_sek) whole_sek = 0;
 568:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <whole_sek>
 56c:	88 23       	and	r24, r24
 56e:	19 f0       	breq	.+6      	; 0x576 <__stack+0x117>
 570:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <whole_sek>
 574:	03 c0       	rjmp	.+6      	; 0x57c <__stack+0x11d>
		else whole_sek = 1;
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <whole_sek>
	}
}
 57c:	ff 91       	pop	r31
 57e:	ef 91       	pop	r30
 580:	bf 91       	pop	r27
 582:	af 91       	pop	r26
 584:	9f 91       	pop	r25
 586:	8f 91       	pop	r24
 588:	7f 91       	pop	r23
 58a:	6f 91       	pop	r22
 58c:	5f 91       	pop	r21
 58e:	4f 91       	pop	r20
 590:	3f 91       	pop	r19
 592:	2f 91       	pop	r18
 594:	0f 90       	pop	r0
 596:	0f be       	out	0x3f, r0	; 63
 598:	0f 90       	pop	r0
 59a:	1f 90       	pop	r1
 59c:	18 95       	reti

0000059e <get_button>:
	
			
			
sc get_button () {
	sc result = 0;
	if ( voltage_f != voltage_state ){
 59e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 5a2:	83 b3       	in	r24, 0x13	; 19
 5a4:	82 95       	swap	r24
 5a6:	86 95       	lsr	r24
 5a8:	87 70       	andi	r24, 0x07	; 7
 5aa:	91 e0       	ldi	r25, 0x01	; 1
 5ac:	89 27       	eor	r24, r25
 5ae:	81 70       	andi	r24, 0x01	; 1
 5b0:	28 17       	cp	r18, r24
 5b2:	f9 f0       	breq	.+62     	; 0x5f2 <get_button+0x54>
		if (vcount<RESPONSE*2) vcount++;
 5b4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <vcount>
 5b8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <vcount+0x1>
 5bc:	80 3b       	cpi	r24, 0xB0	; 176
 5be:	94 40       	sbci	r25, 0x04	; 4
 5c0:	54 f4       	brge	.+20     	; 0x5d6 <get_button+0x38>
 5c2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <vcount>
 5c6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <vcount+0x1>
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <vcount+0x1>
 5d0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <vcount>
 5d4:	1e c0       	rjmp	.+60     	; 0x612 <get_button+0x74>
		else {
			voltage_f = voltage_state; 
 5d6:	83 b3       	in	r24, 0x13	; 19
 5d8:	82 95       	swap	r24
 5da:	86 95       	lsr	r24
 5dc:	87 70       	andi	r24, 0x07	; 7
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	89 27       	eor	r24, r25
 5e2:	81 70       	andi	r24, 0x01	; 1
 5e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			vcount = 0;
 5e8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <vcount+0x1>
 5ec:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <vcount>
 5f0:	10 c0       	rjmp	.+32     	; 0x612 <get_button+0x74>
		}
	}
	else if (vcount > 0) vcount--;
 5f2:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <vcount>
 5f6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <vcount+0x1>
 5fa:	18 16       	cp	r1, r24
 5fc:	19 06       	cpc	r1, r25
 5fe:	4c f4       	brge	.+18     	; 0x612 <get_button+0x74>
 600:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <vcount>
 604:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <vcount+0x1>
 608:	01 97       	sbiw	r24, 0x01	; 1
 60a:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <vcount+0x1>
 60e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <vcount>

	if (active_button == PRESS_SETTING || active_button == UNPRESS){
 612:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <active_button>
 616:	83 30       	cpi	r24, 0x03	; 3
 618:	11 f0       	breq	.+4      	; 0x61e <get_button+0x80>
 61a:	81 11       	cpse	r24, r1
 61c:	28 c0       	rjmp	.+80     	; 0x66e <get_button+0xd0>
		if (buton_set) {
 61e:	9c 99       	sbic	0x13, 4	; 19
 620:	16 c0       	rjmp	.+44     	; 0x64e <get_button+0xb0>
			if (active_button == UNPRESS) active_button = PRESS_SETTING;
 622:	81 11       	cpse	r24, r1
 624:	03 c0       	rjmp	.+6      	; 0x62c <get_button+0x8e>
 626:	83 e0       	ldi	r24, 0x03	; 3
 628:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <active_button>
			if (count<RESPONSE) count++;
 62c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 630:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 634:	88 35       	cpi	r24, 0x58	; 88
 636:	92 40       	sbci	r25, 0x02	; 2
 638:	d4 f4       	brge	.+52     	; 0x66e <get_button+0xd0>
 63a:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 63e:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <count+0x1>
 648:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
 64c:	10 c0       	rjmp	.+32     	; 0x66e <get_button+0xd0>
		}
		else  if (count > 0) count--;
 64e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 652:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 656:	18 16       	cp	r1, r24
 658:	19 06       	cpc	r1, r25
 65a:	4c f4       	brge	.+18     	; 0x66e <get_button+0xd0>
 65c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 660:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <count+0x1>
 66a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
	}
	
	 if (active_button == PRESS_START || active_button == UNPRESS){
 66e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <active_button>
 672:	82 30       	cpi	r24, 0x02	; 2
 674:	11 f0       	breq	.+4      	; 0x67a <get_button+0xdc>
 676:	81 11       	cpse	r24, r1
 678:	28 c0       	rjmp	.+80     	; 0x6ca <get_button+0x12c>
		if (buton_start) {
 67a:	9b 99       	sbic	0x13, 3	; 19
 67c:	16 c0       	rjmp	.+44     	; 0x6aa <get_button+0x10c>
			if (active_button == UNPRESS) active_button = PRESS_START;
 67e:	81 11       	cpse	r24, r1
 680:	03 c0       	rjmp	.+6      	; 0x688 <get_button+0xea>
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <active_button>
			if (count<RESPONSE) count++;
 688:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 68c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 690:	88 35       	cpi	r24, 0x58	; 88
 692:	92 40       	sbci	r25, 0x02	; 2
 694:	d4 f4       	brge	.+52     	; 0x6ca <get_button+0x12c>
 696:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 69a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 69e:	01 96       	adiw	r24, 0x01	; 1
 6a0:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <count+0x1>
 6a4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
 6a8:	10 c0       	rjmp	.+32     	; 0x6ca <get_button+0x12c>
		}
		else if (count>0) count--;
 6aa:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 6ae:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 6b2:	18 16       	cp	r1, r24
 6b4:	19 06       	cpc	r1, r25
 6b6:	4c f4       	brge	.+18     	; 0x6ca <get_button+0x12c>
 6b8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 6bc:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <count+0x1>
 6c6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
	}
	
	 if (active_button == PRESS_STOP || active_button == UNPRESS){					
 6ca:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <active_button>
 6ce:	82 30       	cpi	r24, 0x02	; 2
 6d0:	40 f5       	brcc	.+80     	; 0x722 <get_button+0x184>
		if (buton_stop) {
 6d2:	9a 99       	sbic	0x13, 2	; 19
 6d4:	16 c0       	rjmp	.+44     	; 0x702 <get_button+0x164>
			if (active_button == UNPRESS) active_button = PRESS_STOP;
 6d6:	81 11       	cpse	r24, r1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <get_button+0x142>
 6da:	81 e0       	ldi	r24, 0x01	; 1
 6dc:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <active_button>
			if (count<RESPONSE) count++;
 6e0:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 6e4:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 6e8:	88 35       	cpi	r24, 0x58	; 88
 6ea:	92 40       	sbci	r25, 0x02	; 2
 6ec:	d4 f4       	brge	.+52     	; 0x722 <get_button+0x184>
 6ee:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 6f2:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 6f6:	01 96       	adiw	r24, 0x01	; 1
 6f8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <count+0x1>
 6fc:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
 700:	10 c0       	rjmp	.+32     	; 0x722 <get_button+0x184>
		}
		else if (count > 0) count--;
 702:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 706:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 70a:	18 16       	cp	r1, r24
 70c:	19 06       	cpc	r1, r25
 70e:	4c f4       	brge	.+18     	; 0x722 <get_button+0x184>
 710:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 714:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 718:	01 97       	sbiw	r24, 0x01	; 1
 71a:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <count+0x1>
 71e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <count>
	}

	if (count >= RESPONSE){
 722:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <count>
 726:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <count+0x1>
 72a:	88 35       	cpi	r24, 0x58	; 88
 72c:	92 40       	sbci	r25, 0x02	; 2
 72e:	3c f0       	brlt	.+14     	; 0x73e <get_button+0x1a0>
		count = 0;
 730:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <count+0x1>
 734:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <count>
		result = active_button;
 738:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <active_button>
 73c:	01 c0       	rjmp	.+2      	; 0x740 <get_button+0x1a2>
	
	
			
			
sc get_button () {
	sc result = 0;
 73e:	80 e0       	ldi	r24, 0x00	; 0

	if (count >= RESPONSE){
		count = 0;
		result = active_button;
	}
	if(count <= 0) active_button = UNPRESS;
 740:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <count>
 744:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <count+0x1>
 748:	12 16       	cp	r1, r18
 74a:	13 06       	cpc	r1, r19
 74c:	14 f0       	brlt	.+4      	; 0x752 <get_button+0x1b4>
 74e:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <active_button>
	return result;
			
}
 752:	08 95       	ret

00000754 <direction>:
									
void 	direction(sc but) {
	if (timer_run) {						
 754:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <timer_run>
 758:	99 23       	and	r25, r25
 75a:	31 f0       	breq	.+12     	; 0x768 <direction+0x14>
		if (but == PRESS_STOP)timer_run = OFF;
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	09 f0       	breq	.+2      	; 0x762 <direction+0xe>
 760:	90 c0       	rjmp	.+288    	; 0x882 <direction+0x12e>
 762:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <timer_run>
 766:	08 95       	ret
	}
	else {
		if  (but == PRESS_STOP) {
 768:	81 30       	cpi	r24, 0x01	; 1
 76a:	59 f5       	brne	.+86     	; 0x7c2 <direction+0x6e>
			if(setup == EDITING_SEC) {
 76c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <setup>
 770:	92 30       	cpi	r25, 0x02	; 2
 772:	61 f4       	brne	.+24     	; 0x78c <direction+0x38>
				sek--;
 774:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sek>
 778:	91 50       	subi	r25, 0x01	; 1
 77a:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <sek>
				if (sek<0) sek=59;
 77e:	99 23       	and	r25, r25
 780:	0c f0       	brlt	.+2      	; 0x784 <direction+0x30>
 782:	4e c0       	rjmp	.+156    	; 0x820 <direction+0xcc>
 784:	9b e3       	ldi	r25, 0x3B	; 59
 786:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <sek>
 78a:	4a c0       	rjmp	.+148    	; 0x820 <direction+0xcc>
			}											
			else if(setup == EDITING_MIN){
 78c:	93 30       	cpi	r25, 0x03	; 3
 78e:	61 f4       	brne	.+24     	; 0x7a8 <direction+0x54>
				min--;
 790:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <min>
 794:	91 50       	subi	r25, 0x01	; 1
 796:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <min>
				if (min<0) min=59;
 79a:	99 23       	and	r25, r25
 79c:	0c f0       	brlt	.+2      	; 0x7a0 <direction+0x4c>
 79e:	40 c0       	rjmp	.+128    	; 0x820 <direction+0xcc>
 7a0:	9b e3       	ldi	r25, 0x3B	; 59
 7a2:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <min>
 7a6:	3c c0       	rjmp	.+120    	; 0x820 <direction+0xcc>
			}										
			else if(setup == EDITING_HOUR){
 7a8:	94 30       	cpi	r25, 0x04	; 4
 7aa:	d1 f5       	brne	.+116    	; 0x820 <direction+0xcc>
				hour--;
 7ac:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <hour>
 7b0:	91 50       	subi	r25, 0x01	; 1
 7b2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <hour>
				if (hour<0)hour=24;
 7b6:	99 23       	and	r25, r25
 7b8:	9c f5       	brge	.+102    	; 0x820 <direction+0xcc>
 7ba:	98 e1       	ldi	r25, 0x18	; 24
 7bc:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <hour>
 7c0:	2f c0       	rjmp	.+94     	; 0x820 <direction+0xcc>
			}
		}													
		else if (but == PRESS_START){
 7c2:	82 30       	cpi	r24, 0x02	; 2
 7c4:	69 f5       	brne	.+90     	; 0x820 <direction+0xcc>
			if (setup == READY){
 7c6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <setup>
 7ca:	91 11       	cpse	r25, r1
 7cc:	06 c0       	rjmp	.+12     	; 0x7da <direction+0x86>
				timer_run = ON;
 7ce:	91 e0       	ldi	r25, 0x01	; 1
 7d0:	90 93 78 00 	sts	0x0078, r25	; 0x800078 <timer_run>
				blink = ON;
 7d4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__data_end>
 7d8:	23 c0       	rjmp	.+70     	; 0x820 <direction+0xcc>
			}														
			else if (setup == EDITING_SEC){
 7da:	92 30       	cpi	r25, 0x02	; 2
 7dc:	51 f4       	brne	.+20     	; 0x7f2 <direction+0x9e>
			sek++;
 7de:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <sek>
 7e2:	9f 5f       	subi	r25, 0xFF	; 255
 7e4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <sek>
				if (sek>59)sek = 0;
 7e8:	9c 33       	cpi	r25, 0x3C	; 60
 7ea:	d4 f0       	brlt	.+52     	; 0x820 <direction+0xcc>
 7ec:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <sek>
 7f0:	17 c0       	rjmp	.+46     	; 0x820 <direction+0xcc>
			}													
			else if (setup==EDITING_MIN) {
 7f2:	93 30       	cpi	r25, 0x03	; 3
 7f4:	51 f4       	brne	.+20     	; 0x80a <direction+0xb6>
			min++;
 7f6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <min>
 7fa:	9f 5f       	subi	r25, 0xFF	; 255
 7fc:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <min>
				if (min>59)min = 0;
 800:	9c 33       	cpi	r25, 0x3C	; 60
 802:	74 f0       	brlt	.+28     	; 0x820 <direction+0xcc>
 804:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <min>
 808:	0b c0       	rjmp	.+22     	; 0x820 <direction+0xcc>
			}														
			else if(setup==EDITING_HOUR) {
 80a:	94 30       	cpi	r25, 0x04	; 4
 80c:	49 f4       	brne	.+18     	; 0x820 <direction+0xcc>
				hour++;
 80e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <hour>
 812:	9f 5f       	subi	r25, 0xFF	; 255
 814:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <hour>
				if (hour>24)hour = 0;
 818:	99 31       	cpi	r25, 0x19	; 25
 81a:	14 f0       	brlt	.+4      	; 0x820 <direction+0xcc>
 81c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <hour>
			}
	}															
		if (but == PRESS_SETTING){
 820:	83 30       	cpi	r24, 0x03	; 3
 822:	79 f5       	brne	.+94     	; 0x882 <direction+0x12e>
			setup++;
 824:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <setup>
 828:	8f 5f       	subi	r24, 0xFF	; 255
 82a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <setup>
			if (setup == READ_SETUP){
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	29 f4       	brne	.+10     	; 0x83c <direction+0xe8>
				read_m();
 832:	80 dd       	rcall	.-1280   	; 0x334 <read_m>
				setup = EDITING_SEC;
 834:	82 e0       	ldi	r24, 0x02	; 2
 836:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <setup>
 83a:	08 95       	ret
			}
			else if(setup == WRITE_SETUP){
 83c:	85 30       	cpi	r24, 0x05	; 5
 83e:	09 f5       	brne	.+66     	; 0x882 <direction+0x12e>
				cli();
 840:	f8 94       	cli
				if (min > 1 || hour > 0) signal_allowed = 1;
 842:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <min>
 846:	82 30       	cpi	r24, 0x02	; 2
 848:	24 f4       	brge	.+8      	; 0x852 <direction+0xfe>
 84a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <hour>
 84e:	18 16       	cp	r1, r24
 850:	24 f4       	brge	.+8      	; 0x85a <direction+0x106>
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <signal_allowed>
 858:	02 c0       	rjmp	.+4      	; 0x85e <direction+0x10a>
				else signal_allowed = 0;
 85a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <signal_allowed>
				EEPROM_WRITE(0x01, sek);
 85e:	60 91 6d 00 	lds	r22, 0x006D	; 0x80006d <sek>
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	51 dd       	rcall	.-1374   	; 0x30a <EEPROM_WRITE>
				EEPROM_WRITE(0x02, min);
 868:	60 91 6c 00 	lds	r22, 0x006C	; 0x80006c <min>
 86c:	82 e0       	ldi	r24, 0x02	; 2
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	4c dd       	rcall	.-1384   	; 0x30a <EEPROM_WRITE>
				EEPROM_WRITE(0x03, hour);
 872:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <hour>
 876:	83 e0       	ldi	r24, 0x03	; 3
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	47 dd       	rcall	.-1394   	; 0x30a <EEPROM_WRITE>
				setup = READY;
 87c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <setup>
				sei();
 880:	78 94       	sei
 882:	08 95       	ret

00000884 <main>:




	int main (void){
		port_ini ();
 884:	7e dd       	rcall	.-1284   	; 0x382 <port_ini>
		timer_init ();
 886:	72 dd       	rcall	.-1308   	; 0x36c <timer_init>
		read_m ();
 888:	55 dd       	rcall	.-1366   	; 0x334 <read_m>
		sei();
 88a:	78 94       	sei

																		
	while (1)
	{	
		direction(get_button());											
 88c:	88 de       	rcall	.-752    	; 0x59e <get_button>
 88e:	62 df       	rcall	.-316    	; 0x754 <direction>
		get_digits_numbers();
 890:	bc dc       	rcall	.-1672   	; 0x20a <get_digits_numbers>
		SPI();
 892:	26 dc       	rcall	.-1972   	; 0xe0 <SPI>
 894:	fb cf       	rjmp	.-10     	; 0x88c <main+0x8>

00000896 <_exit>:
 896:	f8 94       	cli

00000898 <__stop_program>:
 898:	ff cf       	rjmp	.-2      	; 0x898 <__stop_program>
