
conveer_optimisation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000007da  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800062  00800062  00000870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009fe  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066b  00000000  00000000  00001352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ab3  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  00002470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c5  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000336  00000000  00000000  00002a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002da7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	33 c0       	rjmp	.+102    	; 0x70 <__bad_interrupt>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	07 c2       	rjmp	.+1038   	; 0x41c <__vector_6>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	41 c0       	rjmp	.+130    	; 0xaa <getCharSegment+0x38>
  28:	30 c0       	rjmp	.+96     	; 0x8a <getCharSegment+0x18>
  2a:	43 c0       	rjmp	.+134    	; 0xb2 <getCharSegment+0x40>
  2c:	30 c0       	rjmp	.+96     	; 0x8e <getCharSegment+0x1c>
  2e:	31 c0       	rjmp	.+98     	; 0x92 <getCharSegment+0x20>
  30:	32 c0       	rjmp	.+100    	; 0x96 <getCharSegment+0x24>
  32:	33 c0       	rjmp	.+102    	; 0x9a <getCharSegment+0x28>
  34:	34 c0       	rjmp	.+104    	; 0x9e <getCharSegment+0x2c>
  36:	35 c0       	rjmp	.+106    	; 0xa2 <getCharSegment+0x30>
  38:	36 c0       	rjmp	.+108    	; 0xa6 <getCharSegment+0x34>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	ea ed       	ldi	r30, 0xDA	; 218
  4e:	f7 e0       	ldi	r31, 0x07	; 7
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	a2 36       	cpi	r26, 0x62	; 98
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	a2 e6       	ldi	r26, 0x62	; 98
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a1 37       	cpi	r26, 0x71	; 113
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	a0 d3       	rcall	.+1856   	; 0x7ae <main>
  6e:	b3 c3       	rjmp	.+1894   	; 0x7d6 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <getCharSegment>:



int8_t getCharSegment(int8_t n)
{
	switch(n)
  72:	08 2e       	mov	r0, r24
  74:	00 0c       	add	r0, r0
  76:	99 0b       	sbc	r25, r25
  78:	aa 0b       	sbc	r26, r26
  7a:	bb 0b       	sbc	r27, r27
  7c:	8a 30       	cpi	r24, 0x0A	; 10
  7e:	91 05       	cpc	r25, r1
  80:	b0 f4       	brcc	.+44     	; 0xae <getCharSegment+0x3c>
  82:	fc 01       	movw	r30, r24
  84:	ed 5e       	subi	r30, 0xED	; 237
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	09 94       	ijmp
	{
		case 1:  return  0b00000110;  break;
  8a:	86 e0       	ldi	r24, 0x06	; 6
  8c:	08 95       	ret
		case 2:  return  0b01011011;  break;
		case 3:  return  0b01001111;  break;
  8e:	8f e4       	ldi	r24, 0x4F	; 79
  90:	08 95       	ret
		case 4:  return  0b01100110;  break;
  92:	86 e6       	ldi	r24, 0x66	; 102
  94:	08 95       	ret
		case 5:  return  0b01101101;  break;
  96:	8d e6       	ldi	r24, 0x6D	; 109
  98:	08 95       	ret
		case 6:  return  0b01111101;  break;
  9a:	8d e7       	ldi	r24, 0x7D	; 125
  9c:	08 95       	ret
		case 7:  return  0b00000111;  break;
  9e:	87 e0       	ldi	r24, 0x07	; 7
  a0:	08 95       	ret
		case 8:  return  0b01111111;  break;
  a2:	8f e7       	ldi	r24, 0x7F	; 127
  a4:	08 95       	ret
		case 9:  return  0b01101111;  break;
  a6:	8f e6       	ldi	r24, 0x6F	; 111
  a8:	08 95       	ret
		case 0:  return  0b00111111;  break;
  aa:	8f e3       	ldi	r24, 0x3F	; 63
  ac:	08 95       	ret
		default: return  0;           break;
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	08 95       	ret
int8_t getCharSegment(int8_t n)
{
	switch(n)
	{
		case 1:  return  0b00000110;  break;
		case 2:  return  0b01011011;  break;
  b2:	8b e5       	ldi	r24, 0x5B	; 91
		case 8:  return  0b01111111;  break;
		case 9:  return  0b01101111;  break;
		case 0:  return  0b00111111;  break;
		default: return  0;           break;
	}
}
  b4:	08 95       	ret

000000b6 <send_to_SPI>:

void send_to_SPI (int8_t *numbers) 
{
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	ec 01       	movw	r28, r24
	cli ();
  be:	f8 94       	cli
	for (int8_t digit = 0, byte = 0; digit<MAX_DIGITS; digit++) 
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	67 c0       	rjmp	.+206    	; 0x192 <send_to_SPI+0xdc>
	{
		if (voltage_f) 
  c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c8:	88 23       	and	r24, r24
  ca:	09 f4       	brne	.+2      	; 0xce <send_to_SPI+0x18>
  cc:	3f c0       	rjmp	.+126    	; 0x14c <send_to_SPI+0x96>
		{
			byte = getCharSegment(numbers[digit]);
  ce:	fe 01       	movw	r30, r28
  d0:	e1 0f       	add	r30, r17
  d2:	f1 1d       	adc	r31, r1
  d4:	17 fd       	sbrc	r17, 7
  d6:	fa 95       	dec	r31
  d8:	80 81       	ld	r24, Z
  da:	cb df       	rcall	.-106    	; 0x72 <getCharSegment>
			// ---------------------------------- control load
			switch(digit)
  dc:	14 30       	cpi	r17, 0x04	; 4
  de:	3c f4       	brge	.+14     	; 0xee <send_to_SPI+0x38>
  e0:	12 30       	cpi	r17, 0x02	; 2
  e2:	44 f5       	brge	.+80     	; 0x134 <send_to_SPI+0x7e>
  e4:	11 23       	and	r17, r17
  e6:	31 f0       	breq	.+12     	; 0xf4 <send_to_SPI+0x3e>
  e8:	11 30       	cpi	r17, 0x01	; 1
  ea:	b1 f0       	breq	.+44     	; 0x118 <send_to_SPI+0x62>
  ec:	3c c0       	rjmp	.+120    	; 0x166 <send_to_SPI+0xb0>
  ee:	16 30       	cpi	r17, 0x06	; 6
  f0:	3c f1       	brlt	.+78     	; 0x140 <send_to_SPI+0x8a>
  f2:	39 c0       	rjmp	.+114    	; 0x166 <send_to_SPI+0xb0>
			{
				case BLINK_FIRST_POINTS  : if(timer_run == OFF || (blink && (min || hour))) active_Load; break;	
  f4:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timer_run>
  f8:	99 23       	and	r25, r25
  fa:	61 f0       	breq	.+24     	; 0x114 <send_to_SPI+0x5e>
  fc:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <blink>
 100:	99 23       	and	r25, r25
 102:	89 f1       	breq	.+98     	; 0x166 <send_to_SPI+0xb0>
 104:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <min>
 108:	91 11       	cpse	r25, r1
 10a:	04 c0       	rjmp	.+8      	; 0x114 <send_to_SPI+0x5e>
 10c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour>
 110:	99 23       	and	r25, r25
 112:	49 f1       	breq	.+82     	; 0x166 <send_to_SPI+0xb0>
 114:	80 68       	ori	r24, 0x80	; 128
 116:	27 c0       	rjmp	.+78     	; 0x166 <send_to_SPI+0xb0>
				case BLINK_SECOND_POINTS : if(timer_run == OFF || (blink && hour)) active_Load; break;
 118:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timer_run>
 11c:	99 23       	and	r25, r25
 11e:	41 f0       	breq	.+16     	; 0x130 <send_to_SPI+0x7a>
 120:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <blink>
 124:	99 23       	and	r25, r25
 126:	f9 f0       	breq	.+62     	; 0x166 <send_to_SPI+0xb0>
 128:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour>
 12c:	99 23       	and	r25, r25
 12e:	d9 f0       	breq	.+54     	; 0x166 <send_to_SPI+0xb0>
 130:	80 68       	ori	r24, 0x80	; 128
 132:	19 c0       	rjmp	.+50     	; 0x166 <send_to_SPI+0xb0>
				case CONVEER_1			 : 
				case CONVEER_2			 : if(conveer == ON) active_Load; break;
 134:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <conveer>
 138:	99 23       	and	r25, r25
 13a:	a9 f0       	breq	.+42     	; 0x166 <send_to_SPI+0xb0>
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	13 c0       	rjmp	.+38     	; 0x166 <send_to_SPI+0xb0>
				case SIGNAL_1			 :
				case SIGNAL_2			 : if(signal == ON) active_Load; break;
 140:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <signal>
 144:	99 23       	and	r25, r25
 146:	79 f0       	breq	.+30     	; 0x166 <send_to_SPI+0xb0>
 148:	80 68       	ori	r24, 0x80	; 128
 14a:	0d c0       	rjmp	.+26     	; 0x166 <send_to_SPI+0xb0>
			}
		}
		else 
		{
		// ---------------------------------- show "OFF"
			 if (digit == 3)      
 14c:	13 30       	cpi	r17, 0x03	; 3
 14e:	31 f0       	breq	.+12     	; 0x15c <send_to_SPI+0xa6>
					byte = 0X3F;          
			 else if (digit == 2) 
 150:	12 30       	cpi	r17, 0x02	; 2
 152:	31 f0       	breq	.+12     	; 0x160 <send_to_SPI+0xaa>
					byte = 0X71;
			 else if (digit == 1) 
 154:	11 30       	cpi	r17, 0x01	; 1
 156:	31 f4       	brne	.+12     	; 0x164 <send_to_SPI+0xae>
					byte = 0X71;
 158:	81 e7       	ldi	r24, 0x71	; 113
 15a:	05 c0       	rjmp	.+10     	; 0x166 <send_to_SPI+0xb0>
		}
		else 
		{
		// ---------------------------------- show "OFF"
			 if (digit == 3)      
					byte = 0X3F;          
 15c:	8f e3       	ldi	r24, 0x3F	; 63
 15e:	03 c0       	rjmp	.+6      	; 0x166 <send_to_SPI+0xb0>
			 else if (digit == 2) 
					byte = 0X71;
 160:	81 e7       	ldi	r24, 0x71	; 113
 162:	01 c0       	rjmp	.+2      	; 0x166 <send_to_SPI+0xb0>
			 else if (digit == 1) 
					byte = 0X71;
			 else  
					byte = 0;
 164:	80 e0       	ldi	r24, 0x00	; 0
			 if (digit == 3)      
					byte = 0X3F;          
			 else if (digit == 2) 
					byte = 0X71;
			 else if (digit == 1) 
					byte = 0X71;
 166:	20 e0       	ldi	r18, 0x00	; 0
 168:	11 c0       	rjmp	.+34     	; 0x18c <send_to_SPI+0xd6>
					byte = 0;
		}
		//---------------------------------- send to SPI
		for (uint8_t i=0; i<SIZE_BYTE; i++)
		{
			if (byte&0x80) 
 16a:	88 23       	and	r24, r24
 16c:	24 f4       	brge	.+8      	; 0x176 <send_to_SPI+0xc0>
				send_1;
 16e:	92 b3       	in	r25, 0x12	; 18
 170:	90 64       	ori	r25, 0x40	; 64
 172:	92 bb       	out	0x12, r25	; 18
 174:	03 c0       	rjmp	.+6      	; 0x17c <send_to_SPI+0xc6>
			else 
				send_0;
 176:	92 b3       	in	r25, 0x12	; 18
 178:	9f 7b       	andi	r25, 0xBF	; 191
 17a:	92 bb       	out	0x12, r25	; 18
			byte = (byte<<1);
 17c:	88 0f       	add	r24, r24
			send_CLK;
 17e:	98 b3       	in	r25, 0x18	; 24
 180:	91 60       	ori	r25, 0x01	; 1
 182:	98 bb       	out	0x18, r25	; 24
 184:	98 b3       	in	r25, 0x18	; 24
 186:	9e 7f       	andi	r25, 0xFE	; 254
 188:	98 bb       	out	0x18, r25	; 24
					byte = 0X71;
			 else  
					byte = 0;
		}
		//---------------------------------- send to SPI
		for (uint8_t i=0; i<SIZE_BYTE; i++)
 18a:	2f 5f       	subi	r18, 0xFF	; 255
 18c:	28 30       	cpi	r18, 0x08	; 8
 18e:	68 f3       	brcs	.-38     	; 0x16a <send_to_SPI+0xb4>
}

void send_to_SPI (int8_t *numbers) 
{
	cli ();
	for (int8_t digit = 0, byte = 0; digit<MAX_DIGITS; digit++) 
 190:	1f 5f       	subi	r17, 0xFF	; 255
 192:	16 30       	cpi	r17, 0x06	; 6
 194:	0c f4       	brge	.+2      	; 0x198 <send_to_SPI+0xe2>
 196:	96 cf       	rjmp	.-212    	; 0xc4 <send_to_SPI+0xe>
				send_0;
			byte = (byte<<1);
			send_CLK;
		}
	}
	end_Transmision_Spi;
 198:	82 b3       	in	r24, 0x12	; 18
 19a:	80 68       	ori	r24, 0x80	; 128
 19c:	82 bb       	out	0x12, r24	; 18
 19e:	82 b3       	in	r24, 0x12	; 18
 1a0:	8f 77       	andi	r24, 0x7F	; 127
 1a2:	82 bb       	out	0x12, r24	; 18
	sei();
 1a4:	78 94       	sei
}
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	08 95       	ret

000001ae <set_digits_numbers>:
	


void set_digits_numbers(int8_t *numbers)
{
 1ae:	fc 01       	movw	r30, r24
	numbers[0]= setup == EDITING_SEC  && blink ? NONE : sec%10;
 1b0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <setup>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	21 f4       	brne	.+8      	; 0x1c0 <set_digits_numbers+0x12>
 1b8:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <blink>
 1bc:	81 11       	cpse	r24, r1
 1be:	12 c0       	rjmp	.+36     	; 0x1e4 <set_digits_numbers+0x36>
 1c0:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <sec>
 1c4:	97 e6       	ldi	r25, 0x67	; 103
 1c6:	29 02       	muls	r18, r25
 1c8:	91 2d       	mov	r25, r1
 1ca:	11 24       	eor	r1, r1
 1cc:	95 95       	asr	r25
 1ce:	95 95       	asr	r25
 1d0:	27 fd       	sbrc	r18, 7
 1d2:	93 95       	inc	r25
 1d4:	99 0f       	add	r25, r25
 1d6:	89 2f       	mov	r24, r25
 1d8:	88 0f       	add	r24, r24
 1da:	88 0f       	add	r24, r24
 1dc:	98 0f       	add	r25, r24
 1de:	29 1b       	sub	r18, r25
 1e0:	92 2f       	mov	r25, r18
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <set_digits_numbers+0x38>
 1e4:	9b e0       	ldi	r25, 0x0B	; 11
 1e6:	90 83       	st	Z, r25
	numbers[1]= setup == EDITING_SEC  && blink ? NONE : sec/10;
 1e8:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <setup>
 1ec:	22 30       	cpi	r18, 0x02	; 2
 1ee:	21 f4       	brne	.+8      	; 0x1f8 <set_digits_numbers+0x4a>
 1f0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <blink>
 1f4:	81 11       	cpse	r24, r1
 1f6:	0b c0       	rjmp	.+22     	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 1f8:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <sec>
 1fc:	87 e6       	ldi	r24, 0x67	; 103
 1fe:	98 02       	muls	r25, r24
 200:	81 2d       	mov	r24, r1
 202:	11 24       	eor	r1, r1
 204:	85 95       	asr	r24
 206:	85 95       	asr	r24
 208:	97 fd       	sbrc	r25, 7
 20a:	83 95       	inc	r24
 20c:	01 c0       	rjmp	.+2      	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 20e:	8b e0       	ldi	r24, 0x0B	; 11
 210:	81 83       	std	Z+1, r24	; 0x01
	numbers[2]= setup == EDITING_MIN  && blink ? NONE : min%10;
 212:	23 30       	cpi	r18, 0x03	; 3
 214:	21 f4       	brne	.+8      	; 0x21e <__EEPROM_REGION_LENGTH__+0x1e>
 216:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <blink>
 21a:	81 11       	cpse	r24, r1
 21c:	12 c0       	rjmp	.+36     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 21e:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <min>
 222:	97 e6       	ldi	r25, 0x67	; 103
 224:	39 02       	muls	r19, r25
 226:	91 2d       	mov	r25, r1
 228:	11 24       	eor	r1, r1
 22a:	95 95       	asr	r25
 22c:	95 95       	asr	r25
 22e:	37 fd       	sbrc	r19, 7
 230:	93 95       	inc	r25
 232:	99 0f       	add	r25, r25
 234:	89 2f       	mov	r24, r25
 236:	88 0f       	add	r24, r24
 238:	88 0f       	add	r24, r24
 23a:	98 0f       	add	r25, r24
 23c:	39 1b       	sub	r19, r25
 23e:	93 2f       	mov	r25, r19
 240:	01 c0       	rjmp	.+2      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
 242:	9b e0       	ldi	r25, 0x0B	; 11
 244:	92 83       	std	Z+2, r25	; 0x02
	numbers[3]= setup == EDITING_MIN  && blink ? NONE : min/10;
 246:	23 30       	cpi	r18, 0x03	; 3
 248:	21 f4       	brne	.+8      	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>
 24a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <blink>
 24e:	81 11       	cpse	r24, r1
 250:	0b c0       	rjmp	.+22     	; 0x268 <__EEPROM_REGION_LENGTH__+0x68>
 252:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <min>
 256:	87 e6       	ldi	r24, 0x67	; 103
 258:	98 02       	muls	r25, r24
 25a:	81 2d       	mov	r24, r1
 25c:	11 24       	eor	r1, r1
 25e:	85 95       	asr	r24
 260:	85 95       	asr	r24
 262:	97 fd       	sbrc	r25, 7
 264:	83 95       	inc	r24
 266:	01 c0       	rjmp	.+2      	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
 268:	8b e0       	ldi	r24, 0x0B	; 11
 26a:	83 83       	std	Z+3, r24	; 0x03
	numbers[4]= setup == EDITING_HOUR && blink ? NONE : hour%10;
 26c:	24 30       	cpi	r18, 0x04	; 4
 26e:	21 f4       	brne	.+8      	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
 270:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <blink>
 274:	81 11       	cpse	r24, r1
 276:	12 c0       	rjmp	.+36     	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 278:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <hour>
 27c:	97 e6       	ldi	r25, 0x67	; 103
 27e:	39 02       	muls	r19, r25
 280:	91 2d       	mov	r25, r1
 282:	11 24       	eor	r1, r1
 284:	95 95       	asr	r25
 286:	95 95       	asr	r25
 288:	37 fd       	sbrc	r19, 7
 28a:	93 95       	inc	r25
 28c:	99 0f       	add	r25, r25
 28e:	89 2f       	mov	r24, r25
 290:	88 0f       	add	r24, r24
 292:	88 0f       	add	r24, r24
 294:	98 0f       	add	r25, r24
 296:	39 1b       	sub	r19, r25
 298:	93 2f       	mov	r25, r19
 29a:	01 c0       	rjmp	.+2      	; 0x29e <__EEPROM_REGION_LENGTH__+0x9e>
 29c:	9b e0       	ldi	r25, 0x0B	; 11
 29e:	94 83       	std	Z+4, r25	; 0x04
	numbers[5]= setup == EDITING_HOUR && blink ? NONE : hour/10;
 2a0:	24 30       	cpi	r18, 0x04	; 4
 2a2:	21 f4       	brne	.+8      	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
 2a4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <blink>
 2a8:	81 11       	cpse	r24, r1
 2aa:	0b c0       	rjmp	.+22     	; 0x2c2 <__EEPROM_REGION_LENGTH__+0xc2>
 2ac:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour>
 2b0:	87 e6       	ldi	r24, 0x67	; 103
 2b2:	98 02       	muls	r25, r24
 2b4:	81 2d       	mov	r24, r1
 2b6:	11 24       	eor	r1, r1
 2b8:	85 95       	asr	r24
 2ba:	85 95       	asr	r24
 2bc:	97 fd       	sbrc	r25, 7
 2be:	83 95       	inc	r24
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
 2c2:	8b e0       	ldi	r24, 0x0B	; 11
 2c4:	85 83       	std	Z+5, r24	; 0x05
	
	if (timer_run)
 2c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <timer_run>
 2ca:	81 11       	cpse	r24, r1
 2cc:	05 c0       	rjmp	.+10     	; 0x2d8 <__EEPROM_REGION_LENGTH__+0xd8>
 2ce:	08 95       	ret
	{
		for (int8_t digit=5; digit && numbers[digit] == 0; digit--)
		{
			numbers[digit] = NONE;     
 2d0:	9b e0       	ldi	r25, 0x0B	; 11
 2d2:	9c 93       	st	X, r25
	numbers[4]= setup == EDITING_HOUR && blink ? NONE : hour%10;
	numbers[5]= setup == EDITING_HOUR && blink ? NONE : hour/10;
	
	if (timer_run)
	{
		for (int8_t digit=5; digit && numbers[digit] == 0; digit--)
 2d4:	81 50       	subi	r24, 0x01	; 1
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <__EEPROM_REGION_LENGTH__+0xda>
 2d8:	85 e0       	ldi	r24, 0x05	; 5
 2da:	88 23       	and	r24, r24
 2dc:	41 f0       	breq	.+16     	; 0x2ee <__EEPROM_REGION_LENGTH__+0xee>
 2de:	df 01       	movw	r26, r30
 2e0:	a8 0f       	add	r26, r24
 2e2:	b1 1d       	adc	r27, r1
 2e4:	87 fd       	sbrc	r24, 7
 2e6:	ba 95       	dec	r27
 2e8:	9c 91       	ld	r25, X
 2ea:	99 23       	and	r25, r25
 2ec:	89 f3       	breq	.-30     	; 0x2d0 <__EEPROM_REGION_LENGTH__+0xd0>
 2ee:	08 95       	ret

000002f0 <EEPROM_WRITE>:
}


void EEPROM_WRITE (uint16_t uiAddress, uint8_t ucData)
{
	while (EECR&(1<<EEWE));
 2f0:	e1 99       	sbic	0x1c, 1	; 28
 2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <EEPROM_WRITE>
	EEAR = uiAddress;
 2f4:	9f bb       	out	0x1f, r25	; 31
 2f6:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 2f8:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE);
 2fa:	8c b3       	in	r24, 0x1c	; 28
 2fc:	84 60       	ori	r24, 0x04	; 4
 2fe:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE);
 300:	8c b3       	in	r24, 0x1c	; 28
 302:	82 60       	ori	r24, 0x02	; 2
 304:	8c bb       	out	0x1c, r24	; 28
 306:	08 95       	ret

00000308 <EEPROM_read>:
}


uint8_t EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEWE));
 308:	e1 99       	sbic	0x1c, 1	; 28
 30a:	fe cf       	rjmp	.-4      	; 0x308 <EEPROM_read>
	EEAR = uiAddress;
 30c:	9f bb       	out	0x1f, r25	; 31
 30e:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 310:	8c b3       	in	r24, 0x1c	; 28
 312:	81 60       	ori	r24, 0x01	; 1
 314:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 316:	8d b3       	in	r24, 0x1d	; 29
}
 318:	08 95       	ret

0000031a <read_m>:

void read_m (void)
{
	sec  = EEPROM_read(ADDR_SEC);
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	f4 df       	rcall	.-24     	; 0x308 <EEPROM_read>
 320:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sec>
	min  = EEPROM_read(ADDR_MIN);
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	ef df       	rcall	.-34     	; 0x308 <EEPROM_read>
 32a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <min>
	hour = EEPROM_read(ADDR_HOUR);
 32e:	83 e0       	ldi	r24, 0x03	; 3
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	ea df       	rcall	.-44     	; 0x308 <EEPROM_read>
 334:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <hour>
	if(sec > MAX_MIN_SEC || sec < 0)sec = 0;
 338:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <sec>
 33c:	9c 33       	cpi	r25, 0x3C	; 60
 33e:	10 f0       	brcs	.+4      	; 0x344 <read_m+0x2a>
 340:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <sec>
	if(min > MAX_MIN_SEC || min < 0)min = 25;
 344:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <min>
 348:	9c 33       	cpi	r25, 0x3C	; 60
 34a:	18 f0       	brcs	.+6      	; 0x352 <read_m+0x38>
 34c:	99 e1       	ldi	r25, 0x19	; 25
 34e:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <min>
	if(hour > MAX_HOUR || hour < 0)hour = 0;
 352:	88 31       	cpi	r24, 0x18	; 24
 354:	10 f0       	brcs	.+4      	; 0x35a <read_m+0x40>
 356:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <hour>
	if (min || hour) signal_allowed = TRUE;
 35a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <min>
 35e:	81 11       	cpse	r24, r1
 360:	04 c0       	rjmp	.+8      	; 0x36a <read_m+0x50>
 362:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <hour>
 366:	88 23       	and	r24, r24
 368:	21 f0       	breq	.+8      	; 0x372 <read_m+0x58>
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <signal_allowed>
 370:	08 95       	ret
	else signal_allowed = FALSE;
 372:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <signal_allowed>
 376:	08 95       	ret

00000378 <port_ini>:

void port_ini (void)
{
		
	//---------------------- program SPI : 0-6 bit - show number, 7bit - control load
	DDRD|=(1<<6);     //DS
 378:	81 b3       	in	r24, 0x11	; 17
 37a:	80 64       	ori	r24, 0x40	; 64
 37c:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<6);   // set 0
 37e:	82 b3       	in	r24, 0x12	; 18
 380:	8f 7b       	andi	r24, 0xBF	; 191
 382:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<0);     //clk
 384:	87 b3       	in	r24, 0x17	; 23
 386:	81 60       	ori	r24, 0x01	; 1
 388:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<0);   // 
 38a:	88 b3       	in	r24, 0x18	; 24
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<7);     // ST 
 390:	81 b3       	in	r24, 0x11	; 17
 392:	80 68       	ori	r24, 0x80	; 128
 394:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<7);   // 
 396:	82 b3       	in	r24, 0x12	; 18
 398:	8f 77       	andi	r24, 0x7F	; 127
 39a:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<1);     //MR 
 39c:	87 b3       	in	r24, 0x17	; 23
 39e:	82 60       	ori	r24, 0x02	; 2
 3a0:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<1);    // +
 3a2:	88 b3       	in	r24, 0x18	; 24
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<5);     //OE
 3a8:	81 b3       	in	r24, 0x11	; 17
 3aa:	80 62       	ori	r24, 0x20	; 32
 3ac:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<5);   // OE enable
 3ae:	82 b3       	in	r24, 0x12	; 18
 3b0:	8f 7d       	andi	r24, 0xDF	; 223
 3b2:	82 bb       	out	0x12, r24	; 18
	
	//----------------------------- port input

	DDRC&=~(1<<2); //button SET
 3b4:	84 b3       	in	r24, 0x14	; 20
 3b6:	8b 7f       	andi	r24, 0xFB	; 251
 3b8:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<3); //button  start
 3ba:	84 b3       	in	r24, 0x14	; 20
 3bc:	87 7f       	andi	r24, 0xF7	; 247
 3be:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<4); //button pause
 3c0:	84 b3       	in	r24, 0x14	; 20
 3c2:	8f 7e       	andi	r24, 0xEF	; 239
 3c4:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<5); //voltage
 3c6:	84 b3       	in	r24, 0x14	; 20
 3c8:	8f 7d       	andi	r24, 0xDF	; 223
 3ca:	84 bb       	out	0x14, r24	; 20
		
	//--------------------------- pin pull up
	PORTC|=(1<<2);
 3cc:	85 b3       	in	r24, 0x15	; 21
 3ce:	84 60       	ori	r24, 0x04	; 4
 3d0:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<3);
 3d2:	85 b3       	in	r24, 0x15	; 21
 3d4:	88 60       	ori	r24, 0x08	; 8
 3d6:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<4);
 3d8:	85 b3       	in	r24, 0x15	; 21
 3da:	80 61       	ori	r24, 0x10	; 16
 3dc:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<5);
 3de:	85 b3       	in	r24, 0x15	; 21
 3e0:	80 62       	ori	r24, 0x20	; 32
 3e2:	85 bb       	out	0x15, r24	; 21
		
	//-------------------------- clear registers
	for (uint8_t i=0; i<SIZE_BYTE*MAX_DIGITS; i++) 
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	07 c0       	rjmp	.+14     	; 0x3f6 <port_ini+0x7e>
	{
		send_CLK;
 3e8:	88 b3       	in	r24, 0x18	; 24
 3ea:	81 60       	ori	r24, 0x01	; 1
 3ec:	88 bb       	out	0x18, r24	; 24
 3ee:	88 b3       	in	r24, 0x18	; 24
 3f0:	8e 7f       	andi	r24, 0xFE	; 254
 3f2:	88 bb       	out	0x18, r24	; 24
	PORTC|=(1<<3);
	PORTC|=(1<<4);
	PORTC|=(1<<5);
		
	//-------------------------- clear registers
	for (uint8_t i=0; i<SIZE_BYTE*MAX_DIGITS; i++) 
 3f4:	9f 5f       	subi	r25, 0xFF	; 255
 3f6:	90 33       	cpi	r25, 0x30	; 48
 3f8:	b8 f3       	brcs	.-18     	; 0x3e8 <port_ini+0x70>
	{
		send_CLK;
	}
	end_Transmision_Spi;
 3fa:	82 b3       	in	r24, 0x12	; 18
 3fc:	80 68       	ori	r24, 0x80	; 128
 3fe:	82 bb       	out	0x12, r24	; 18
 400:	82 b3       	in	r24, 0x12	; 18
 402:	8f 77       	andi	r24, 0x7F	; 127
 404:	82 bb       	out	0x12, r24	; 18
 406:	08 95       	ret

00000408 <timer_init>:
	ASSR|=(1<<AS2);
	TIMSK |=(1<<TOIE2);

#else
	
	TCCR1B |= (1<<WGM12)      // CTC mode
 408:	8e b5       	in	r24, 0x2e	; 46
 40a:	8d 60       	ori	r24, 0x0D	; 13
 40c:	8e bd       	out	0x2e, r24	; 46
	| (1<<CS12) | (1<<CS10); // /1024
	OCR1AH = TIMING_HALF_SEC>>SIZE_BYTE;
 40e:	87 e0       	ldi	r24, 0x07	; 7
 410:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = TIMING_HALF_SEC;
 412:	80 ea       	ldi	r24, 0xA0	; 160
 414:	8a bd       	out	0x2a, r24	; 42
	TIMSK = (1<<TOIE1)       // Timer 1 enable
 416:	84 e1       	ldi	r24, 0x14	; 20
 418:	89 bf       	out	0x39, r24	; 57
 41a:	08 95       	ret

0000041c <__vector_6>:
#ifdef QUARTZ_32768
	ISR (TIMER2_OVF_vect)
#else 
	ISR (TIMER1_COMPA_vect)
#endif
{
 41c:	1f 92       	push	r1
 41e:	0f 92       	push	r0
 420:	0f b6       	in	r0, 0x3f	; 63
 422:	0f 92       	push	r0
 424:	11 24       	eor	r1, r1
 426:	2f 93       	push	r18
 428:	3f 93       	push	r19
 42a:	4f 93       	push	r20
 42c:	5f 93       	push	r21
 42e:	6f 93       	push	r22
 430:	7f 93       	push	r23
 432:	8f 93       	push	r24
 434:	9f 93       	push	r25
 436:	af 93       	push	r26
 438:	bf 93       	push	r27
 43a:	ef 93       	push	r30
 43c:	ff 93       	push	r31
	static uint8_t timing=0;
	if (voltage_f)
 43e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 442:	88 23       	and	r24, r24
 444:	09 f4       	brne	.+2      	; 0x448 <__vector_6+0x2c>
 446:	74 c0       	rjmp	.+232    	; 0x530 <__stack+0xd1>
	{
		blink = !blink;
 448:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <blink>
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	89 27       	eor	r24, r25
 450:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <blink>
		if (timer_run)
 454:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <timer_run>
 458:	88 23       	and	r24, r24
 45a:	09 f4       	brne	.+2      	; 0x45e <__vector_6+0x42>
 45c:	6e c0       	rjmp	.+220    	; 0x53a <__stack+0xdb>
		{
			if (signal == OFF && min==0 && hour==0 && sec == TIME_SIGNAL_ON && signal_allowed) signal = ON;
 45e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <signal>
 462:	81 11       	cpse	r24, r1
 464:	14 c0       	rjmp	.+40     	; 0x48e <__stack+0x2f>
 466:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <min>
 46a:	81 11       	cpse	r24, r1
 46c:	10 c0       	rjmp	.+32     	; 0x48e <__stack+0x2f>
 46e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <hour>
 472:	81 11       	cpse	r24, r1
 474:	0c c0       	rjmp	.+24     	; 0x48e <__stack+0x2f>
 476:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sec>
 47a:	8a 30       	cpi	r24, 0x0A	; 10
 47c:	41 f4       	brne	.+16     	; 0x48e <__stack+0x2f>
 47e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <signal_allowed>
 482:	88 23       	and	r24, r24
 484:	21 f0       	breq	.+8      	; 0x48e <__stack+0x2f>
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <signal>
 48c:	12 c0       	rjmp	.+36     	; 0x4b2 <__stack+0x53>
			else if (signal == ON && min==0 && hour==0 && sec<TIME_SIGNAL_OFF) signal = OFF;
 48e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <signal>
 492:	88 23       	and	r24, r24
 494:	71 f0       	breq	.+28     	; 0x4b2 <__stack+0x53>
 496:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <min>
 49a:	81 11       	cpse	r24, r1
 49c:	0a c0       	rjmp	.+20     	; 0x4b2 <__stack+0x53>
 49e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <hour>
 4a2:	81 11       	cpse	r24, r1
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <__stack+0x53>
 4a6:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sec>
 4aa:	88 30       	cpi	r24, 0x08	; 8
 4ac:	14 f4       	brge	.+4      	; 0x4b2 <__stack+0x53>
 4ae:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <signal>
			if (min == 0 && hour == 0 && sec == 0)
 4b2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <min>
 4b6:	81 11       	cpse	r24, r1
 4b8:	1f c0       	rjmp	.+62     	; 0x4f8 <__stack+0x99>
 4ba:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour>
 4be:	91 11       	cpse	r25, r1
 4c0:	1b c0       	rjmp	.+54     	; 0x4f8 <__stack+0x99>
 4c2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <sec>
 4c6:	91 11       	cpse	r25, r1
 4c8:	17 c0       	rjmp	.+46     	; 0x4f8 <__stack+0x99>
			{
				timing++;
 4ca:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <timing.1896>
 4ce:	8f 5f       	subi	r24, 0xFF	; 255
 4d0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <timing.1896>
				if (timing == 1)
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	19 f4       	brne	.+6      	; 0x4de <__stack+0x7f>
				{
					conveer = ON;
 4d8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <conveer>
 4dc:	2e c0       	rjmp	.+92     	; 0x53a <__stack+0xdb>
				}
				else if(timing == 4)
 4de:	84 30       	cpi	r24, 0x04	; 4
 4e0:	19 f4       	brne	.+6      	; 0x4e8 <__stack+0x89>
				{
					conveer = OFF;
 4e2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <conveer>
 4e6:	29 c0       	rjmp	.+82     	; 0x53a <__stack+0xdb>
				}
				else if (timing > 44)
 4e8:	8d 32       	cpi	r24, 0x2D	; 45
 4ea:	38 f1       	brcs	.+78     	; 0x53a <__stack+0xdb>
				{
					read_m();
 4ec:	16 df       	rcall	.-468    	; 0x31a <read_m>
					timing = 0;
 4ee:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <timing.1896>
					blink = FALSE;
 4f2:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <blink>
 4f6:	21 c0       	rjmp	.+66     	; 0x53a <__stack+0xdb>
				}
			}
			else if(blink) 
 4f8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <blink>
 4fc:	99 23       	and	r25, r25
 4fe:	e9 f0       	breq	.+58     	; 0x53a <__stack+0xdb>
			{
				sec--;
 500:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <sec>
 504:	91 50       	subi	r25, 0x01	; 1
 506:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <sec>
				if (sec<0)
 50a:	99 23       	and	r25, r25
 50c:	b4 f4       	brge	.+44     	; 0x53a <__stack+0xdb>
				{
					min--;
 50e:	81 50       	subi	r24, 0x01	; 1
 510:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <min>
					sec=59;
 514:	9b e3       	ldi	r25, 0x3B	; 59
 516:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <sec>
					if (min<0)
 51a:	88 23       	and	r24, r24
 51c:	74 f4       	brge	.+28     	; 0x53a <__stack+0xdb>
					{
						hour--;
 51e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <hour>
 522:	81 50       	subi	r24, 0x01	; 1
 524:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <hour>
						min=59;
 528:	8b e3       	ldi	r24, 0x3B	; 59
 52a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <min>
 52e:	05 c0       	rjmp	.+10     	; 0x53a <__stack+0xdb>
					}
				}
			}
		}
	}
	else if(conveer == ON)
 530:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <conveer>
 534:	81 11       	cpse	r24, r1
	{
		conveer = OFF;
 536:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <conveer>
	}
}
 53a:	ff 91       	pop	r31
 53c:	ef 91       	pop	r30
 53e:	bf 91       	pop	r27
 540:	af 91       	pop	r26
 542:	9f 91       	pop	r25
 544:	8f 91       	pop	r24
 546:	7f 91       	pop	r23
 548:	6f 91       	pop	r22
 54a:	5f 91       	pop	r21
 54c:	4f 91       	pop	r20
 54e:	3f 91       	pop	r19
 550:	2f 91       	pop	r18
 552:	0f 90       	pop	r0
 554:	0f be       	out	0x3f, r0	; 63
 556:	0f 90       	pop	r0
 558:	1f 90       	pop	r1
 55a:	18 95       	reti

0000055c <get_button>:
			
uint8_t get_button (void) 
{
	static uint8_t active_button = UNPRESS;
	static uint16_t count_volt=0, count_but=0;
	if (voltage_f != voltage_state)
 55c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 560:	83 b3       	in	r24, 0x13	; 19
 562:	82 95       	swap	r24
 564:	86 95       	lsr	r24
 566:	87 70       	andi	r24, 0x07	; 7
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	89 27       	eor	r24, r25
 56c:	81 70       	andi	r24, 0x01	; 1
 56e:	28 17       	cp	r18, r24
 570:	d1 f0       	breq	.+52     	; 0x5a6 <get_button+0x4a>
	{
		count_volt++;
 572:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count_volt.1901>
 576:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <count_volt.1901+0x1>
 57a:	01 96       	adiw	r24, 0x01	; 1
 57c:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <count_volt.1901+0x1>
 580:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count_volt.1901>
		if (count_volt>BUTTON_DELAY)
 584:	81 33       	cpi	r24, 0x31	; 49
 586:	99 40       	sbci	r25, 0x09	; 9
 588:	c8 f0       	brcs	.+50     	; 0x5bc <get_button+0x60>
		{
			voltage_f = voltage_state; 
 58a:	83 b3       	in	r24, 0x13	; 19
 58c:	82 95       	swap	r24
 58e:	86 95       	lsr	r24
 590:	87 70       	andi	r24, 0x07	; 7
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	89 27       	eor	r24, r25
 596:	81 70       	andi	r24, 0x01	; 1
 598:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			count_volt = 0;
 59c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <count_volt.1901+0x1>
 5a0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <count_volt.1901>
 5a4:	0b c0       	rjmp	.+22     	; 0x5bc <get_button+0x60>
		}
	}
	else if (count_volt > 0)
 5a6:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <count_volt.1901>
 5aa:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <count_volt.1901+0x1>
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	29 f0       	breq	.+10     	; 0x5bc <get_button+0x60>
	{
		count_volt--;
 5b2:	01 97       	sbiw	r24, 0x01	; 1
 5b4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <count_volt.1901+0x1>
 5b8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <count_volt.1901>
	} 
	
	if(count_but == 0)active_button = UNPRESS;
 5bc:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <count_but.1902>
 5c0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <count_but.1902+0x1>
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	11 f4       	brne	.+4      	; 0x5cc <get_button+0x70>
 5c8:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
	if(active_button == UNPRESS)
 5cc:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 5d0:	21 11       	cpse	r18, r1
 5d2:	11 c0       	rjmp	.+34     	; 0x5f6 <get_button+0x9a>
	{
		if(buton_set)active_button=PRESS_SETTING;
 5d4:	9c 99       	sbic	0x13, 4	; 19
 5d6:	04 c0       	rjmp	.+8      	; 0x5e0 <get_button+0x84>
 5d8:	23 e0       	ldi	r18, 0x03	; 3
 5da:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
 5de:	0b c0       	rjmp	.+22     	; 0x5f6 <get_button+0x9a>
		else if(buton_start)active_button=PRESS_START;
 5e0:	9b 99       	sbic	0x13, 3	; 19
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <get_button+0x90>
 5e4:	22 e0       	ldi	r18, 0x02	; 2
 5e6:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
 5ea:	05 c0       	rjmp	.+10     	; 0x5f6 <get_button+0x9a>
		else if(buton_stop)active_button=PRESS_STOP;
 5ec:	9a 99       	sbic	0x13, 2	; 19
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <get_button+0x9a>
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
	}

	if((buton_set && active_button==PRESS_SETTING) || (buton_start && active_button==PRESS_START) || (buton_stop && active_button==PRESS_STOP))
 5f6:	9c 99       	sbic	0x13, 4	; 19
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <get_button+0xa6>
 5fa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 5fe:	23 30       	cpi	r18, 0x03	; 3
 600:	61 f0       	breq	.+24     	; 0x61a <get_button+0xbe>
 602:	9b 99       	sbic	0x13, 3	; 19
 604:	04 c0       	rjmp	.+8      	; 0x60e <get_button+0xb2>
 606:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 60a:	22 30       	cpi	r18, 0x02	; 2
 60c:	31 f0       	breq	.+12     	; 0x61a <get_button+0xbe>
 60e:	9a 99       	sbic	0x13, 2	; 19
 610:	16 c0       	rjmp	.+44     	; 0x63e <get_button+0xe2>
 612:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 616:	21 30       	cpi	r18, 0x01	; 1
 618:	91 f4       	brne	.+36     	; 0x63e <get_button+0xe2>
	{
		if(count_but > BUTTON_DELAY)
 61a:	81 33       	cpi	r24, 0x31	; 49
 61c:	29 e0       	ldi	r18, 0x09	; 9
 61e:	92 07       	cpc	r25, r18
 620:	38 f0       	brcs	.+14     	; 0x630 <get_button+0xd4>
		{
			count_but = 0;
 622:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <count_but.1902+0x1>
 626:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <count_but.1902>
			return active_button;
 62a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 62e:	08 95       	ret
		}
		count_but++;
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <count_but.1902+0x1>
 636:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <count_but.1902>
	}
	else if(count_but)
	{
		count_but--;
	}
	return UNPRESS;	
 63a:	80 e0       	ldi	r24, 0x00	; 0
		if(count_but > BUTTON_DELAY)
		{
			count_but = 0;
			return active_button;
		}
		count_but++;
 63c:	08 95       	ret
	}
	else if(count_but)
 63e:	00 97       	sbiw	r24, 0x00	; 0
 640:	39 f0       	breq	.+14     	; 0x650 <get_button+0xf4>
	{
		count_but--;
 642:	01 97       	sbiw	r24, 0x01	; 1
 644:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <count_but.1902+0x1>
 648:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <count_but.1902>
	}
	return UNPRESS;	
 64c:	80 e0       	ldi	r24, 0x00	; 0
 64e:	08 95       	ret
 650:	80 e0       	ldi	r24, 0x00	; 0
}
 652:	08 95       	ret

00000654 <execute>:
			
		
void execute(const uint8_t but) 
{
	if (timer_run) 
 654:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <timer_run>
 658:	99 23       	and	r25, r25
 65a:	91 f0       	breq	.+36     	; 0x680 <execute+0x2c>
	{
		if (but == PRESS_STOP)
 65c:	81 30       	cpi	r24, 0x01	; 1
 65e:	09 f0       	breq	.+2      	; 0x662 <execute+0xe>
 660:	a5 c0       	rjmp	.+330    	; 0x7ac <execute+0x158>
		{
			timer_run = OFF;
 662:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timer_run>
			if (signal) signal = OFF;
 666:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <signal>
 66a:	81 11       	cpse	r24, r1
 66c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <signal>
			if (conveer) conveer = OFF;
 670:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <conveer>
 674:	88 23       	and	r24, r24
 676:	09 f4       	brne	.+2      	; 0x67a <execute+0x26>
 678:	99 c0       	rjmp	.+306    	; 0x7ac <execute+0x158>
 67a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <conveer>
 67e:	08 95       	ret
		}
	}
	else 
	{
		if (but == PRESS_STOP) 
 680:	81 30       	cpi	r24, 0x01	; 1
 682:	39 f5       	brne	.+78     	; 0x6d2 <execute+0x7e>
		{
			if(setup == EDITING_SEC) sec = sec==0 ? MAX_MIN_SEC : sec-1;
 684:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <setup>
 688:	82 30       	cpi	r24, 0x02	; 2
 68a:	51 f4       	brne	.+20     	; 0x6a0 <execute+0x4c>
 68c:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sec>
 690:	88 23       	and	r24, r24
 692:	11 f0       	breq	.+4      	; 0x698 <execute+0x44>
 694:	81 50       	subi	r24, 0x01	; 1
 696:	01 c0       	rjmp	.+2      	; 0x69a <execute+0x46>
 698:	8b e3       	ldi	r24, 0x3B	; 59
 69a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sec>
 69e:	08 95       	ret
			else if(setup == EDITING_MIN) min = min==0 ? MAX_MIN_SEC : min-1;
 6a0:	83 30       	cpi	r24, 0x03	; 3
 6a2:	51 f4       	brne	.+20     	; 0x6b8 <execute+0x64>
 6a4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <min>
 6a8:	88 23       	and	r24, r24
 6aa:	11 f0       	breq	.+4      	; 0x6b0 <execute+0x5c>
 6ac:	81 50       	subi	r24, 0x01	; 1
 6ae:	01 c0       	rjmp	.+2      	; 0x6b2 <execute+0x5e>
 6b0:	8b e3       	ldi	r24, 0x3B	; 59
 6b2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <min>
 6b6:	08 95       	ret
			else if(setup == EDITING_HOUR) hour = hour==0 ? MAX_HOUR : hour-1;
 6b8:	84 30       	cpi	r24, 0x04	; 4
 6ba:	09 f0       	breq	.+2      	; 0x6be <execute+0x6a>
 6bc:	77 c0       	rjmp	.+238    	; 0x7ac <execute+0x158>
 6be:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <hour>
 6c2:	88 23       	and	r24, r24
 6c4:	11 f0       	breq	.+4      	; 0x6ca <execute+0x76>
 6c6:	81 50       	subi	r24, 0x01	; 1
 6c8:	01 c0       	rjmp	.+2      	; 0x6cc <execute+0x78>
 6ca:	87 e1       	ldi	r24, 0x17	; 23
 6cc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <hour>
 6d0:	08 95       	ret
		}													
		else if (but == PRESS_START)
 6d2:	82 30       	cpi	r24, 0x02	; 2
 6d4:	69 f5       	brne	.+90     	; 0x730 <execute+0xdc>
		{
			if (setup == READY) timer_run = ON;
 6d6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <setup>
 6da:	81 11       	cpse	r24, r1
 6dc:	04 c0       	rjmp	.+8      	; 0x6e6 <execute+0x92>
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <timer_run>
 6e4:	08 95       	ret
			else if(setup == EDITING_SEC) sec = sec==MAX_MIN_SEC ? 0 : sec+1;
 6e6:	82 30       	cpi	r24, 0x02	; 2
 6e8:	51 f4       	brne	.+20     	; 0x6fe <execute+0xaa>
 6ea:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sec>
 6ee:	8b 33       	cpi	r24, 0x3B	; 59
 6f0:	11 f0       	breq	.+4      	; 0x6f6 <execute+0xa2>
 6f2:	8f 5f       	subi	r24, 0xFF	; 255
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <execute+0xa4>
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sec>
 6fc:	08 95       	ret
			else if(setup == EDITING_MIN) min = min==MAX_MIN_SEC ? 0 : min+1;
 6fe:	83 30       	cpi	r24, 0x03	; 3
 700:	51 f4       	brne	.+20     	; 0x716 <execute+0xc2>
 702:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <min>
 706:	8b 33       	cpi	r24, 0x3B	; 59
 708:	11 f0       	breq	.+4      	; 0x70e <execute+0xba>
 70a:	8f 5f       	subi	r24, 0xFF	; 255
 70c:	01 c0       	rjmp	.+2      	; 0x710 <execute+0xbc>
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <min>
 714:	08 95       	ret
			else if(setup == EDITING_HOUR) hour = hour==MAX_HOUR ? 0 : hour+1;
 716:	84 30       	cpi	r24, 0x04	; 4
 718:	09 f0       	breq	.+2      	; 0x71c <execute+0xc8>
 71a:	48 c0       	rjmp	.+144    	; 0x7ac <execute+0x158>
 71c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <hour>
 720:	87 31       	cpi	r24, 0x17	; 23
 722:	11 f0       	breq	.+4      	; 0x728 <execute+0xd4>
 724:	8f 5f       	subi	r24, 0xFF	; 255
 726:	01 c0       	rjmp	.+2      	; 0x72a <execute+0xd6>
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <hour>
 72e:	08 95       	ret
		}															
		else if (but == PRESS_SETTING)
 730:	83 30       	cpi	r24, 0x03	; 3
 732:	e1 f5       	brne	.+120    	; 0x7ac <execute+0x158>
		{
			setup++;
 734:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <setup>
 738:	8f 5f       	subi	r24, 0xFF	; 255
 73a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <setup>
			if (setup == READ_SETUP)
 73e:	81 30       	cpi	r24, 0x01	; 1
 740:	29 f4       	brne	.+10     	; 0x74c <execute+0xf8>
			{
				read_m();
 742:	eb dd       	rcall	.-1066   	; 0x31a <read_m>
				setup = EDITING_SEC;
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <setup>
 74a:	08 95       	ret
			}
			else if(setup >= WRITE_SETUP)
 74c:	85 30       	cpi	r24, 0x05	; 5
 74e:	74 f1       	brlt	.+92     	; 0x7ac <execute+0x158>
			{
				cli();
 750:	f8 94       	cli
				if (min || hour) signal_allowed = TRUE;
 752:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <min>
 756:	81 11       	cpse	r24, r1
 758:	04 c0       	rjmp	.+8      	; 0x762 <execute+0x10e>
 75a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour>
 75e:	99 23       	and	r25, r25
 760:	21 f0       	breq	.+8      	; 0x76a <execute+0x116>
 762:	91 e0       	ldi	r25, 0x01	; 1
 764:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <signal_allowed>
 768:	02 c0       	rjmp	.+4      	; 0x76e <execute+0x11a>
				else signal_allowed = FALSE;
 76a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <signal_allowed>
				if(hour == 0 && min == 0 && sec < MINIMUM_TIME)sec = MINIMUM_TIME;
 76e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <hour>
 772:	91 11       	cpse	r25, r1
 774:	09 c0       	rjmp	.+18     	; 0x788 <execute+0x134>
 776:	81 11       	cpse	r24, r1
 778:	07 c0       	rjmp	.+14     	; 0x788 <execute+0x134>
 77a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <sec>
 77e:	8a 30       	cpi	r24, 0x0A	; 10
 780:	1c f4       	brge	.+6      	; 0x788 <execute+0x134>
 782:	8a e0       	ldi	r24, 0x0A	; 10
 784:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <sec>
				EEPROM_WRITE(ADDR_SEC, sec);
 788:	60 91 6b 00 	lds	r22, 0x006B	; 0x80006b <sec>
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	af dd       	rcall	.-1186   	; 0x2f0 <EEPROM_WRITE>
				EEPROM_WRITE(ADDR_MIN, min);
 792:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <min>
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	aa dd       	rcall	.-1196   	; 0x2f0 <EEPROM_WRITE>
				EEPROM_WRITE(ADDR_HOUR, hour);
 79c:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <hour>
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	a5 dd       	rcall	.-1206   	; 0x2f0 <EEPROM_WRITE>
				setup = READY;
 7a6:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <setup>
				sei();
 7aa:	78 94       	sei
 7ac:	08 95       	ret

000007ae <main>:
		setup = READY;
		
		

int main (void)
{
 7ae:	cf 93       	push	r28
 7b0:	df 93       	push	r29
 7b2:	00 d0       	rcall	.+0      	; 0x7b4 <main+0x6>
 7b4:	00 d0       	rcall	.+0      	; 0x7b6 <main+0x8>
 7b6:	00 d0       	rcall	.+0      	; 0x7b8 <main+0xa>
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	port_ini ();
 7bc:	dd dd       	rcall	.-1094   	; 0x378 <port_ini>
	timer_init();
 7be:	24 de       	rcall	.-952    	; 0x408 <timer_init>
	read_m ();
 7c0:	ac dd       	rcall	.-1192   	; 0x31a <read_m>
	int8_t numbers_to_send[MAX_DIGITS];
	sei();
 7c2:	78 94       	sei
																		
	while (1)
	{
		send_to_SPI(numbers_to_send);
 7c4:	ce 01       	movw	r24, r28
 7c6:	01 96       	adiw	r24, 0x01	; 1
 7c8:	76 dc       	rcall	.-1812   	; 0xb6 <send_to_SPI>
		execute(get_button());											
 7ca:	c8 de       	rcall	.-624    	; 0x55c <get_button>
 7cc:	43 df       	rcall	.-378    	; 0x654 <execute>
		set_digits_numbers(numbers_to_send);
 7ce:	ce 01       	movw	r24, r28
 7d0:	01 96       	adiw	r24, 0x01	; 1
 7d2:	ed dc       	rcall	.-1574   	; 0x1ae <set_digits_numbers>
 7d4:	f7 cf       	rjmp	.-18     	; 0x7c4 <main+0x16>

000007d6 <_exit>:
 7d6:	f8 94       	cli

000007d8 <__stop_program>:
 7d8:	ff cf       	rjmp	.-2      	; 0x7d8 <__stop_program>
