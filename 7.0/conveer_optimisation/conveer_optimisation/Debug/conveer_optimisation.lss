
conveer_optimisation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800068  00800068  00000840  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000840  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000870  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c8  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000640  00000000  00000000  000012e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b9  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000022e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000496  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000035a  00000000  00000000  0000289a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002bf4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	36 c0       	rjmp	.+108    	; 0x70 <__bad_interrupt>
   4:	35 c0       	rjmp	.+106    	; 0x70 <__bad_interrupt>
   6:	34 c0       	rjmp	.+104    	; 0x70 <__bad_interrupt>
   8:	01 c2       	rjmp	.+1026   	; 0x40c <__vector_4>
   a:	32 c0       	rjmp	.+100    	; 0x70 <__bad_interrupt>
   c:	31 c0       	rjmp	.+98     	; 0x70 <__bad_interrupt>
   e:	30 c0       	rjmp	.+96     	; 0x70 <__bad_interrupt>
  10:	2f c0       	rjmp	.+94     	; 0x70 <__bad_interrupt>
  12:	2e c0       	rjmp	.+92     	; 0x70 <__bad_interrupt>
  14:	2d c0       	rjmp	.+90     	; 0x70 <__bad_interrupt>
  16:	2c c0       	rjmp	.+88     	; 0x70 <__bad_interrupt>
  18:	2b c0       	rjmp	.+86     	; 0x70 <__bad_interrupt>
  1a:	2a c0       	rjmp	.+84     	; 0x70 <__bad_interrupt>
  1c:	29 c0       	rjmp	.+82     	; 0x70 <__bad_interrupt>
  1e:	28 c0       	rjmp	.+80     	; 0x70 <__bad_interrupt>
  20:	27 c0       	rjmp	.+78     	; 0x70 <__bad_interrupt>
  22:	26 c0       	rjmp	.+76     	; 0x70 <__bad_interrupt>
  24:	25 c0       	rjmp	.+74     	; 0x70 <__bad_interrupt>
  26:	4b c0       	rjmp	.+150    	; 0xbe <SPI+0x4c>
  28:	3a c0       	rjmp	.+116    	; 0x9e <SPI+0x2c>
  2a:	4d c0       	rjmp	.+154    	; 0xc6 <SPI+0x54>
  2c:	3a c0       	rjmp	.+116    	; 0xa2 <SPI+0x30>
  2e:	3b c0       	rjmp	.+118    	; 0xa6 <SPI+0x34>
  30:	3c c0       	rjmp	.+120    	; 0xaa <SPI+0x38>
  32:	3d c0       	rjmp	.+122    	; 0xae <SPI+0x3c>
  34:	3e c0       	rjmp	.+124    	; 0xb2 <SPI+0x40>
  36:	3f c0       	rjmp	.+126    	; 0xb6 <SPI+0x44>
  38:	40 c0       	rjmp	.+128    	; 0xba <SPI+0x48>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_copy_data>:
  46:	10 e0       	ldi	r17, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	e4 ea       	ldi	r30, 0xA4	; 164
  4e:	f7 e0       	ldi	r31, 0x07	; 7
  50:	02 c0       	rjmp	.+4      	; 0x56 <__do_copy_data+0x10>
  52:	05 90       	lpm	r0, Z+
  54:	0d 92       	st	X+, r0
  56:	a8 36       	cpi	r26, 0x68	; 104
  58:	b1 07       	cpc	r27, r17
  5a:	d9 f7       	brne	.-10     	; 0x52 <__do_copy_data+0xc>

0000005c <__do_clear_bss>:
  5c:	20 e0       	ldi	r18, 0x00	; 0
  5e:	a8 e6       	ldi	r26, 0x68	; 104
  60:	b0 e0       	ldi	r27, 0x00	; 0
  62:	01 c0       	rjmp	.+2      	; 0x66 <.do_clear_bss_start>

00000064 <.do_clear_bss_loop>:
  64:	1d 92       	st	X+, r1

00000066 <.do_clear_bss_start>:
  66:	a7 37       	cpi	r26, 0x77	; 119
  68:	b2 07       	cpc	r27, r18
  6a:	e1 f7       	brne	.-8      	; 0x64 <.do_clear_bss_loop>
  6c:	7c d3       	rcall	.+1784   	; 0x766 <main>
  6e:	98 c3       	rjmp	.+1840   	; 0x7a0 <_exit>

00000070 <__bad_interrupt>:
  70:	c7 cf       	rjmp	.-114    	; 0x0 <__vectors>

00000072 <SPI>:
}



void SPI (uint8_t *numbers) 
{
  72:	bc 01       	movw	r22, r24
	cli ();
  74:	f8 94       	cli
	for (uint8_t digit = 0,byte = 0; digit<DIGITS_MAX; digit++) 
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	76 c0       	rjmp	.+236    	; 0x166 <SPI+0xf4>
	{
		if (voltage_f) 
  7a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  7e:	88 23       	and	r24, r24
  80:	09 f4       	brne	.+2      	; 0x84 <SPI+0x12>
  82:	4e c0       	rjmp	.+156    	; 0x120 <SPI+0xae>
		{
			switch(numbers[digit])
  84:	fb 01       	movw	r30, r22
  86:	e4 0f       	add	r30, r20
  88:	f1 1d       	adc	r31, r1
  8a:	e0 81       	ld	r30, Z
  8c:	8e 2f       	mov	r24, r30
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	8a 30       	cpi	r24, 0x0A	; 10
  92:	91 05       	cpc	r25, r1
  94:	b0 f4       	brcc	.+44     	; 0xc2 <SPI+0x50>
  96:	fc 01       	movw	r30, r24
  98:	ed 5e       	subi	r30, 0xED	; 237
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	09 94       	ijmp
			{
				case 1:  byte = 0b000000110; break;
  9e:	36 e0       	ldi	r19, 0x06	; 6
  a0:	13 c0       	rjmp	.+38     	; 0xc8 <SPI+0x56>
				case 2:  byte = 0b01011011;  break;
				case 3:  byte = 0b01001111;  break;
  a2:	3f e4       	ldi	r19, 0x4F	; 79
  a4:	11 c0       	rjmp	.+34     	; 0xc8 <SPI+0x56>
				case 4:  byte = 0b01100110;  break;
  a6:	36 e6       	ldi	r19, 0x66	; 102
  a8:	0f c0       	rjmp	.+30     	; 0xc8 <SPI+0x56>
				case 5:  byte = 0b01101101;  break;
  aa:	3d e6       	ldi	r19, 0x6D	; 109
  ac:	0d c0       	rjmp	.+26     	; 0xc8 <SPI+0x56>
				case 6:  byte = 0b01111101;  break;
  ae:	3d e7       	ldi	r19, 0x7D	; 125
  b0:	0b c0       	rjmp	.+22     	; 0xc8 <SPI+0x56>
				case 7:  byte = 0b00000111;  break;
  b2:	37 e0       	ldi	r19, 0x07	; 7
  b4:	09 c0       	rjmp	.+18     	; 0xc8 <SPI+0x56>
				case 8:  byte = 0b01111111;  break;
  b6:	3f e7       	ldi	r19, 0x7F	; 127
  b8:	07 c0       	rjmp	.+14     	; 0xc8 <SPI+0x56>
				case 9:  byte = 0b01101111;  break;
  ba:	3f e6       	ldi	r19, 0x6F	; 111
  bc:	05 c0       	rjmp	.+10     	; 0xc8 <SPI+0x56>
				case 0:  byte = 0b00111111;  break;
  be:	3f e3       	ldi	r19, 0x3F	; 63
  c0:	03 c0       	rjmp	.+6      	; 0xc8 <SPI+0x56>
				default: byte = 0;           break;
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <SPI+0x56>
		if (voltage_f) 
		{
			switch(numbers[digit])
			{
				case 1:  byte = 0b000000110; break;
				case 2:  byte = 0b01011011;  break;
  c6:	3b e5       	ldi	r19, 0x5B	; 91
				case 9:  byte = 0b01101111;  break;
				case 0:  byte = 0b00111111;  break;
				default: byte = 0;           break;
			}
			// ---------------------------------- direction
			switch(digit)
  c8:	41 30       	cpi	r20, 0x01	; 1
  ca:	a1 f0       	breq	.+40     	; 0xf4 <SPI+0x82>
  cc:	28 f0       	brcs	.+10     	; 0xd8 <SPI+0x66>
  ce:	43 30       	cpi	r20, 0x03	; 3
  d0:	09 f1       	breq	.+66     	; 0x114 <SPI+0xa2>
  d2:	44 30       	cpi	r20, 0x04	; 4
  d4:	c9 f0       	breq	.+50     	; 0x108 <SPI+0x96>
  d6:	31 c0       	rjmp	.+98     	; 0x13a <SPI+0xc8>
			{
				case BLINK_FIRST       : if(blink && (min || hour)) byte|=(1<<7); break;	
  d8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <blink>
  dc:	88 23       	and	r24, r24
  de:	69 f1       	breq	.+90     	; 0x13a <SPI+0xc8>
  e0:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <min>
  e4:	81 11       	cpse	r24, r1
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <SPI+0x7e>
  e8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <hour>
  ec:	88 23       	and	r24, r24
  ee:	29 f1       	breq	.+74     	; 0x13a <SPI+0xc8>
  f0:	30 68       	ori	r19, 0x80	; 128
  f2:	23 c0       	rjmp	.+70     	; 0x13a <SPI+0xc8>
				case BLINK_SECOND      : if(blink && hour)          byte|=(1<<7); break;
  f4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <blink>
  f8:	88 23       	and	r24, r24
  fa:	f9 f0       	breq	.+62     	; 0x13a <SPI+0xc8>
  fc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <hour>
 100:	88 23       	and	r24, r24
 102:	d9 f0       	breq	.+54     	; 0x13a <SPI+0xc8>
 104:	30 68       	ori	r19, 0x80	; 128
 106:	19 c0       	rjmp	.+50     	; 0x13a <SPI+0xc8>
				case CONVEER_SPI       : if(conveer == ON)          byte|=(1<<7); break;
 108:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <conveer>
 10c:	88 23       	and	r24, r24
 10e:	a9 f0       	breq	.+42     	; 0x13a <SPI+0xc8>
 110:	30 68       	ori	r19, 0x80	; 128
 112:	13 c0       	rjmp	.+38     	; 0x13a <SPI+0xc8>
				case SIGNAL_SPI        : if(signale == ON)          byte|=(1<<7); break;
 114:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <signale>
 118:	88 23       	and	r24, r24
 11a:	79 f0       	breq	.+30     	; 0x13a <SPI+0xc8>
 11c:	30 68       	ori	r19, 0x80	; 128
 11e:	0d c0       	rjmp	.+26     	; 0x13a <SPI+0xc8>
			}
		}
		else 
		{
		// ---------------------------------- show "OFF"
			 if (digit == 3)      byte = 0X3F;          
 120:	43 30       	cpi	r20, 0x03	; 3
 122:	31 f0       	breq	.+12     	; 0x130 <SPI+0xbe>
			 else if (digit == 2) byte = 0X71;
 124:	42 30       	cpi	r20, 0x02	; 2
 126:	31 f0       	breq	.+12     	; 0x134 <SPI+0xc2>
			 else if (digit == 1) byte = 0X71;
 128:	41 30       	cpi	r20, 0x01	; 1
 12a:	31 f4       	brne	.+12     	; 0x138 <SPI+0xc6>
 12c:	31 e7       	ldi	r19, 0x71	; 113
 12e:	05 c0       	rjmp	.+10     	; 0x13a <SPI+0xc8>
			}
		}
		else 
		{
		// ---------------------------------- show "OFF"
			 if (digit == 3)      byte = 0X3F;          
 130:	3f e3       	ldi	r19, 0x3F	; 63
 132:	03 c0       	rjmp	.+6      	; 0x13a <SPI+0xc8>
			 else if (digit == 2) byte = 0X71;
 134:	31 e7       	ldi	r19, 0x71	; 113
 136:	01 c0       	rjmp	.+2      	; 0x13a <SPI+0xc8>
			 else if (digit == 1) byte = 0X71;
			 else  byte = 0;
 138:	30 e0       	ldi	r19, 0x00	; 0
		else 
		{
		// ---------------------------------- show "OFF"
			 if (digit == 3)      byte = 0X3F;          
			 else if (digit == 2) byte = 0X71;
			 else if (digit == 1) byte = 0X71;
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	11 c0       	rjmp	.+34     	; 0x160 <SPI+0xee>
			 else  byte = 0;
		}
		//---------------------------------- send to SPI
			for (uint8_t c=0; c<8; c++)					  
			{
				if (byte&0x80)
 13e:	33 23       	and	r19, r19
 140:	24 f4       	brge	.+8      	; 0x14a <SPI+0xd8>
				{
					PORTD|=(1<<6);
 142:	92 b3       	in	r25, 0x12	; 18
 144:	90 64       	ori	r25, 0x40	; 64
 146:	92 bb       	out	0x12, r25	; 18
 148:	03 c0       	rjmp	.+6      	; 0x150 <SPI+0xde>
				}
				else
				{
					PORTD&=~(1<<6);
 14a:	92 b3       	in	r25, 0x12	; 18
 14c:	9f 7b       	andi	r25, 0xBF	; 191
 14e:	92 bb       	out	0x12, r25	; 18
				}
				byte = (byte<<1);
 150:	33 0f       	add	r19, r19
				PORTB|=(1<<0);
 152:	98 b3       	in	r25, 0x18	; 24
 154:	91 60       	ori	r25, 0x01	; 1
 156:	98 bb       	out	0x18, r25	; 24
				PORTB&=~(1<<0);
 158:	98 b3       	in	r25, 0x18	; 24
 15a:	9e 7f       	andi	r25, 0xFE	; 254
 15c:	98 bb       	out	0x18, r25	; 24
			 else if (digit == 2) byte = 0X71;
			 else if (digit == 1) byte = 0X71;
			 else  byte = 0;
		}
		//---------------------------------- send to SPI
			for (uint8_t c=0; c<8; c++)					  
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	28 30       	cpi	r18, 0x08	; 8
 162:	68 f3       	brcs	.-38     	; 0x13e <SPI+0xcc>


void SPI (uint8_t *numbers) 
{
	cli ();
	for (uint8_t digit = 0,byte = 0; digit<DIGITS_MAX; digit++) 
 164:	4f 5f       	subi	r20, 0xFF	; 255
 166:	46 30       	cpi	r20, 0x06	; 6
 168:	08 f4       	brcc	.+2      	; 0x16c <SPI+0xfa>
 16a:	87 cf       	rjmp	.-242    	; 0x7a <SPI+0x8>
				byte = (byte<<1);
				PORTB|=(1<<0);
				PORTB&=~(1<<0);
			}
	}
	PORTD|=(1<<7); 
 16c:	82 b3       	in	r24, 0x12	; 18
 16e:	80 68       	ori	r24, 0x80	; 128
 170:	82 bb       	out	0x12, r24	; 18
	PORTD&=~(1<<7);
 172:	82 b3       	in	r24, 0x12	; 18
 174:	8f 77       	andi	r24, 0x7F	; 127
 176:	82 bb       	out	0x12, r24	; 18
	sei();
 178:	78 94       	sei
 17a:	08 95       	ret

0000017c <set_digits_numbers>:
}
	


void set_digits_numbers(uint8_t *numbers)
{
 17c:	fc 01       	movw	r30, r24
	numbers[0]= setup == EDITING_SEC  && blink ? None : sek%10;
 17e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <setup>
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	21 f4       	brne	.+8      	; 0x18e <set_digits_numbers+0x12>
 186:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <blink>
 18a:	81 11       	cpse	r24, r1
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <set_digits_numbers+0x34>
 18e:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <sek>
 192:	9d ec       	ldi	r25, 0xCD	; 205
 194:	29 9f       	mul	r18, r25
 196:	91 2d       	mov	r25, r1
 198:	11 24       	eor	r1, r1
 19a:	96 95       	lsr	r25
 19c:	96 95       	lsr	r25
 19e:	96 95       	lsr	r25
 1a0:	99 0f       	add	r25, r25
 1a2:	89 2f       	mov	r24, r25
 1a4:	88 0f       	add	r24, r24
 1a6:	88 0f       	add	r24, r24
 1a8:	98 0f       	add	r25, r24
 1aa:	29 1b       	sub	r18, r25
 1ac:	92 2f       	mov	r25, r18
 1ae:	01 c0       	rjmp	.+2      	; 0x1b2 <set_digits_numbers+0x36>
 1b0:	9b e0       	ldi	r25, 0x0B	; 11
 1b2:	90 83       	st	Z, r25
	numbers[1]= setup == EDITING_SEC  && blink ? None : sek/10;
 1b4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <setup>
 1b8:	82 30       	cpi	r24, 0x02	; 2
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <set_digits_numbers+0x48>
 1bc:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <blink>
 1c0:	91 11       	cpse	r25, r1
 1c2:	0a c0       	rjmp	.+20     	; 0x1d8 <set_digits_numbers+0x5c>
 1c4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sek>
 1c8:	2d ec       	ldi	r18, 0xCD	; 205
 1ca:	92 9f       	mul	r25, r18
 1cc:	91 2d       	mov	r25, r1
 1ce:	11 24       	eor	r1, r1
 1d0:	96 95       	lsr	r25
 1d2:	96 95       	lsr	r25
 1d4:	96 95       	lsr	r25
 1d6:	01 c0       	rjmp	.+2      	; 0x1da <set_digits_numbers+0x5e>
 1d8:	9b e0       	ldi	r25, 0x0B	; 11
 1da:	91 83       	std	Z+1, r25	; 0x01
	numbers[2]= setup == EDITING_MIN  && blink ? None : min%10;
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	21 f4       	brne	.+8      	; 0x1e8 <set_digits_numbers+0x6c>
 1e0:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <blink>
 1e4:	91 11       	cpse	r25, r1
 1e6:	11 c0       	rjmp	.+34     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 1e8:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <min>
 1ec:	9d ec       	ldi	r25, 0xCD	; 205
 1ee:	39 9f       	mul	r19, r25
 1f0:	91 2d       	mov	r25, r1
 1f2:	11 24       	eor	r1, r1
 1f4:	96 95       	lsr	r25
 1f6:	96 95       	lsr	r25
 1f8:	96 95       	lsr	r25
 1fa:	99 0f       	add	r25, r25
 1fc:	29 2f       	mov	r18, r25
 1fe:	22 0f       	add	r18, r18
 200:	22 0f       	add	r18, r18
 202:	92 0f       	add	r25, r18
 204:	39 1b       	sub	r19, r25
 206:	93 2f       	mov	r25, r19
 208:	01 c0       	rjmp	.+2      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 20a:	9b e0       	ldi	r25, 0x0B	; 11
 20c:	92 83       	std	Z+2, r25	; 0x02
	numbers[3]= setup == EDITING_MIN  && blink ? None : min/10;
 20e:	83 30       	cpi	r24, 0x03	; 3
 210:	21 f4       	brne	.+8      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 212:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <blink>
 216:	91 11       	cpse	r25, r1
 218:	0a c0       	rjmp	.+20     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 21a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <min>
 21e:	2d ec       	ldi	r18, 0xCD	; 205
 220:	92 9f       	mul	r25, r18
 222:	91 2d       	mov	r25, r1
 224:	11 24       	eor	r1, r1
 226:	96 95       	lsr	r25
 228:	96 95       	lsr	r25
 22a:	96 95       	lsr	r25
 22c:	01 c0       	rjmp	.+2      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 22e:	9b e0       	ldi	r25, 0x0B	; 11
 230:	93 83       	std	Z+3, r25	; 0x03
	numbers[4]= setup == EDITING_HOUR && blink ? None : hour%10;
 232:	84 30       	cpi	r24, 0x04	; 4
 234:	21 f4       	brne	.+8      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 236:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <blink>
 23a:	91 11       	cpse	r25, r1
 23c:	11 c0       	rjmp	.+34     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 23e:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <hour>
 242:	9d ec       	ldi	r25, 0xCD	; 205
 244:	39 9f       	mul	r19, r25
 246:	91 2d       	mov	r25, r1
 248:	11 24       	eor	r1, r1
 24a:	96 95       	lsr	r25
 24c:	96 95       	lsr	r25
 24e:	96 95       	lsr	r25
 250:	99 0f       	add	r25, r25
 252:	29 2f       	mov	r18, r25
 254:	22 0f       	add	r18, r18
 256:	22 0f       	add	r18, r18
 258:	92 0f       	add	r25, r18
 25a:	39 1b       	sub	r19, r25
 25c:	93 2f       	mov	r25, r19
 25e:	01 c0       	rjmp	.+2      	; 0x262 <__EEPROM_REGION_LENGTH__+0x62>
 260:	9b e0       	ldi	r25, 0x0B	; 11
 262:	94 83       	std	Z+4, r25	; 0x04
	numbers[5]= setup == EDITING_HOUR && blink ? None : hour/10;
 264:	84 30       	cpi	r24, 0x04	; 4
 266:	21 f4       	brne	.+8      	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 268:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <blink>
 26c:	81 11       	cpse	r24, r1
 26e:	0a c0       	rjmp	.+20     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
 270:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <hour>
 274:	9d ec       	ldi	r25, 0xCD	; 205
 276:	89 9f       	mul	r24, r25
 278:	81 2d       	mov	r24, r1
 27a:	11 24       	eor	r1, r1
 27c:	86 95       	lsr	r24
 27e:	86 95       	lsr	r24
 280:	86 95       	lsr	r24
 282:	01 c0       	rjmp	.+2      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
 284:	8b e0       	ldi	r24, 0x0B	; 11
 286:	85 83       	std	Z+5, r24	; 0x05
	
	if (timer_run)
 288:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timer_run>
 28c:	81 11       	cpse	r24, r1
 28e:	05 c0       	rjmp	.+10     	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
 290:	08 95       	ret
	{
		for (uint8_t digit=5; digit && numbers[digit]; digit--)
		{
			numbers[digit] = None;     
 292:	8b e0       	ldi	r24, 0x0B	; 11
 294:	8c 93       	st	X, r24
	numbers[4]= setup == EDITING_HOUR && blink ? None : hour%10;
	numbers[5]= setup == EDITING_HOUR && blink ? None : hour/10;
	
	if (timer_run)
	{
		for (uint8_t digit=5; digit && numbers[digit]; digit--)
 296:	91 50       	subi	r25, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <__EEPROM_REGION_LENGTH__+0x9c>
 29a:	95 e0       	ldi	r25, 0x05	; 5
 29c:	99 23       	and	r25, r25
 29e:	31 f0       	breq	.+12     	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
 2a0:	df 01       	movw	r26, r30
 2a2:	a9 0f       	add	r26, r25
 2a4:	b1 1d       	adc	r27, r1
 2a6:	8c 91       	ld	r24, X
 2a8:	81 11       	cpse	r24, r1
 2aa:	f3 cf       	rjmp	.-26     	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 2ac:	08 95       	ret

000002ae <EEPROM_WRITE>:



void EEPROM_WRITE (uint16_t uiAddress, uint8_t ucData)
{
	while (EECR&(1<<EEWE));
 2ae:	e1 99       	sbic	0x1c, 1	; 28
 2b0:	fe cf       	rjmp	.-4      	; 0x2ae <EEPROM_WRITE>
	EEAR = uiAddress;
 2b2:	9f bb       	out	0x1f, r25	; 31
 2b4:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
 2b6:	6d bb       	out	0x1d, r22	; 29
	EECR |= (1<<EEMWE);
 2b8:	8c b3       	in	r24, 0x1c	; 28
 2ba:	84 60       	ori	r24, 0x04	; 4
 2bc:	8c bb       	out	0x1c, r24	; 28
	EECR |= (1<<EEWE);
 2be:	8c b3       	in	r24, 0x1c	; 28
 2c0:	82 60       	ori	r24, 0x02	; 2
 2c2:	8c bb       	out	0x1c, r24	; 28
 2c4:	08 95       	ret

000002c6 <EEPROM_read>:
}


uint8_t EEPROM_read(uint16_t uiAddress)
{
	while(EECR & (1<<EEWE));
 2c6:	e1 99       	sbic	0x1c, 1	; 28
 2c8:	fe cf       	rjmp	.-4      	; 0x2c6 <EEPROM_read>
	EEAR = uiAddress;
 2ca:	9f bb       	out	0x1f, r25	; 31
 2cc:	8e bb       	out	0x1e, r24	; 30
	EECR |= (1<<EERE);
 2ce:	8c b3       	in	r24, 0x1c	; 28
 2d0:	81 60       	ori	r24, 0x01	; 1
 2d2:	8c bb       	out	0x1c, r24	; 28
	return EEDR;
 2d4:	8d b3       	in	r24, 0x1d	; 29
}
 2d6:	08 95       	ret

000002d8 <read_m>:

void read_m (void)
{
 2d8:	cf 93       	push	r28
	sek  = EEPROM_read(ADDR_SEC)%TO_DEC;
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	f3 df       	rcall	.-26     	; 0x2c6 <EEPROM_read>
 2e0:	cd ec       	ldi	r28, 0xCD	; 205
 2e2:	8c 9f       	mul	r24, r28
 2e4:	91 2d       	mov	r25, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	96 95       	lsr	r25
 2ea:	96 95       	lsr	r25
 2ec:	96 95       	lsr	r25
 2ee:	99 0f       	add	r25, r25
 2f0:	29 2f       	mov	r18, r25
 2f2:	22 0f       	add	r18, r18
 2f4:	22 0f       	add	r18, r18
 2f6:	92 0f       	add	r25, r18
 2f8:	89 1b       	sub	r24, r25
 2fa:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <sek>
	min  = EEPROM_read(ADDR_MIN)%TO_DEC;
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	e1 df       	rcall	.-62     	; 0x2c6 <EEPROM_read>
 304:	8c 9f       	mul	r24, r28
 306:	91 2d       	mov	r25, r1
 308:	11 24       	eor	r1, r1
 30a:	96 95       	lsr	r25
 30c:	96 95       	lsr	r25
 30e:	96 95       	lsr	r25
 310:	99 0f       	add	r25, r25
 312:	29 2f       	mov	r18, r25
 314:	22 0f       	add	r18, r18
 316:	22 0f       	add	r18, r18
 318:	92 0f       	add	r25, r18
 31a:	89 1b       	sub	r24, r25
 31c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <min>
	hour = EEPROM_read(ADDR_HOUR)%TO_DEC;
 320:	83 e0       	ldi	r24, 0x03	; 3
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	d0 df       	rcall	.-96     	; 0x2c6 <EEPROM_read>
 326:	8c 9f       	mul	r24, r28
 328:	91 2d       	mov	r25, r1
 32a:	11 24       	eor	r1, r1
 32c:	96 95       	lsr	r25
 32e:	96 95       	lsr	r25
 330:	96 95       	lsr	r25
 332:	99 0f       	add	r25, r25
 334:	29 2f       	mov	r18, r25
 336:	22 0f       	add	r18, r18
 338:	22 0f       	add	r18, r18
 33a:	92 0f       	add	r25, r18
 33c:	89 1b       	sub	r24, r25
 33e:	98 2f       	mov	r25, r24
 340:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <hour>
	if (min || hour) signal_allowed = TRUE;
 344:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <min>
 348:	81 11       	cpse	r24, r1
 34a:	02 c0       	rjmp	.+4      	; 0x350 <read_m+0x78>
 34c:	99 23       	and	r25, r25
 34e:	21 f0       	breq	.+8      	; 0x358 <read_m+0x80>
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <signal_allowed>
 356:	02 c0       	rjmp	.+4      	; 0x35c <read_m+0x84>
	else signal_allowed = FALSE;
 358:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <signal_allowed>
}
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <timer_init>:


void timer_init (void)
{
	TCCR2 = 0; //tick 1/2 sek
 360:	15 bc       	out	0x25, r1	; 37
	TCCR2 |=(1<<CS22);
 362:	85 b5       	in	r24, 0x25	; 37
 364:	84 60       	ori	r24, 0x04	; 4
 366:	85 bd       	out	0x25, r24	; 37
	ASSR|=(1<<AS2);
 368:	82 b5       	in	r24, 0x22	; 34
 36a:	88 60       	ori	r24, 0x08	; 8
 36c:	82 bd       	out	0x22, r24	; 34
	TIMSK |=(1<<TOIE2);
 36e:	89 b7       	in	r24, 0x39	; 57
 370:	80 64       	ori	r24, 0x40	; 64
 372:	89 bf       	out	0x39, r24	; 57
 374:	08 95       	ret

00000376 <port_ini>:


void port_ini (void)
{
	//---------------------- program SPI : 0-6 bit - show number, 7bit - control load
	DDRD|=(1<<6);      //DS
 376:	81 b3       	in	r24, 0x11	; 17
 378:	80 64       	ori	r24, 0x40	; 64
 37a:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<6);   //
 37c:	82 b3       	in	r24, 0x12	; 18
 37e:	8f 7b       	andi	r24, 0xBF	; 191
 380:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<0);     //clk
 382:	87 b3       	in	r24, 0x17	; 23
 384:	81 60       	ori	r24, 0x01	; 1
 386:	87 bb       	out	0x17, r24	; 23
	PORTB&=~(1<<0);  //
 388:	88 b3       	in	r24, 0x18	; 24
 38a:	8e 7f       	andi	r24, 0xFE	; 254
 38c:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<7);     // ST 
 38e:	81 b3       	in	r24, 0x11	; 17
 390:	80 68       	ori	r24, 0x80	; 128
 392:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<7);  //
 394:	82 b3       	in	r24, 0x12	; 18
 396:	8f 77       	andi	r24, 0x7F	; 127
 398:	82 bb       	out	0x12, r24	; 18
	DDRB|=(1<<1);    //MR 
 39a:	87 b3       	in	r24, 0x17	; 23
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	87 bb       	out	0x17, r24	; 23
	PORTB|=(1<<1);  // +
 3a0:	88 b3       	in	r24, 0x18	; 24
 3a2:	82 60       	ori	r24, 0x02	; 2
 3a4:	88 bb       	out	0x18, r24	; 24
	DDRD|=(1<<5);    //OE
 3a6:	81 b3       	in	r24, 0x11	; 17
 3a8:	80 62       	ori	r24, 0x20	; 32
 3aa:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<5); // -
 3ac:	82 b3       	in	r24, 0x12	; 18
 3ae:	8f 7d       	andi	r24, 0xDF	; 223
 3b0:	82 bb       	out	0x12, r24	; 18

	//-------------------------- clear registers
	for (int x=0; x<50; x++) 
 3b2:	20 e0       	ldi	r18, 0x00	; 0
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <port_ini+0x52>
	{
		PORTB|=(1<<0);
 3b8:	88 b3       	in	r24, 0x18	; 24
 3ba:	81 60       	ori	r24, 0x01	; 1
 3bc:	88 bb       	out	0x18, r24	; 24
		PORTB&=~(1<<0);
 3be:	88 b3       	in	r24, 0x18	; 24
 3c0:	8e 7f       	andi	r24, 0xFE	; 254
 3c2:	88 bb       	out	0x18, r24	; 24
	PORTB|=(1<<1);  // +
	DDRD|=(1<<5);    //OE
	PORTD&=~(1<<5); // -

	//-------------------------- clear registers
	for (int x=0; x<50; x++) 
 3c4:	2f 5f       	subi	r18, 0xFF	; 255
 3c6:	3f 4f       	sbci	r19, 0xFF	; 255
 3c8:	22 33       	cpi	r18, 0x32	; 50
 3ca:	31 05       	cpc	r19, r1
 3cc:	ac f3       	brlt	.-22     	; 0x3b8 <port_ini+0x42>
	{
		PORTB|=(1<<0);
		PORTB&=~(1<<0);
	}
	PORTD |= (1<<7); 
 3ce:	82 b3       	in	r24, 0x12	; 18
 3d0:	80 68       	ori	r24, 0x80	; 128
 3d2:	82 bb       	out	0x12, r24	; 18
	PORTD &= ~(1<<7);
 3d4:	82 b3       	in	r24, 0x12	; 18
 3d6:	8f 77       	andi	r24, 0x7F	; 127
 3d8:	82 bb       	out	0x12, r24	; 18
	//----------------------------- port input

	DDRC&=~(1<<2); //button SET
 3da:	84 b3       	in	r24, 0x14	; 20
 3dc:	8b 7f       	andi	r24, 0xFB	; 251
 3de:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<3); //button  start
 3e0:	84 b3       	in	r24, 0x14	; 20
 3e2:	87 7f       	andi	r24, 0xF7	; 247
 3e4:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<4); //button pause
 3e6:	84 b3       	in	r24, 0x14	; 20
 3e8:	8f 7e       	andi	r24, 0xEF	; 239
 3ea:	84 bb       	out	0x14, r24	; 20
	DDRC&=~(1<<5); //voltage
 3ec:	84 b3       	in	r24, 0x14	; 20
 3ee:	8f 7d       	andi	r24, 0xDF	; 223
 3f0:	84 bb       	out	0x14, r24	; 20
	
	//--------------------------- pin pull up
	PORTC|=(1<<2); 
 3f2:	85 b3       	in	r24, 0x15	; 21
 3f4:	84 60       	ori	r24, 0x04	; 4
 3f6:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<3); 
 3f8:	85 b3       	in	r24, 0x15	; 21
 3fa:	88 60       	ori	r24, 0x08	; 8
 3fc:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<4); 
 3fe:	85 b3       	in	r24, 0x15	; 21
 400:	80 61       	ori	r24, 0x10	; 16
 402:	85 bb       	out	0x15, r24	; 21
	PORTC|=(1<<5); 
 404:	85 b3       	in	r24, 0x15	; 21
 406:	80 62       	ori	r24, 0x20	; 32
 408:	85 bb       	out	0x15, r24	; 21
 40a:	08 95       	ret

0000040c <__vector_4>:
}



ISR (TIMER2_OVF_vect)
{
 40c:	1f 92       	push	r1
 40e:	0f 92       	push	r0
 410:	0f b6       	in	r0, 0x3f	; 63
 412:	0f 92       	push	r0
 414:	11 24       	eor	r1, r1
 416:	2f 93       	push	r18
 418:	3f 93       	push	r19
 41a:	4f 93       	push	r20
 41c:	5f 93       	push	r21
 41e:	6f 93       	push	r22
 420:	7f 93       	push	r23
 422:	8f 93       	push	r24
 424:	9f 93       	push	r25
 426:	af 93       	push	r26
 428:	bf 93       	push	r27
 42a:	ef 93       	push	r30
 42c:	ff 93       	push	r31
	static uint8_t timing=0;
	if (voltage_f)
 42e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 432:	88 23       	and	r24, r24
 434:	09 f4       	brne	.+2      	; 0x438 <__vector_4+0x2c>
 436:	5e c0       	rjmp	.+188    	; 0x4f4 <__stack+0x95>
	{
		blink = !blink;
 438:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <blink>
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	89 27       	eor	r24, r25
 440:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <blink>
		if (timer_run)
 444:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <timer_run>
 448:	88 23       	and	r24, r24
 44a:	09 f4       	brne	.+2      	; 0x44e <__vector_4+0x42>
 44c:	58 c0       	rjmp	.+176    	; 0x4fe <__stack+0x9f>
		{
			if (min==0 && hour==0 && sek == SIGNAL_TO_LOAD_ON && signal_allowed && signale == OFF) signale = ON;
 44e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <min>
 452:	81 11       	cpse	r24, r1
 454:	14 c0       	rjmp	.+40     	; 0x47e <__stack+0x1f>
 456:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <hour>
 45a:	91 11       	cpse	r25, r1
 45c:	10 c0       	rjmp	.+32     	; 0x47e <__stack+0x1f>
 45e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sek>
 462:	9a 30       	cpi	r25, 0x0A	; 10
 464:	61 f4       	brne	.+24     	; 0x47e <__stack+0x1f>
 466:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <signal_allowed>
 46a:	99 23       	and	r25, r25
 46c:	41 f0       	breq	.+16     	; 0x47e <__stack+0x1f>
 46e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <signale>
 472:	91 11       	cpse	r25, r1
 474:	04 c0       	rjmp	.+8      	; 0x47e <__stack+0x1f>
 476:	91 e0       	ldi	r25, 0x01	; 1
 478:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <signale>
 47c:	0c c0       	rjmp	.+24     	; 0x496 <__stack+0x37>
			else if (min==0 && hour==0 && sek<6) signale = OFF;
 47e:	81 11       	cpse	r24, r1
 480:	0a c0       	rjmp	.+20     	; 0x496 <__stack+0x37>
 482:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <hour>
 486:	91 11       	cpse	r25, r1
 488:	06 c0       	rjmp	.+12     	; 0x496 <__stack+0x37>
 48a:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <sek>
 48e:	96 30       	cpi	r25, 0x06	; 6
 490:	10 f4       	brcc	.+4      	; 0x496 <__stack+0x37>
 492:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <signale>
			if (min == 0 && hour == 0 && sek == 0)
 496:	81 11       	cpse	r24, r1
 498:	23 c0       	rjmp	.+70     	; 0x4e0 <__stack+0x81>
 49a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <hour>
 49e:	81 11       	cpse	r24, r1
 4a0:	1f c0       	rjmp	.+62     	; 0x4e0 <__stack+0x81>
 4a2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sek>
 4a6:	81 11       	cpse	r24, r1
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <__stack+0x81>
			{ 
				if (timing == 0)
 4aa:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <timing.1891>
 4ae:	81 11       	cpse	r24, r1
 4b0:	04 c0       	rjmp	.+8      	; 0x4ba <__stack+0x5b>
				{
					conveer = ON;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <conveer>
 4b8:	0d c0       	rjmp	.+26     	; 0x4d4 <__stack+0x75>
				}
				else if(timing == 3)
 4ba:	83 30       	cpi	r24, 0x03	; 3
 4bc:	19 f4       	brne	.+6      	; 0x4c4 <__stack+0x65>
				{
					conveer = OFF;
 4be:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <conveer>
 4c2:	08 c0       	rjmp	.+16     	; 0x4d4 <__stack+0x75>
				}
				else if (timing > 44)
 4c4:	8d 32       	cpi	r24, 0x2D	; 45
 4c6:	30 f0       	brcs	.+12     	; 0x4d4 <__stack+0x75>
				{
					read_m();
 4c8:	07 df       	rcall	.-498    	; 0x2d8 <read_m>
					timing = 0;
 4ca:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <timing.1891>
					blink = TRUE;
 4ce:	81 e0       	ldi	r24, 0x01	; 1
 4d0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <blink>
				}
				timing++;
 4d4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <timing.1891>
 4d8:	8f 5f       	subi	r24, 0xFF	; 255
 4da:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <timing.1891>
 4de:	0f c0       	rjmp	.+30     	; 0x4fe <__stack+0x9f>
			}
			else if(blink) 
 4e0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <blink>
 4e4:	88 23       	and	r24, r24
 4e6:	59 f0       	breq	.+22     	; 0x4fe <__stack+0x9f>
			{
				sek--;
 4e8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sek>
 4ec:	81 50       	subi	r24, 0x01	; 1
 4ee:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <sek>
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <__stack+0x9f>
					}
				}
			}
		}
	}
	else if(conveer == ON)
 4f4:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <conveer>
 4f8:	81 11       	cpse	r24, r1
	{
		conveer = OFF;
 4fa:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <conveer>
	}
}
 4fe:	ff 91       	pop	r31
 500:	ef 91       	pop	r30
 502:	bf 91       	pop	r27
 504:	af 91       	pop	r26
 506:	9f 91       	pop	r25
 508:	8f 91       	pop	r24
 50a:	7f 91       	pop	r23
 50c:	6f 91       	pop	r22
 50e:	5f 91       	pop	r21
 510:	4f 91       	pop	r20
 512:	3f 91       	pop	r19
 514:	2f 91       	pop	r18
 516:	0f 90       	pop	r0
 518:	0f be       	out	0x3f, r0	; 63
 51a:	0f 90       	pop	r0
 51c:	1f 90       	pop	r1
 51e:	18 95       	reti

00000520 <get_button>:
			
uint8_t get_button (void) 
{
	static uint8_t active_button = UNPRESS;
	static uint16_t count_volt=0, count=0;
	if ( voltage_f != voltage_state )
 520:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 524:	83 b3       	in	r24, 0x13	; 19
 526:	82 95       	swap	r24
 528:	86 95       	lsr	r24
 52a:	87 70       	andi	r24, 0x07	; 7
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	89 27       	eor	r24, r25
 530:	81 70       	andi	r24, 0x01	; 1
 532:	28 17       	cp	r18, r24
 534:	e1 f0       	breq	.+56     	; 0x56e <get_button+0x4e>
	{
		if (count_volt<RESPONSE)
 536:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count_volt.1896>
 53a:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count_volt.1896+0x1>
 53e:	88 35       	cpi	r24, 0x58	; 88
 540:	22 e0       	ldi	r18, 0x02	; 2
 542:	92 07       	cpc	r25, r18
 544:	30 f4       	brcc	.+12     	; 0x552 <get_button+0x32>
		{
			count_volt++;
 546:	01 96       	adiw	r24, 0x01	; 1
 548:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <count_volt.1896+0x1>
 54c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count_volt.1896>
 550:	19 c0       	rjmp	.+50     	; 0x584 <get_button+0x64>
		}
		else 
		{
			voltage_f = voltage_state; 
 552:	83 b3       	in	r24, 0x13	; 19
 554:	82 95       	swap	r24
 556:	86 95       	lsr	r24
 558:	87 70       	andi	r24, 0x07	; 7
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	89 27       	eor	r24, r25
 55e:	81 70       	andi	r24, 0x01	; 1
 560:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			count_volt = 0;
 564:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <count_volt.1896+0x1>
 568:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count_volt.1896>
 56c:	0b c0       	rjmp	.+22     	; 0x584 <get_button+0x64>
		}
	}
	else if (count_volt > 0)
 56e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count_volt.1896>
 572:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <count_volt.1896+0x1>
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	29 f0       	breq	.+10     	; 0x584 <get_button+0x64>
	{
		count_volt--;
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <count_volt.1896+0x1>
 580:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count_volt.1896>
	} 	
	
	if(count == 0)active_button = UNPRESS;
 584:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count.1897>
 588:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <count.1897+0x1>
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	11 f4       	brne	.+4      	; 0x594 <get_button+0x74>
 590:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
	if(active_button == UNPRESS)
 594:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
 598:	21 11       	cpse	r18, r1
 59a:	11 c0       	rjmp	.+34     	; 0x5be <get_button+0x9e>
	{
		if(buton_set)active_button=PRESS_SETTING;
 59c:	9c 99       	sbic	0x13, 4	; 19
 59e:	04 c0       	rjmp	.+8      	; 0x5a8 <get_button+0x88>
 5a0:	23 e0       	ldi	r18, 0x03	; 3
 5a2:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
 5a6:	0b c0       	rjmp	.+22     	; 0x5be <get_button+0x9e>
		else if(buton_start)active_button=PRESS_START;
 5a8:	9b 99       	sbic	0x13, 3	; 19
 5aa:	04 c0       	rjmp	.+8      	; 0x5b4 <get_button+0x94>
 5ac:	22 e0       	ldi	r18, 0x02	; 2
 5ae:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <get_button+0x9e>
		else if(buton_stop)active_button=PRESS_STOP;
 5b4:	9a 99       	sbic	0x13, 2	; 19
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <get_button+0x9e>
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
	}

	if((buton_set && active_button==PRESS_SETTING) || (buton_start && active_button==PRESS_START) || (buton_stop && active_button==PRESS_STOP))
 5be:	9c 99       	sbic	0x13, 4	; 19
 5c0:	04 c0       	rjmp	.+8      	; 0x5ca <get_button+0xaa>
 5c2:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
 5c6:	23 30       	cpi	r18, 0x03	; 3
 5c8:	61 f0       	breq	.+24     	; 0x5e2 <get_button+0xc2>
 5ca:	9b 99       	sbic	0x13, 3	; 19
 5cc:	04 c0       	rjmp	.+8      	; 0x5d6 <get_button+0xb6>
 5ce:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
 5d2:	22 30       	cpi	r18, 0x02	; 2
 5d4:	31 f0       	breq	.+12     	; 0x5e2 <get_button+0xc2>
 5d6:	9a 99       	sbic	0x13, 2	; 19
 5d8:	16 c0       	rjmp	.+44     	; 0x606 <get_button+0xe6>
 5da:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__data_end>
 5de:	21 30       	cpi	r18, 0x01	; 1
 5e0:	91 f4       	brne	.+36     	; 0x606 <get_button+0xe6>
	{
		if(count > RESPONSE)
 5e2:	89 35       	cpi	r24, 0x59	; 89
 5e4:	22 e0       	ldi	r18, 0x02	; 2
 5e6:	92 07       	cpc	r25, r18
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <get_button+0xd8>
		{
			count = 0;
 5ea:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <count.1897+0x1>
 5ee:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count.1897>
			return active_button;
 5f2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 5f6:	08 95       	ret
		}
		count++;
 5f8:	01 96       	adiw	r24, 0x01	; 1
 5fa:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <count.1897+0x1>
 5fe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count.1897>
	}
	else if(count)
	{
		count--;
	}
	return UNPRESS;	
 602:	80 e0       	ldi	r24, 0x00	; 0
		if(count > RESPONSE)
		{
			count = 0;
			return active_button;
		}
		count++;
 604:	08 95       	ret
	}
	else if(count)
 606:	00 97       	sbiw	r24, 0x00	; 0
 608:	39 f0       	breq	.+14     	; 0x618 <get_button+0xf8>
	{
		count--;
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <count.1897+0x1>
 610:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count.1897>
	}
	return UNPRESS;	
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	08 95       	ret
 618:	80 e0       	ldi	r24, 0x00	; 0
}
 61a:	08 95       	ret

0000061c <control>:
			
									
void control(const uint8_t but) 
{
	if (timer_run) 
 61c:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <timer_run>
 620:	99 23       	and	r25, r25
 622:	89 f0       	breq	.+34     	; 0x646 <control+0x2a>
	{			
		if (but == PRESS_STOP)timer_run = OFF;
 624:	81 30       	cpi	r24, 0x01	; 1
 626:	11 f4       	brne	.+4      	; 0x62c <control+0x10>
 628:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <timer_run>
		if (signale) signale = OFF;
 62c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <signale>
 630:	81 11       	cpse	r24, r1
 632:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <signale>
		if (conveer) conveer = OFF;
 636:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <conveer>
 63a:	88 23       	and	r24, r24
 63c:	09 f4       	brne	.+2      	; 0x640 <control+0x24>
 63e:	92 c0       	rjmp	.+292    	; 0x764 <control+0x148>
 640:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <conveer>
 644:	08 95       	ret
	}
	else 
	{
		if (but == PRESS_STOP) 
 646:	81 30       	cpi	r24, 0x01	; 1
 648:	d9 f4       	brne	.+54     	; 0x680 <control+0x64>
		{
			if(setup == EDITING_SEC) 
 64a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <setup>
 64e:	82 30       	cpi	r24, 0x02	; 2
 650:	31 f4       	brne	.+12     	; 0x65e <control+0x42>
			{
				sek--;
 652:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sek>
 656:	81 50       	subi	r24, 0x01	; 1
 658:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <sek>
 65c:	08 95       	ret
				if (sek<0) sek=59;
			}											
			else if(setup == EDITING_MIN)
 65e:	83 30       	cpi	r24, 0x03	; 3
 660:	31 f4       	brne	.+12     	; 0x66e <control+0x52>
			{
				min--;
 662:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <min>
 666:	81 50       	subi	r24, 0x01	; 1
 668:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <min>
 66c:	08 95       	ret
				if (min<0) min=59;
			}										
			else if(setup == EDITING_HOUR)
 66e:	84 30       	cpi	r24, 0x04	; 4
 670:	09 f0       	breq	.+2      	; 0x674 <control+0x58>
 672:	78 c0       	rjmp	.+240    	; 0x764 <control+0x148>
			{
				hour--;
 674:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <hour>
 678:	81 50       	subi	r24, 0x01	; 1
 67a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <hour>
 67e:	08 95       	ret
				if (hour<0)hour=23;
			}
		}													
		else if (but == PRESS_START)
 680:	82 30       	cpi	r24, 0x02	; 2
 682:	91 f5       	brne	.+100    	; 0x6e8 <control+0xcc>
		{
			if (setup == READY)
 684:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <setup>
 688:	81 11       	cpse	r24, r1
 68a:	06 c0       	rjmp	.+12     	; 0x698 <control+0x7c>
			{
				timer_run = ON;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <timer_run>
				blink = ON;
 692:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <blink>
 696:	08 95       	ret
			}														
			else if (setup == EDITING_SEC)
 698:	82 30       	cpi	r24, 0x02	; 2
 69a:	59 f4       	brne	.+22     	; 0x6b2 <control+0x96>
			{
				sek++;
 69c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sek>
 6a0:	8f 5f       	subi	r24, 0xFF	; 255
 6a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <sek>
				if (sek>59)sek = 0;
 6a6:	8c 33       	cpi	r24, 0x3C	; 60
 6a8:	08 f4       	brcc	.+2      	; 0x6ac <control+0x90>
 6aa:	5c c0       	rjmp	.+184    	; 0x764 <control+0x148>
 6ac:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <sek>
 6b0:	08 95       	ret
			}													
			else if (setup==EDITING_MIN)
 6b2:	83 30       	cpi	r24, 0x03	; 3
 6b4:	59 f4       	brne	.+22     	; 0x6cc <control+0xb0>
			{
				min++;
 6b6:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <min>
 6ba:	8f 5f       	subi	r24, 0xFF	; 255
 6bc:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <min>
				if (min>59)min = 0;
 6c0:	8c 33       	cpi	r24, 0x3C	; 60
 6c2:	08 f4       	brcc	.+2      	; 0x6c6 <control+0xaa>
 6c4:	4f c0       	rjmp	.+158    	; 0x764 <control+0x148>
 6c6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <min>
 6ca:	08 95       	ret
			}														
			else if(setup==EDITING_HOUR) 
 6cc:	84 30       	cpi	r24, 0x04	; 4
 6ce:	09 f0       	breq	.+2      	; 0x6d2 <control+0xb6>
 6d0:	49 c0       	rjmp	.+146    	; 0x764 <control+0x148>
			{
				hour++;
 6d2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <hour>
 6d6:	8f 5f       	subi	r24, 0xFF	; 255
 6d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <hour>
				if (hour>23)hour = 0;
 6dc:	88 31       	cpi	r24, 0x18	; 24
 6de:	08 f4       	brcc	.+2      	; 0x6e2 <control+0xc6>
 6e0:	41 c0       	rjmp	.+130    	; 0x764 <control+0x148>
 6e2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <hour>
 6e6:	08 95       	ret
			}
		}															
		else if (but == PRESS_SETTING)
 6e8:	83 30       	cpi	r24, 0x03	; 3
 6ea:	e1 f5       	brne	.+120    	; 0x764 <control+0x148>
		{
			setup++;
 6ec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <setup>
 6f0:	8f 5f       	subi	r24, 0xFF	; 255
 6f2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <setup>
			if (setup == READ_SETUP)
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	29 f4       	brne	.+10     	; 0x704 <control+0xe8>
			{
				read_m();
 6fa:	ee dd       	rcall	.-1060   	; 0x2d8 <read_m>
				setup = EDITING_SEC;
 6fc:	82 e0       	ldi	r24, 0x02	; 2
 6fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <setup>
 702:	08 95       	ret
			}
			else if(setup == WRITE_SETUP)
 704:	85 30       	cpi	r24, 0x05	; 5
 706:	71 f5       	brne	.+92     	; 0x764 <control+0x148>
			{
				cli();
 708:	f8 94       	cli
				if (min || hour) signal_allowed = TRUE;
 70a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <min>
 70e:	81 11       	cpse	r24, r1
 710:	04 c0       	rjmp	.+8      	; 0x71a <control+0xfe>
 712:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <hour>
 716:	99 23       	and	r25, r25
 718:	21 f0       	breq	.+8      	; 0x722 <control+0x106>
 71a:	91 e0       	ldi	r25, 0x01	; 1
 71c:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <signal_allowed>
 720:	02 c0       	rjmp	.+4      	; 0x726 <control+0x10a>
				else signal_allowed = FALSE;
 722:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <signal_allowed>
				if(hour == 0 && min == 0 && sek < ALLOW_MINIMUM_DELAY_TIMER)sek = ALLOW_MINIMUM_DELAY_TIMER;
 726:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <hour>
 72a:	91 11       	cpse	r25, r1
 72c:	09 c0       	rjmp	.+18     	; 0x740 <control+0x124>
 72e:	81 11       	cpse	r24, r1
 730:	07 c0       	rjmp	.+14     	; 0x740 <control+0x124>
 732:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <sek>
 736:	8a 30       	cpi	r24, 0x0A	; 10
 738:	18 f4       	brcc	.+6      	; 0x740 <control+0x124>
 73a:	8a e0       	ldi	r24, 0x0A	; 10
 73c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <sek>
				EEPROM_WRITE(ADDR_SEC, sek);
 740:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <sek>
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	b2 dd       	rcall	.-1180   	; 0x2ae <EEPROM_WRITE>
				EEPROM_WRITE(ADDR_MIN, min);
 74a:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <min>
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	ad dd       	rcall	.-1190   	; 0x2ae <EEPROM_WRITE>
				EEPROM_WRITE(ADDR_HOUR, hour);
 754:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <hour>
 758:	83 e0       	ldi	r24, 0x03	; 3
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	a8 dd       	rcall	.-1200   	; 0x2ae <EEPROM_WRITE>
				setup = READY;
 75e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <setup>
				sei();
 762:	78 94       	sei
 764:	08 95       	ret

00000766 <main>:
#include "main.h"


int main (void)
{
 766:	cf 93       	push	r28
 768:	df 93       	push	r29
 76a:	00 d0       	rcall	.+0      	; 0x76c <main+0x6>
 76c:	00 d0       	rcall	.+0      	; 0x76e <main+0x8>
 76e:	00 d0       	rcall	.+0      	; 0x770 <main+0xa>
 770:	cd b7       	in	r28, 0x3d	; 61
 772:	de b7       	in	r29, 0x3e	; 62
		port_ini ();
 774:	00 de       	rcall	.-1024   	; 0x376 <port_ini>
		timer_init ();
 776:	f4 dd       	rcall	.-1048   	; 0x360 <timer_init>
		read_m ();
 778:	af dd       	rcall	.-1186   	; 0x2d8 <read_m>
		uint8_t numbers[DIGITS_MAX]={None,None,None,None,None,None};
 77a:	86 e0       	ldi	r24, 0x06	; 6
 77c:	e1 e6       	ldi	r30, 0x61	; 97
 77e:	f0 e0       	ldi	r31, 0x00	; 0
 780:	de 01       	movw	r26, r28
 782:	11 96       	adiw	r26, 0x01	; 1
 784:	01 90       	ld	r0, Z+
 786:	0d 92       	st	X+, r0
 788:	8a 95       	dec	r24
 78a:	e1 f7       	brne	.-8      	; 0x784 <main+0x1e>
		sei();
 78c:	78 94       	sei

																		
	while (1)
	{	
		control(get_button());											
 78e:	c8 de       	rcall	.-624    	; 0x520 <get_button>
 790:	45 df       	rcall	.-374    	; 0x61c <control>
		set_digits_numbers(numbers);
 792:	ce 01       	movw	r24, r28
 794:	01 96       	adiw	r24, 0x01	; 1
 796:	f2 dc       	rcall	.-1564   	; 0x17c <set_digits_numbers>
		SPI(numbers);
 798:	ce 01       	movw	r24, r28
 79a:	01 96       	adiw	r24, 0x01	; 1
 79c:	6a dc       	rcall	.-1836   	; 0x72 <SPI>
 79e:	f7 cf       	rjmp	.-18     	; 0x78e <main+0x28>

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
